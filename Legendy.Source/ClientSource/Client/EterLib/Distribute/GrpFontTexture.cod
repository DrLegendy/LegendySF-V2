; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CGraphicFontTexture@@QAE@XZ			; CGraphicFontTexture::CGraphicFontTexture
PUBLIC	??1CGraphicFontTexture@@UAE@XZ			; CGraphicFontTexture::~CGraphicFontTexture
PUBLIC	?Destroy@CGraphicFontTexture@@QAEXXZ		; CGraphicFontTexture::Destroy
PUBLIC	?Create@CGraphicFontTexture@@QAE_NPBDH_N@Z	; CGraphicFontTexture::Create
PUBLIC	?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::DestroyDeviceObjects
PUBLIC	?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z ; CGraphicFontTexture::CheckTextureIndex
PUBLIC	?SelectTexture@CGraphicFontTexture@@QAEXK@Z	; CGraphicFontTexture::SelectTexture
PUBLIC	?UpdateTexture@CGraphicFontTexture@@QAE_NXZ	; CGraphicFontTexture::UpdateTexture
PUBLIC	?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
PUBLIC	?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ; CGraphicFontTexture::UpdateCharacterInfomation
PUBLIC	?IsEmpty@CGraphicFontTexture@@UBE_NXZ		; CGraphicFontTexture::IsEmpty
PUBLIC	?Initialize@CGraphicFontTexture@@IAEXXZ		; CGraphicFontTexture::Initialize
PUBLIC	?AppendTexture@CGraphicFontTexture@@IAE_NXZ	; CGraphicFontTexture::AppendTexture
PUBLIC	?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont
PUBLIC	??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
PUBLIC	??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
PUBLIC	??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >
PUBLIC	??_GCGraphicFontTexture@@UAEPAXI@Z		; CGraphicFontTexture::`scalar deleting destructor'
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAXPAPAVCGraphicImageTexture@@QAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicImageTexture *> >
PUBLIC	??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
PUBLIC	??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *>
PUBLIC	??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicImageTexture * *,std::allocator<CGraphicImageTexture *> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>
PUBLIC	??$?0ABU?$pair@G_W@std@@$$Z$$V@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::pair<unsigned short,wchar_t> const &>
PUBLIC	??$?0V?$tuple@ABU?$pair@G_W@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@AAV?$tuple@ABU?$pair@G_W@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::tuple<std::pair<unsigned short,wchar_t> const &>,std::tuple<>,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGraphicFontTexture@@6B@			; CGraphicFontTexture::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicFontTexture@@6B@			; CGraphicFontTexture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicFontTexture@@@8			; CGraphicFontTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicFontTexture@@8			; CGraphicFontTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicFontTexture@@8			; CGraphicFontTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicFontTexture@@8		; CGraphicFontTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicTexture@@8		; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicTexture@@@8			; CGraphicTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicTexture@@8				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicTexture@@8				; CGraphicTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f800000
PUBLIC	__xmm@000000ff000000ff000000ff000000ff
PUBLIC	__xmm@0000ffff0000ffff0000ffff0000ffff
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetCharABCWidthsFloatW@16:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__TextOutW@20:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicTexture@@IAE@XZ:PROC			; CGraphicTexture::CGraphicTexture
EXTRN	??1CGraphicTexture@@MAE@XZ:PROC			; CGraphicTexture::~CGraphicTexture
EXTRN	?Destroy@CGraphicTexture@@IAEXXZ:PROC		; CGraphicTexture::Destroy
EXTRN	?Initialize@CGraphicTexture@@IAEXXZ:PROC	; CGraphicTexture::Initialize
EXTRN	??0CGraphicImageTexture@@QAE@XZ:PROC		; CGraphicImageTexture::CGraphicImageTexture
EXTRN	?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z:PROC ; CGraphicImageTexture::Create
EXTRN	?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z:PROC ; CGraphicImageTexture::Lock
EXTRN	?Unlock@CGraphicImageTexture@@QAEXH@Z:PROC	; CGraphicImageTexture::Unlock
EXTRN	??0CGraphicDib@@QAE@XZ:PROC			; CGraphicDib::CGraphicDib
EXTRN	??1CGraphicDib@@UAE@XZ:PROC			; CGraphicDib::~CGraphicDib
EXTRN	?Destroy@CGraphicDib@@QAEXXZ:PROC		; CGraphicDib::Destroy
EXTRN	?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z:PROC	; CGraphicDib::Create
EXTRN	?GetWidth@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetWidth
EXTRN	?GetHeight@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetHeight
EXTRN	?GetPointer@CGraphicDib@@QAEPAXXZ:PROC		; CGraphicDib::GetPointer
EXTRN	?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ:PROC	; CGraphicDib::GetDCHandle
EXTRN	??_ECGraphicFontTexture@@UAEPAXI@Z:PROC		; CGraphicFontTexture::`vector deleting destructor'
EXTRN	?GetCharsetFromCodePage@@YAHG@Z:PROC		; GetCharsetFromCodePage
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	?GetMaxTextureWidth@@YAKXZ:PROC			; GetMaxTextureWidth
EXTRN	?GetMaxTextureHeight@@YAKXZ:PROC		; GetMaxTextureHeight
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_ceil:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_hDC@CGraphicBase@@1PAUHDC__@@A:DWORD	; CGraphicBase::ms_hDC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@0000ffff0000ffff0000ffff0000ffff
CONST	SEGMENT
__xmm@0000ffff0000ffff0000ffff0000ffff DB 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH
	DB	00H, 00H, 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000ff000000ff000000ff000000ff
CONST	SEGMENT
__xmm@000000ff000000ff000000ff000000ff DB 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H
	DB	00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicTexture@@8
rdata$r	SEGMENT
??_R2CGraphicTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicTexture@@8 ; CGraphicTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicTexture@@8
rdata$r	SEGMENT
??_R3CGraphicTexture@@8 DD 00H				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicTexture@@@8
data$r	SEGMENT
??_R0?AVCGraphicTexture@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicTexture@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicTexture@@8 DD FLAT:??_R0?AVCGraphicTexture@@@8 ; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicFontTexture@@8 DD FLAT:??_R0?AVCGraphicFontTexture@@@8 ; CGraphicFontTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R2CGraphicFontTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicFontTexture@@8 ; CGraphicFontTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicTexture@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R3CGraphicFontTexture@@8 DD 00H			; CGraphicFontTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicFontTexture@@@8
data$r	SEGMENT
??_R0?AVCGraphicFontTexture@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicFontTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicFontTexture@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGraphicFontTexture@@6B@
rdata$r	SEGMENT
??_R4CGraphicFontTexture@@6B@ DD 00H			; CGraphicFontTexture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicFontTexture@@@8
	DD	FLAT:??_R3CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicFontTexture@@6B@
CONST	SEGMENT
??_7CGraphicFontTexture@@6B@ DD FLAT:??_R4CGraphicFontTexture@@6B@ ; CGraphicFontTexture::`vftable'
	DD	FLAT:??_ECGraphicFontTexture@@UAEPAXI@Z
	DD	FLAT:?IsEmpty@CGraphicFontTexture@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z$2
__ehfuncinfo$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z$2
__ehfuncinfo$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z$2
__ehfuncinfo$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendTexture@CGraphicFontTexture@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendTexture@CGraphicFontTexture@@IAE_NXZ$0
__ehfuncinfo$?AppendTexture@CGraphicFontTexture@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z$2
__ehfuncinfo$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicFontTexture@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CGraphicFontTexture@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CGraphicFontTexture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CGraphicFontTexture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0V?$tuple@ABU?$pair@G_W@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@AAV?$tuple@ABU?$pair@G_W@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABU?$pair@G_W@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@AAV?$tuple@ABU?$pair@G_W@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::tuple<std::pair<unsigned short,wchar_t> const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 975  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 01		 mov	 DWORD PTR [ecx], eax
  0000f	8b c1		 mov	 eax, ecx
  00011	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00015	66 0f d6 41 14	 movq	 QWORD PTR [ecx+20], xmm0
  0001a	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00021	5d		 pop	 ebp
  00022	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABU?$pair@G_W@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@AAV?$tuple@ABU?$pair@G_W@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::tuple<std::pair<unsigned short,wchar_t> const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\tuple
;	COMDAT ??$?0ABU?$pair@G_W@std@@$$Z$$V@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -4						; size = 1
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABU?$pair@G_W@std@@$$Z$$V@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::pair<unsigned short,wchar_t> const &>, COMDAT
; _this$ = ecx

; 981  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000b	8d 45 10	 lea	 eax, DWORD PTR __Val2$[ebp]
  0000e	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00011	c6 45 f8 00	 mov	 BYTE PTR $T1[ebp], 0
  00015	8b f1		 mov	 esi, ecx
  00017	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABU?$pair@G_W@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@AAV?$tuple@ABU?$pair@G_W@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::tuple<std::pair<unsigned short,wchar_t> const &>,std::tuple<>,0>
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$pair@G_W@std@@$$Z$$V@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::pair<unsigned short,wchar_t> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicImageTexture * *,std::allocator<CGraphicImageTexture *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicImageTexture * *,std::allocator<CGraphicImageTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 30		 push	 48			; 00000030H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 3b		 jne	 SHORT $LN19@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00022	0f b7 37	 movzx	 esi, WORD PTR [edi]
$LL2@Find_lower:
  00025	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  00029	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0002b	66 3b ce	 cmp	 cx, si
  0002e	72 18		 jb	 SHORT $LN16@Find_lower
  00030	77 0a		 ja	 SHORT $LN4@Find_lower
  00032	66 8b 48 12	 mov	 cx, WORD PTR [eax+18]
  00036	66 3b 4f 02	 cmp	 cx, WORD PTR [edi+2]
  0003a	72 0c		 jb	 SHORT $LN16@Find_lower
$LN4@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1710 :                 _Result._Bound           = _Trynode;

  0003c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	eb 05		 jmp	 SHORT $LN5@Find_lower
$LN16@Find_lower:

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {
; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  00048	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004b	33 c9		 xor	 ecx, ecx
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0004d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00050	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00054	74 cf		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
$LN19@Find_lower:

; 1716 :     }

  00058	8b c2		 mov	 eax, edx
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 2a		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	0f b7 31	 movzx	 esi, WORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  00024	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00026	66 39 70 10	 cmp	 WORD PTR [eax+16], si
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0002a	73 07		 jae	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	33 c9		 xor	 ecx, ecx

; 1708 :             } else {

  00031	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00040	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00044	74 de		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00046	5e		 pop	 esi
$LN12@Find_lower:

; 1716 :     }

  00047	8b c2		 mov	 eax, edx
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAXPAPAVCGraphicImageTexture@@QAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAXPAPAVCGraphicImageTexture@@QAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicImageTexture *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAXPAPAVCGraphicImageTexture@@QAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicImageTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicImageTexture * *,std::allocator<CGraphicImageTexture *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@YAPAPAVCGraphicImageTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImageTexture@@@0@@Z ; std::_Uninitialized_move<CGraphicImageTexture * *,std::allocator<CGraphicImageTexture *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 30		 push	 48			; 00000030H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicFontTexture@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicFontTexture@@UAEPAXI@Z PROC			; CGraphicFontTexture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicFontTexture@@UAE@XZ ; CGraphicFontTexture::~CGraphicFontTexture
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 b4 00 00 00	 push	 180			; 000000b4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGraphicFontTexture@@UAEPAXI@Z ENDP			; CGraphicFontTexture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 30		 push	 48			; 00000030H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 30		 push	 48			; 00000030H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
_TEXT	SEGMENT
$T2 = -112						; size = 12
$T3 = -108						; size = 8
__Loc$4 = -100						; size = 12
__Loc$5 = -100						; size = 12
$T6 = -88						; size = 8
__Myhead$7 = -80					; size = 4
_logFont$8 = -76					; size = 60
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_codePage$ = 8						; size = 2
?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z PROC	; CGraphicFontTexture::GetFont, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002d	8d 45 08	 lea	 eax, DWORD PTR _codePage$[ebp]
  00030	50		 push	 eax
  00031	8d 45 9c	 lea	 eax, DWORD PTR __Loc$5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 109  : 	TFontMap::iterator i = m_fontMap.find(codePage);

  00034	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00037	50		 push	 eax
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003f	8b 45 a4	 mov	 eax, DWORD PTR __Loc$5[ebp+8]
  00042	8b 75 08	 mov	 esi, DWORD PTR _codePage$[ebp]
  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 06		 jne	 SHORT $LN9@GetFont
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0004b	66 3b 70 10	 cmp	 si, WORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004f	73 02		 jae	 SHORT $LN8@GetFont
$LN9@GetFont:

; 1463 :         return _Get_scary()->_Myhead;

  00051	8b 07		 mov	 eax, DWORD PTR [edi]
$LN8@GetFont:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00053	3b 07		 cmp	 eax, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 111  : 	if(i != m_fontMap.end())

  00055	74 08		 je	 SHORT $LN2@GetFont

; 112  : 	{
; 113  : 		hFont = i->second;

  00057	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]

; 114  : 	}

  0005a	e9 28 01 00 00	 jmp	 $LN97@GetFont
$LN2@GetFont:

; 115  : 	else
; 116  : 	{
; 117  : 		LOGFONT logFont;
; 118  : 
; 119  : 		memset(&logFont, 0, sizeof(LOGFONT));
; 120  : 
; 121  : 		logFont.lfHeight			= m_fontSize;

  0005f	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [ebx+172]
  00065	0f 57 c0	 xorps	 xmm0, xmm0
  00068	89 45 b4	 mov	 DWORD PTR _logFont$8[ebp], eax

; 122  : 		logFont.lfEscapement		= 0;
; 123  : 		logFont.lfOrientation		= 0;
; 124  : 		logFont.lfWeight			= FW_NORMAL;
; 125  : 		logFont.lfItalic			= (BYTE) m_bItalic;

  0006b	8a 83 b0 00 00
	00		 mov	 al, BYTE PTR [ebx+176]

; 126  : 		logFont.lfUnderline			= FALSE;
; 127  : 		logFont.lfStrikeOut			= FALSE;
; 128  : 		logFont.lfCharSet			= GetCharsetFromCodePage(codePage);

  00071	56		 push	 esi
  00072	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _logFont$8[ebp+4], 0
  00079	66 0f 13 45 d0	 movlpd	 QWORD PTR _logFont$8[ebp+28], xmm0
  0007e	66 0f 13 45 d8	 movlpd	 QWORD PTR _logFont$8[ebp+36], xmm0
  00083	66 0f 13 45 e0	 movlpd	 QWORD PTR _logFont$8[ebp+44], xmm0
  00088	66 0f 13 45 e8	 movlpd	 QWORD PTR _logFont$8[ebp+52], xmm0
  0008d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _logFont$8[ebp+8], 0
  00094	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _logFont$8[ebp+12], 0
  0009b	c7 45 c4 90 01
	00 00		 mov	 DWORD PTR _logFont$8[ebp+16], 400 ; 00000190H
  000a2	88 45 c8	 mov	 BYTE PTR _logFont$8[ebp+20], al
  000a5	66 c7 45 c9 00
	00		 mov	 WORD PTR _logFont$8[ebp+21], 0
  000ab	e8 00 00 00 00	 call	 ?GetCharsetFromCodePage@@YAHG@Z ; GetCharsetFromCodePage

; 129  : 		logFont.lfOutPrecision		= OUT_DEFAULT_PRECIS;
; 130  : 		logFont.lfClipPrecision		= CLIP_DEFAULT_PRECIS;
; 131  : 		logFont.lfQuality			= ANTIALIASED_QUALITY;
; 132  : 		logFont.lfPitchAndFamily	= DEFAULT_PITCH;
; 133  : 		//Tracenf("font: %s", GetFontFaceFromCodePage(codePage));
; 134  : 		strcpy(logFont.lfFaceName, m_fontName); //GetFontFaceFromCodePage(codePage));

  000b0	8d 8b 89 00 00
	00		 lea	 ecx, DWORD PTR [ebx+137]
  000b6	88 45 cb	 mov	 BYTE PTR _logFont$8[ebp+23], al
  000b9	8d 55 d0	 lea	 edx, DWORD PTR _logFont$8[ebp+28]
  000bc	c7 45 cc 00 00
	04 00		 mov	 DWORD PTR _logFont$8[ebp+24], 262144 ; 00040000H
  000c3	83 c4 04	 add	 esp, 4
  000c6	2b d1		 sub	 edx, ecx
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@GetFont:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000d5	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  000d9	84 c0		 test	 al, al
  000db	75 f3		 jne	 SHORT $LL5@GetFont

; 135  : 		//strcpy(logFont.lfFaceName, GetFontFaceFromCodePage(codePage));
; 136  : 
; 137  : 		hFont = CreateFontIndirect(&logFont);

  000dd	8d 45 b4	 lea	 eax, DWORD PTR _logFont$8[ebp]
  000e0	50		 push	 eax
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4
  000e7	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000e9	66 89 75 a8	 mov	 WORD PTR $T6[ebp], si
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  000ed	8d 45 a8	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000f0	89 5d ac	 mov	 DWORD PTR $T6[ebp+4], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  000f3	50		 push	 eax
  000f4	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  000f7	8b cf		 mov	 ecx, edi
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
  000ff	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00103	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00106	66 0f d6 45 9c	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0010b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010f	75 06		 jne	 SHORT $LN51@GetFont
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00111	66 3b 70 10	 cmp	 si, WORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00115	73 70		 jae	 SHORT $LN97@GetFont
$LN51@GetFont:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00117	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0011e	0f 84 83 00 00
	00		 je	 $LN116@GetFont

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00124	8b 07		 mov	 eax, DWORD PTR [edi]
  00126	89 45 b0	 mov	 DWORD PTR __Myhead$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00129	89 7d 94	 mov	 DWORD PTR $T3[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0012c	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0012e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00135	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0013c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00141	8b 4d a8	 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1048 :         _Ptr = _Al.allocate(1);

  00144	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00146	8d 45 b0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00149	50		 push	 eax
  0014a	56		 push	 esi
  0014b	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0014e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00151	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00156	8d 45 b0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00159	50		 push	 eax
  0015a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00163	8d 45 b0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00166	50		 push	 eax
  00167	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * &>
  00170	83 c4 1c	 add	 esp, 28			; 0000001cH

; 810  :         this->_Ptr->_Color = _Red;

  00173	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00179	8b cf		 mov	 ecx, edi
  0017b	56		 push	 esi
  0017c	ff 75 a0	 push	 DWORD PTR __Loc$4[ebp+4]
  0017f	ff 75 9c	 push	 DWORD PTR __Loc$4[ebp]
  00182	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
$LN97@GetFont:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 142  : 	return hFont;

  00187	8b c3		 mov	 eax, ebx

; 143  : }

  00189	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00193	59		 pop	 ecx
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019a	33 cd		 xor	 ecx, ebp
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 04 00	 ret	 4
$LN116@GetFont:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  001a7	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN114@GetFont:
  001ac	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z$2:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ENDP	; CGraphicFontTexture::GetFont
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?AppendTexture@CGraphicFontTexture@@IAE_NXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pNewTexture$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?AppendTexture@CGraphicFontTexture@@IAE_NXZ PROC	; CGraphicFontTexture::AppendTexture, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 147  : 	CGraphicImageTexture * pNewTexture = new CGraphicImageTexture;

  00028	6a 34		 push	 52			; 00000034H
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	85 c0		 test	 eax, eax
  0003e	74 0b		 je	 SHORT $LN4@AppendText
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ??0CGraphicImageTexture@@QAE@XZ ; CGraphicImageTexture::CGraphicImageTexture
  00047	8b f8		 mov	 edi, eax
  00049	eb 02		 jmp	 SHORT $LN5@AppendText
$LN4@AppendText:
  0004b	33 ff		 xor	 edi, edi
$LN5@AppendText:

; 148  : 
; 149  : 	if (!pNewTexture->Create(m_dib.GetWidth(), m_dib.GetHeight(), D3DFMT_A4R4G4B4))

  0004d	6a 03		 push	 3
  0004f	6a 1a		 push	 26			; 0000001aH
  00051	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	89 7d f0	 mov	 DWORD PTR _pNewTexture$[ebp], edi
  0005e	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight
  00063	50		 push	 eax
  00064	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00067	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth
  0006c	50		 push	 eax
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::Create
  00074	84 c0		 test	 al, al
  00076	75 20		 jne	 SHORT $LN2@AppendText

; 150  : 	{
; 151  : 		delete pNewTexture;

  00078	85 ff		 test	 edi, edi
  0007a	74 08		 je	 SHORT $LN6@AppendText
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	8b cf		 mov	 ecx, edi
  00080	6a 01		 push	 1
  00082	ff 10		 call	 DWORD PTR [eax]
$LN6@AppendText:

; 152  : 		return false;

  00084	32 c0		 xor	 al, al

; 157  : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN2@AppendText:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00098	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 155  : 	m_pFontTextureVector.push_back(pNewTexture);

  0009b	8d 4b 60	 lea	 ecx, DWORD PTR [ebx+96]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0009e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000a1	74 1a		 je	 SHORT $LN12@AppendText

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000a3	89 38		 mov	 DWORD PTR [eax], edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 156  : 	return true;

  000a5	b0 01		 mov	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  000a7	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 157  : }

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN12@AppendText:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000bd	8d 55 f0	 lea	 edx, DWORD PTR _pNewTexture$[ebp]
  000c0	52		 push	 edx
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 156  : 	return true;

  000c7	b0 01		 mov	 al, 1

; 157  : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendTexture@CGraphicFontTexture@@IAE_NXZ$0:
  00000	6a 34		 push	 52			; 00000034H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AppendTexture@CGraphicFontTexture@@IAE_NXZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AppendTexture@CGraphicFontTexture@@IAE_NXZ ENDP	; CGraphicFontTexture::AppendTexture
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Initialize@CGraphicFontTexture@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicFontTexture@@IAEXXZ PROC		; CGraphicFontTexture::Initialize, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 	CGraphicTexture::Initialize();

  00003	e8 00 00 00 00	 call	 ?Initialize@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Initialize

; 20   : 	m_hFontOld = NULL;

  00008	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 21   : 	m_hFont = NULL;

  0000f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 22   : 	m_isDirty = false;

  00016	c6 86 88 00 00
	00 00		 mov	 BYTE PTR [esi+136], 0

; 23   : 	m_bItalic = false;

  0001d	c6 86 b0 00 00
	00 00		 mov	 BYTE PTR [esi+176], 0
  00024	5e		 pop	 esi

; 24   : }

  00025	c3		 ret	 0
?Initialize@CGraphicFontTexture@@IAEXXZ ENDP		; CGraphicFontTexture::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?IsEmpty@CGraphicFontTexture@@UBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGraphicFontTexture@@UBE_NXZ PROC		; CGraphicFontTexture::IsEmpty, COMDAT
; _this$ = ecx

; 28   : 	return m_fontMap.size() == 0;

  00000	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00004	0f 94 c0	 sete	 al

; 29   : }

  00007	c3		 ret	 0
?IsEmpty@CGraphicFontTexture@@UBE_NXZ ENDP		; CGraphicFontTexture::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
_TEXT	SEGMENT
__Loc$3 = -84						; size = 12
$T4 = -72						; size = 8
_width$1$ = -68						; size = 4
_rhwidth$1$ = -64					; size = 4
_this$GSCopy$1$ = -64					; size = 4
_keyValue$ = -60					; size = 2
tv1190 = -56						; size = 8
tv1181 = -56						; size = 8
tv1171 = -56						; size = 8
tv1165 = -56						; size = 8
_lAdvance$1$ = -52					; size = 4
_size$ = -48						; size = 8
_nDIBWidth$1$ = -40					; size = 4
tv1091 = -40						; size = 4
_rhheight$1$ = -36					; size = 4
_height$1$ = -36					; size = 4
$T5 = -36						; size = 4
$T6 = -36						; size = 4
_nChrHeight$1$ = -32					; size = 4
_hDC$1$ = -32						; size = 4
__Myhead$7 = -32					; size = 4
_stABC$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z PROC ; CGraphicFontTexture::UpdateCharacterInfomation, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi

; 210  : 	HDC hDC = m_dib.GetDCHandle();

  0002f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00032	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 211  : 	SelectObject(hDC, GetFont(code.first));

  00037	ff 75 08	 push	 DWORD PTR _code$[ebp]
  0003a	8b f0		 mov	 esi, eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 75 e0	 mov	 DWORD PTR _hDC$1$[ebp], esi
  00041	e8 00 00 00 00	 call	 ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 212  : 
; 213  : 	wchar_t keyValue = code.second;
; 214  : 
; 215  : 	if (keyValue == 0x08)

  0004e	66 83 7d 0a 08	 cmp	 WORD PTR _code$[ebp+2], 8
  00053	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00058	0f b7 55 0a	 movzx	 edx, WORD PTR _code$[ebp+2]
  0005c	0f 44 d0	 cmove	 edx, eax

; 216  : 		keyValue = L' ';
; 217  : 
; 218  : 	ABCFLOAT	stABC;
; 219  : 	SIZE		size;
; 220  : 
; 221  : 	if (!GetTextExtentPoint32W(hDC, &keyValue, 1, &size) || !GetCharABCWidthsFloatW(hDC, keyValue, keyValue, &stABC))

  0005f	8d 45 d0	 lea	 eax, DWORD PTR _size$[ebp]
  00062	50		 push	 eax
  00063	6a 01		 push	 1
  00065	8d 45 c4	 lea	 eax, DWORD PTR _keyValue$[ebp]
  00068	89 55 c4	 mov	 DWORD PTR _keyValue$[ebp], edx
  0006b	50		 push	 eax
  0006c	56		 push	 esi
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16
  00073	85 c0		 test	 eax, eax
  00075	0f 84 e1 03 00
	00		 je	 $LN10@UpdateChar
  0007b	0f b7 45 c4	 movzx	 eax, WORD PTR _keyValue$[ebp]
  0007f	8d 4d e4	 lea	 ecx, DWORD PTR _stABC$[ebp]
  00082	51		 push	 ecx
  00083	50		 push	 eax
  00084	50		 push	 eax
  00085	56		 push	 esi
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCharABCWidthsFloatW@16
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 c8 03 00
	00		 je	 $LN10@UpdateChar

; 223  : 
; 224  : 	size.cx = stABC.abcfB;
; 225  : 	if( stABC.abcfA > 0.0f )

  00094	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _stABC$[ebp]
  00099	0f 57 c9	 xorps	 xmm1, xmm1
  0009c	0f 2f c1	 comiss	 xmm0, xmm1
  0009f	f3 0f 2c 75 e8	 cvttss2si esi, DWORD PTR _stABC$[ebp+4]
  000a4	76 2f		 jbe	 SHORT $LN11@UpdateChar
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  000a6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a9	83 ec 08	 sub	 esp, 8
  000ac	f2 0f 11 45 c8	 movsd	 QWORD PTR tv1190[ebp], xmm0
  000b1	dd 45 c8	 fld	 QWORD PTR tv1190[ebp]
  000b4	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b7	e8 00 00 00 00	 call	 _ceil
  000bc	66 0f 6e c6	 movd	 xmm0, esi
  000c0	83 c4 08	 add	 esp, 8
  000c3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c6	d9 5d dc	 fstp	 DWORD PTR $T6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 226  : 		size.cx += ceilf(stABC.abcfA);

  000c9	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR $T6[ebp]
  000ce	0f 57 c9	 xorps	 xmm1, xmm1
  000d1	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN11@UpdateChar:

; 227  : 	if( stABC.abcfC > 0.0f )

  000d5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _stABC$[ebp+8]
  000da	0f 2f c1	 comiss	 xmm0, xmm1
  000dd	76 2c		 jbe	 SHORT $LN12@UpdateChar
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  000df	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e2	83 ec 08	 sub	 esp, 8
  000e5	f2 0f 11 45 c8	 movsd	 QWORD PTR tv1181[ebp], xmm0
  000ea	dd 45 c8	 fld	 QWORD PTR tv1181[ebp]
  000ed	dd 1c 24	 fstp	 QWORD PTR [esp]
  000f0	e8 00 00 00 00	 call	 _ceil
  000f5	66 0f 6e c6	 movd	 xmm0, esi
  000f9	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 228  : 		size.cx += ceilf(stABC.abcfC);

  000fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  000ff	d9 5d dc	 fstp	 DWORD PTR $T5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 228  : 		size.cx += ceilf(stABC.abcfC);

  00102	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR $T5[ebp]
  00107	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN12@UpdateChar:

; 231  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  0010b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _stABC$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  00110	83 ec 08	 sub	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 231  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  00113	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _stABC$[ebp+4]
  00118	46		 inc	 esi
  00119	89 75 d0	 mov	 DWORD PTR _size$[ebp], esi
  0011c	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _stABC$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  00121	0f 5a c0	 cvtps2pd xmm0, xmm0
  00124	f2 0f 11 45 c8	 movsd	 QWORD PTR tv1171[ebp], xmm0
  00129	dd 45 c8	 fld	 QWORD PTR tv1171[ebp]
  0012c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012f	e8 00 00 00 00	 call	 _ceil
  00134	dd 5d c8	 fstp	 QWORD PTR tv1165[ebp]
  00137	f2 0f 10 45 c8	 movsd	 xmm0, QWORD PTR tv1165[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 233  : 	int width = m_dib.GetWidth();

  0013c	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 644  :             return (float)ceil(_X);

  0013f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00143	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 231  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  00146	f3 0f 2c c0	 cvttss2si eax, xmm0
  0014a	89 45 cc	 mov	 DWORD PTR _lAdvance$1$[ebp], eax

; 233  : 	int width = m_dib.GetWidth();

  0014d	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 234  : 	int height = m_dib.GetHeight();

  00152	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00155	89 45 bc	 mov	 DWORD PTR _width$1$[ebp], eax
  00158	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight

; 235  : 
; 236  : 	if (m_x + size.cx >= (width - 1))

  0015d	8b 55 d0	 mov	 edx, DWORD PTR _size$[ebp]
  00160	8b 4d bc	 mov	 ecx, DWORD PTR _width$1$[ebp]
  00163	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  00166	49		 dec	 ecx
  00167	03 d6		 add	 edx, esi
  00169	89 45 dc	 mov	 DWORD PTR _height$1$[ebp], eax
  0016c	3b d1		 cmp	 edx, ecx
  0016e	7c 58		 jl	 SHORT $LN14@UpdateChar

; 237  : 	{
; 238  : 		m_y += (m_step + 1);

  00170	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]

; 239  : 		m_step = 0;
; 240  : 		m_x = 0;
; 241  : 
; 242  : 		if (m_y + size.cy >= (height - 1))

  00176	33 f6		 xor	 esi, esi
  00178	40		 inc	 eax
  00179	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0
  00183	01 87 80 00 00
	00		 add	 DWORD PTR [edi+128], eax
  00189	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  0018f	8b 45 dc	 mov	 eax, DWORD PTR _height$1$[ebp]
  00192	03 4d d4	 add	 ecx, DWORD PTR _size$[ebp+4]
  00195	48		 dec	 eax
  00196	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  0019d	3b c8		 cmp	 ecx, eax
  0019f	7c 27		 jl	 SHORT $LN14@UpdateChar

; 243  : 		{
; 244  : 			if (!UpdateTexture())

  001a1	8b cf		 mov	 ecx, edi
  001a3	e8 00 00 00 00	 call	 ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::UpdateTexture
  001a8	84 c0		 test	 al, al
  001aa	0f 84 ac 02 00
	00		 je	 $LN10@UpdateChar

; 245  : 			{
; 246  : 				return NULL;
; 247  : 			}
; 248  : 
; 249  : 			if (!AppendTexture())

  001b0	8b cf		 mov	 ecx, edi
  001b2	e8 00 00 00 00	 call	 ?AppendTexture@CGraphicFontTexture@@IAE_NXZ ; CGraphicFontTexture::AppendTexture
  001b7	84 c0		 test	 al, al
  001b9	0f 84 9d 02 00
	00		 je	 $LN10@UpdateChar

; 250  : 				return NULL;
; 251  : 
; 252  : 			m_y = 0;

  001bf	89 b7 80 00 00
	00		 mov	 DWORD PTR [edi+128], esi
  001c5	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
$LN14@UpdateChar:

; 253  : 		}
; 254  : 	}
; 255  : 
; 256  : 	TextOutW(hDC, m_x, m_y, &keyValue, 1);

  001c8	6a 01		 push	 1
  001ca	8d 45 c4	 lea	 eax, DWORD PTR _keyValue$[ebp]
  001cd	50		 push	 eax
  001ce	ff b7 80 00 00
	00		 push	 DWORD PTR [edi+128]
  001d4	56		 push	 esi
  001d5	ff 75 e0	 push	 DWORD PTR _hDC$1$[ebp]
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutW@20

; 257  : 
; 258  : 	int nChrX;
; 259  : 	int nChrY;
; 260  : 	int nChrWidth = size.cx;
; 261  : 	int nChrHeight = size.cy;

  001de	8b 45 d4	 mov	 eax, DWORD PTR _size$[ebp+4]

; 262  : 	int nDIBWidth = m_dib.GetWidth();

  001e1	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  001e4	8b 75 d0	 mov	 esi, DWORD PTR _size$[ebp]
  001e7	89 45 e0	 mov	 DWORD PTR _nChrHeight$1$[ebp], eax
  001ea	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 263  : 
; 264  : 
; 265  : 	DWORD*pdwDIBData=(DWORD*)m_dib.GetPointer();

  001ef	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  001f2	89 45 d8	 mov	 DWORD PTR _nDIBWidth$1$[ebp], eax
  001f5	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer

; 266  : 	DWORD*pdwDIBBase=pdwDIBData+nDIBWidth*m_y+m_x;

  001fa	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  00200	0f af 4d d8	 imul	 ecx, DWORD PTR _nDIBWidth$1$[ebp]
  00204	03 4f 7c	 add	 ecx, DWORD PTR [edi+124]

; 267  : 	DWORD*pdwDIBRow;
; 268  : 
; 269  : 	pdwDIBRow=pdwDIBBase;
; 270  : 	for (nChrY=0; nChrY<nChrHeight; ++nChrY, pdwDIBRow+=nDIBWidth)

  00207	83 7d e0 00	 cmp	 DWORD PTR _nChrHeight$1$[ebp], 0
  0020b	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0020e	0f 8e b8 00 00
	00		 jle	 $LN3@UpdateChar

; 253  : 		}
; 254  : 	}
; 255  : 
; 256  : 	TextOutW(hDC, m_x, m_y, &keyValue, 1);

  00214	8b 45 d8	 mov	 eax, DWORD PTR _nDIBWidth$1$[ebp]
  00217	0f 28 2d 00 00
	00 00		 movaps	 xmm5, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0021e	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  00225	89 4d d8	 mov	 DWORD PTR tv1091[ebp], ecx
  00228	8b c1		 mov	 eax, ecx
  0022a	66 0f 1f 44 00
	00		 npad	 6
$LL4@UpdateChar:

; 271  : 	{
; 272  : 		for (nChrX=0; nChrX<nChrWidth; ++nChrX)

  00230	33 c9		 xor	 ecx, ecx
  00232	85 f6		 test	 esi, esi
  00234	0f 8e 83 00 00
	00		 jle	 $LN2@UpdateChar
  0023a	83 fe 08	 cmp	 esi, 8
  0023d	72 66		 jb	 SHORT $LL127@UpdateChar
  0023f	8b c6		 mov	 eax, esi
  00241	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00246	79 05		 jns	 SHORT $LN130@UpdateChar
  00248	48		 dec	 eax
  00249	83 c8 f8	 or	 eax, -8			; fffffff8H
  0024c	40		 inc	 eax
$LN130@UpdateChar:
  0024d	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR __xmm@000000ff000000ff000000ff000000ff
  00254	8b fe		 mov	 edi, esi
  00256	0f 28 25 00 00
	00 00		 movaps	 xmm4, XMMWORD PTR __xmm@0000ffff0000ffff0000ffff0000ffff
  0025d	2b f8		 sub	 edi, eax
  0025f	0f 57 db	 xorps	 xmm3, xmm3
$LL7@UpdateChar:

; 273  : 		{
; 274  : 			pdwDIBRow[nChrX]=(pdwDIBRow[nChrX]&0xff) ? 0xffff : 0;

  00262	0f 10 04 8a	 movups	 xmm0, XMMWORD PTR [edx+ecx*4]
  00266	0f 28 ca	 movaps	 xmm1, xmm2
  00269	66 0f db c8	 pand	 xmm1, xmm0
  0026d	66 0f 76 cb	 pcmpeqd xmm1, xmm3
  00271	66 0f df cd	 pandn	 xmm1, xmm5
  00275	66 0f db cc	 pand	 xmm1, xmm4
  00279	0f 11 0c 8a	 movups	 XMMWORD PTR [edx+ecx*4], xmm1
  0027d	0f 10 44 8a 10	 movups	 xmm0, XMMWORD PTR [edx+ecx*4+16]
  00282	0f 28 ca	 movaps	 xmm1, xmm2
  00285	66 0f db c8	 pand	 xmm1, xmm0
  00289	66 0f 76 cb	 pcmpeqd xmm1, xmm3
  0028d	66 0f df cd	 pandn	 xmm1, xmm5
  00291	66 0f db cc	 pand	 xmm1, xmm4
  00295	0f 11 4c 8a 10	 movups	 XMMWORD PTR [edx+ecx*4+16], xmm1
  0029a	83 c1 08	 add	 ecx, 8
  0029d	3b cf		 cmp	 ecx, edi
  0029f	7c c1		 jl	 SHORT $LL7@UpdateChar

; 271  : 	{
; 272  : 		for (nChrX=0; nChrX<nChrWidth; ++nChrX)

  002a1	3b ce		 cmp	 ecx, esi
  002a3	7d 15		 jge	 SHORT $LN128@UpdateChar
$LL127@UpdateChar:

; 273  : 		{
; 274  : 			pdwDIBRow[nChrX]=(pdwDIBRow[nChrX]&0xff) ? 0xffff : 0;

  002a5	0f b6 04 8a	 movzx	 eax, BYTE PTR [edx+ecx*4]
  002a9	f7 d8		 neg	 eax
  002ab	1b c0		 sbb	 eax, eax
  002ad	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002b2	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  002b5	41		 inc	 ecx
  002b6	3b ce		 cmp	 ecx, esi
  002b8	7c eb		 jl	 SHORT $LL127@UpdateChar
$LN128@UpdateChar:

; 267  : 	DWORD*pdwDIBRow;
; 268  : 
; 269  : 	pdwDIBRow=pdwDIBBase;
; 270  : 	for (nChrY=0; nChrY<nChrHeight; ++nChrY, pdwDIBRow+=nDIBWidth)

  002ba	8b 45 d8	 mov	 eax, DWORD PTR tv1091[ebp]
$LN2@UpdateChar:
  002bd	03 d0		 add	 edx, eax
  002bf	83 6d e0 01	 sub	 DWORD PTR _nChrHeight$1$[ebp], 1
  002c3	0f 85 67 ff ff
	ff		 jne	 $LL4@UpdateChar
  002c9	8b 7d c0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@UpdateChar:
  002cc	66 0f 6e 45 bc	 movd	 xmm0, DWORD PTR _width$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002d1	8d 45 08	 lea	 eax, DWORD PTR _code$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 278  : 	float rhwidth = 1.0f / float(width);

  002d4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 280  : 
; 281  : 	TCharacterInfomation& rNewCharInfo = m_charInfoMap[code];

  002dc	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  002df	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002e2	8b ce		 mov	 ecx, esi
  002e4	50		 push	 eax
  002e5	8d 45 ac	 lea	 eax, DWORD PTR __Loc$3[ebp]
  002e8	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 278  : 	float rhwidth = 1.0f / float(width);

  002e9	0f 28 d1	 movaps	 xmm2, xmm1
  002ec	f3 0f 5e d0	 divss	 xmm2, xmm0
  002f0	66 0f 6e 45 dc	 movd	 xmm0, DWORD PTR _height$1$[ebp]

; 279  : 	float rhheight = 1.0f / float(height);

  002f5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002f8	f3 0f 11 55 c0	 movss	 DWORD PTR _rhwidth$1$[ebp], xmm2
  002fd	f3 0f 5e c8	 divss	 xmm1, xmm0
  00301	f3 0f 11 4d dc	 movss	 DWORD PTR _rhheight$1$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 176  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00306	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0030b	8b 4d b4	 mov	 ecx, DWORD PTR __Loc$3[ebp+8]
  0030e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00312	75 20		 jne	 SHORT $LN28@UpdateChar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00314	0f b7 51 10	 movzx	 edx, WORD PTR [ecx+16]
  00318	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0031b	66 3b c2	 cmp	 ax, dx
  0031e	72 14		 jb	 SHORT $LN28@UpdateChar
  00320	0f 87 90 00 00
	00		 ja	 $LN27@UpdateChar
  00326	66 8b 45 0a	 mov	 ax, WORD PTR _code$[ebp+2]
  0032a	66 3b 41 12	 cmp	 ax, WORD PTR [ecx+18]
  0032e	0f 83 82 00 00
	00		 jae	 $LN27@UpdateChar
$LN28@UpdateChar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00334	81 7e 04 55 55
	55 05		 cmp	 DWORD PTR [esi+4], 89478485 ; 05555555H
  0033b	0f 84 3a 01 00
	00		 je	 $LN133@UpdateChar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 184  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00341	8b 06		 mov	 eax, DWORD PTR [esi]
  00343	89 45 e0	 mov	 DWORD PTR __Myhead$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00346	89 75 b8	 mov	 DWORD PTR $T4[ebp], esi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00349	6a 30		 push	 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0034b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00352	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00359	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  0035e	8b f0		 mov	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

  00360	8d 45 08	 lea	 eax, DWORD PTR _code$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00363	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00366	51		 push	 ecx
  00367	8b d4		 mov	 edx, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

  00369	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0036b	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00372	52		 push	 edx
  00373	e8 00 00 00 00	 call	 ??$?0ABU?$pair@G_W@std@@$$Z$$V@?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation><std::pair<unsigned short,wchar_t> const &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00378	8d 45 e0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  0037b	50		 push	 eax
  0037c	56		 push	 esi
  0037d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00382	8d 45 e0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00385	50		 push	 eax
  00386	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0038f	8d 45 e0	 lea	 eax, DWORD PTR __Myhead$7[ebp]
  00392	50		 push	 eax
  00393	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00396	50		 push	 eax
  00397	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * &>
  0039c	83 c4 18	 add	 esp, 24			; 00000018H

; 810  :         this->_Ptr->_Color = _Red;

  0039f	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\map

; 190  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003a5	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  003a8	56		 push	 esi
  003a9	ff 75 b0	 push	 DWORD PTR __Loc$3[ebp+4]
  003ac	ff 75 ac	 push	 DWORD PTR __Loc$3[ebp]
  003af	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
  003b4	8b c8		 mov	 ecx, eax
$LN27@UpdateChar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003b6	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  003b9	2b 47 60	 sub	 eax, DWORD PTR [edi+96]
  003bc	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 283  : 	rNewCharInfo.index = m_pFontTextureVector.size() - 1;

  003bf	48		 dec	 eax
  003c0	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 284  : 	rNewCharInfo.width = size.cx;

  003c4	0f b7 45 d0	 movzx	 eax, WORD PTR _size$[ebp]
  003c8	66 89 41 16	 mov	 WORD PTR [ecx+22], ax

; 285  : 	rNewCharInfo.height = size.cy;

  003cc	0f b7 45 d4	 movzx	 eax, WORD PTR _size$[ebp+4]
  003d0	66 89 41 18	 mov	 WORD PTR [ecx+24], ax
  003d4	66 0f 6e 47 7c	 movd	 xmm0, DWORD PTR [edi+124]

; 286  : 	rNewCharInfo.left = float(m_x) * rhwidth;

  003d9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003dc	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _rhwidth$1$[ebp]
  003e1	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  003e6	66 0f 6e 87 80
	00 00 00	 movd	 xmm0, DWORD PTR [edi+128]

; 287  : 	rNewCharInfo.top = float(m_y) * rhheight;

  003ee	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003f1	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _rhheight$1$[ebp]
  003f6	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 288  : 	rNewCharInfo.right = float(m_x+size.cx) * rhwidth;

  003fb	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  003fe	03 45 d0	 add	 eax, DWORD PTR _size$[ebp]
  00401	66 0f 6e c0	 movd	 xmm0, eax
  00405	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00408	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _rhwidth$1$[ebp]
  0040d	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0

; 289  : 	rNewCharInfo.bottom = float(m_y+size.cy) * rhheight;

  00412	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  00418	03 45 d4	 add	 eax, DWORD PTR _size$[ebp+4]
  0041b	66 0f 6e c0	 movd	 xmm0, eax
  0041f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00422	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _rhheight$1$[ebp]
  00427	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0
  0042c	66 0f 6e 45 cc	 movd	 xmm0, DWORD PTR _lAdvance$1$[ebp]

; 290  : 	rNewCharInfo.advance = (float) lAdvance;

  00431	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00434	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0

; 291  : 
; 292  : 	m_x += size.cx;

  00439	8b 45 d0	 mov	 eax, DWORD PTR _size$[ebp]
  0043c	01 47 7c	 add	 DWORD PTR [edi+124], eax

; 293  : 
; 294  : 	if (m_step < size.cy)

  0043f	8b 45 d4	 mov	 eax, DWORD PTR _size$[ebp+4]
  00442	39 87 84 00 00
	00		 cmp	 DWORD PTR [edi+132], eax
  00448	7d 06		 jge	 SHORT $LN17@UpdateChar

; 295  : 		m_step = size.cy;

  0044a	89 87 84 00 00
	00		 mov	 DWORD PTR [edi+132], eax
$LN17@UpdateChar:

; 296  : 
; 297  : 	m_isDirty = true;

  00450	c6 87 88 00 00
	00 01		 mov	 BYTE PTR [edi+136], 1

; 298  : 
; 299  : 	return &rNewCharInfo;

  00457	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0045a	eb 02		 jmp	 SHORT $LN1@UpdateChar
$LN10@UpdateChar:

; 222  : 		return NULL;

  0045c	33 c0		 xor	 eax, eax
$LN1@UpdateChar:

; 300  : }

  0045e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00461	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00468	59		 pop	 ecx
  00469	5f		 pop	 edi
  0046a	5e		 pop	 esi
  0046b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046e	33 cd		 xor	 ecx, ebp
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	8b e5		 mov	 esp, ebp
  00477	5d		 pop	 ebp
  00478	c2 04 00	 ret	 4
$LN133@UpdateChar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  0047b	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN131@UpdateChar:
  00480	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z$2:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ENDP ; CGraphicFontTexture::UpdateCharacterInfomation
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_code$ = 8						; size = 4
_codePage$ = 8						; size = 2
_keyValue$ = 12						; size = 2
?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z PROC ; CGraphicFontTexture::GetCharacterInfomation, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00007	66 8b 5d 0c	 mov	 bx, WORD PTR _keyValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 193  : {

  0000b	8b c1		 mov	 eax, ecx
  0000d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0000e	66 8b 75 08	 mov	 si, WORD PTR _codePage$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 193  : {

  00012	57		 push	 edi

; 194  : 	TCharacterKey code(codePage, keyValue);
; 195  : 
; 196  : 	TCharacterInfomationMap::iterator f = m_charInfoMap.find(code);

  00013	8d 78 6c	 lea	 edi, DWORD PTR [eax+108]
  00016	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00019	8d 45 08	 lea	 eax, DWORD PTR _code$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0001c	66 89 75 08	 mov	 WORD PTR _code$[ebp], si
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00020	50		 push	 eax
  00021	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00024	66 89 5d 0a	 mov	 WORD PTR _code$[ebp+2], bx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	50		 push	 eax
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00033	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00037	75 21		 jne	 SHORT $LN47@GetCharact
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00039	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  0003d	66 3b f1	 cmp	 si, cx
  00040	72 18		 jb	 SHORT $LN47@GetCharact
  00042	77 06		 ja	 SHORT $LN46@GetCharact
  00044	66 3b 58 12	 cmp	 bx, WORD PTR [eax+18]
  00048	72 10		 jb	 SHORT $LN47@GetCharact
$LN46@GetCharact:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004a	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 198  : 	if (m_charInfoMap.end() == f)

  0004c	74 0c		 je	 SHORT $LN47@GetCharact

; 201  : 	}
; 202  : 	else
; 203  : 	{
; 204  : 		return &f->second;
; 205  : 	}
; 206  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	83 c0 14	 add	 eax, 20			; 00000014H
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN47@GetCharact:

; 199  : 	{
; 200  : 		return UpdateCharacterInfomation(code);

  0005a	ff 75 08	 push	 DWORD PTR _code$[ebp]
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00060	e8 00 00 00 00	 call	 ?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ; CGraphicFontTexture::UpdateCharacterInfomation
  00065	5f		 pop	 edi

; 201  : 	}
; 202  : 	else
; 203  : 	{
; 204  : 		return &f->second;
; 205  : 	}
; 206  : }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ENDP ; CGraphicFontTexture::GetCharacterInfomation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ
_TEXT	SEGMENT
_pFontTexture$1$ = -12					; size = 4
_pwDst$ = -8						; size = 4
_pitch$ = -4						; size = 4
?UpdateTexture@CGraphicFontTexture@@QAE_NXZ PROC	; CGraphicFontTexture::UpdateTexture, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 161  : 	if(!m_isDirty)

  00009	80 be 88 00 00
	00 00		 cmp	 BYTE PTR [esi+136], 0
  00010	75 07		 jne	 SHORT $LN8@UpdateText

; 162  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 190  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN8@UpdateText:

; 163  : 
; 164  : 	m_isDirty = false;

  00019	c6 86 88 00 00
	00 00		 mov	 BYTE PTR [esi+136], 0

; 165  : 
; 166  : 	CGraphicImageTexture * pFontTexture = m_pFontTextureVector.back();

  00020	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00023	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00026	89 45 f4	 mov	 DWORD PTR _pFontTexture$1$[ebp], eax

; 167  : 
; 168  : 	if (!pFontTexture)

  00029	85 c0		 test	 eax, eax
  0002b	0f 84 8c 00 00
	00		 je	 $LN22@UpdateText

; 169  : 		return false;
; 170  : 
; 171  : 	WORD* pwDst;
; 172  : 	int pitch;
; 173  : 
; 174  : 	if (!pFontTexture->Lock(&pitch, (void**)&pwDst))

  00031	6a 00		 push	 0
  00033	8d 4d f8	 lea	 ecx, DWORD PTR _pwDst$[ebp]
  00036	51		 push	 ecx
  00037	8d 4d fc	 lea	 ecx, DWORD PTR _pitch$[ebp]
  0003a	51		 push	 ecx
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z ; CGraphicImageTexture::Lock
  00042	84 c0		 test	 al, al
  00044	74 77		 je	 SHORT $LN22@UpdateText

; 176  : 
; 177  : 	pitch /= 2;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _pitch$[ebp]

; 178  : 
; 179  : 	int width = m_dib.GetWidth();

  00049	83 c6 14	 add	 esi, 20			; 00000014H
  0004c	99		 cdq
  0004d	8b ce		 mov	 ecx, esi
  0004f	2b c2		 sub	 eax, edx
  00051	53		 push	 ebx
  00052	d1 f8		 sar	 eax, 1
  00054	57		 push	 edi
  00055	89 45 fc	 mov	 DWORD PTR _pitch$[ebp], eax
  00058	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 180  : 	int height = m_dib.GetHeight();

  0005d	8b ce		 mov	 ecx, esi
  0005f	8b f8		 mov	 edi, eax
  00061	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight

; 181  : 
; 182  : 	DWORD * pdwSrc = (DWORD*)m_dib.GetPointer();

  00066	8b ce		 mov	 ecx, esi
  00068	8b d8		 mov	 ebx, eax
  0006a	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer
  0006f	8b f0		 mov	 esi, eax

; 183  : 
; 184  : 	for (int y = 0; y < height; ++y, pwDst += pitch, pdwSrc += width)

  00071	85 db		 test	 ebx, ebx
  00073	7e 35		 jle	 SHORT $LN3@UpdateText
$LL4@UpdateText:

; 185  : 		for (int x = 0; x < width; ++x)

  00075	33 c0		 xor	 eax, eax
  00077	85 ff		 test	 edi, edi
  00079	7e 15		 jle	 SHORT $LN2@UpdateText
  0007b	0f 1f 44 00 00	 npad	 5
$LL7@UpdateText:

; 186  : 			pwDst[x]=pdwSrc[x];

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _pwDst$[ebp]
  00083	66 8b 14 86	 mov	 dx, WORD PTR [esi+eax*4]
  00087	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0008b	40		 inc	 eax
  0008c	3b c7		 cmp	 eax, edi
  0008e	7c f0		 jl	 SHORT $LL7@UpdateText
$LN2@UpdateText:

; 183  : 
; 184  : 	for (int y = 0; y < height; ++y, pwDst += pitch, pdwSrc += width)

  00090	8b 55 f8	 mov	 edx, DWORD PTR _pwDst$[ebp]
  00093	8b 45 fc	 mov	 eax, DWORD PTR _pitch$[ebp]
  00096	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00099	89 45 f8	 mov	 DWORD PTR _pwDst$[ebp], eax
  0009c	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  000a3	03 f0		 add	 esi, eax
  000a5	83 eb 01	 sub	 ebx, 1
  000a8	75 cb		 jne	 SHORT $LL4@UpdateText
$LN3@UpdateText:

; 187  : 
; 188  : 	pFontTexture->Unlock();

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 ?Unlock@CGraphicImageTexture@@QAEXH@Z ; CGraphicImageTexture::Unlock

; 189  : 	return true;

  000b4	5f		 pop	 edi
  000b5	5b		 pop	 ebx
  000b6	b0 01		 mov	 al, 1
  000b8	5e		 pop	 esi

; 190  : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN22@UpdateText:

; 175  : 		return false;

  000bd	32 c0		 xor	 al, al
  000bf	5e		 pop	 esi

; 190  : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ENDP	; CGraphicFontTexture::UpdateTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?SelectTexture@CGraphicFontTexture@@QAEXK@Z
_TEXT	SEGMENT
_dwTexture$ = 8						; size = 4
?SelectTexture@CGraphicFontTexture@@QAEXK@Z PROC	; CGraphicFontTexture::SelectTexture, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwTexture$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 311  : {

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00009	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 313  : 	m_lpd3dTexture = m_pFontTextureVector[dwTexture]->GetD3DTexture();

  0000c	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0000f	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	5e		 pop	 esi

; 314  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SelectTexture@CGraphicFontTexture@@QAEXK@Z ENDP	; CGraphicFontTexture::SelectTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z
_TEXT	SEGMENT
_dwTexture$ = 8						; size = 4
?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z PROC	; CGraphicFontTexture::CheckTextureIndex, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00006	2b 41 60	 sub	 eax, DWORD PTR [ecx+96]
  00009	c1 f8 02	 sar	 eax, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 304  : 	if (dwTexture >= m_pFontTextureVector.size())

  0000c	39 45 08	 cmp	 DWORD PTR _dwTexture$[ebp], eax
  0000f	0f 92 c0	 setb	 al

; 305  : 		return false;
; 306  : 
; 307  : 	return true;
; 308  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z ENDP	; CGraphicFontTexture::CheckTextureIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ PROC	; CGraphicFontTexture::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 67   : }

  00000	c2 00 00	 ret	 0
?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ ENDP	; CGraphicFontTexture::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ PROC	; CGraphicFontTexture::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 62   : 	return true;

  00000	b0 01		 mov	 al, 1

; 63   : }

  00002	c3		 ret	 0
?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ ENDP	; CGraphicFontTexture::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Create@CGraphicFontTexture@@QAE_NPBDH_N@Z
_TEXT	SEGMENT
_c_szFontName$ = 8					; size = 4
_fontSize$ = 12						; size = 4
_bItalic$ = 16						; size = 1
?Create@CGraphicFontTexture@@QAE_NPBDH_N@Z PROC		; CGraphicFontTexture::Create, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b d9		 mov	 ebx, ecx

; 71   : 	Destroy();

  00008	e8 00 00 00 00	 call	 ?Destroy@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::Destroy

; 72   : 
; 73   : 	strncpy(m_fontName, c_szFontName, sizeof(m_fontName)-1);

  0000d	6a 1f		 push	 31			; 0000001fH
  0000f	ff 75 08	 push	 DWORD PTR _c_szFontName$[ebp]
  00012	8d 83 89 00 00
	00		 lea	 eax, DWORD PTR [ebx+137]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _strncpy

; 74   : 	m_fontSize	= fontSize;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _fontSize$[ebp]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	89 83 ac 00 00
	00		 mov	 DWORD PTR [ebx+172], eax

; 75   : 	m_bItalic	= bItalic;
; 76   : 
; 77   : 	m_x = 0;
; 78   : 	m_y = 0;
; 79   : 	m_step = 0;
; 80   : 
; 81   : 	DWORD width = 256,height = 256;

  0002a	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  0002f	8a 45 10	 mov	 al, BYTE PTR _bItalic$[ebp]
  00032	8b f7		 mov	 esi, edi
  00034	88 83 b0 00 00
	00		 mov	 BYTE PTR [ebx+176], al
  0003a	c7 43 7c 00 00
	00 00		 mov	 DWORD PTR [ebx+124], 0
  00041	c7 83 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+128], 0
  0004b	c7 83 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+132], 0

; 82   : 	if (GetMaxTextureWidth() > 512)

  00055	e8 00 00 00 00	 call	 ?GetMaxTextureWidth@@YAKXZ ; GetMaxTextureWidth
  0005a	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0005f	3b c1		 cmp	 eax, ecx
  00061	0f 47 f9	 cmova	 edi, ecx

; 83   : 		width = 512;
; 84   : 	if (GetMaxTextureHeight() > 512)

  00064	e8 00 00 00 00	 call	 ?GetMaxTextureHeight@@YAKXZ ; GetMaxTextureHeight
  00069	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  0006e	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00073	0f 47 f0	 cmova	 esi, eax

; 85   : 		height = 512;
; 86   : 
; 87   : 	if (!m_dib.Create(ms_hDC, width, height))

  00076	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  00079	56		 push	 esi
  0007a	57		 push	 edi
  0007b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hDC@CGraphicBase@@1PAUHDC__@@A ; CGraphicBase::ms_hDC
  00081	8b c8		 mov	 ecx, eax
  00083	e8 00 00 00 00	 call	 ?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z ; CGraphicDib::Create
  00088	84 c0		 test	 al, al
  0008a	74 4e		 je	 SHORT $LN7@Create

; 88   : 		return false;
; 89   : 
; 90   : 	HDC hDC = m_dib.GetDCHandle();

  0008c	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0008f	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle
  00094	8b f0		 mov	 esi, eax

; 91   : 
; 92   : 	m_hFont = GetFont(GetDefaultCodePage());

  00096	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  0009b	50		 push	 eax
  0009c	8b cb		 mov	 ecx, ebx
  0009e	e8 00 00 00 00	 call	 ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont

; 93   : 
; 94   : 	m_hFontOld=(HFONT)SelectObject(hDC, m_hFont);

  000a3	50		 push	 eax
  000a4	56		 push	 esi
  000a5	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 95   : 	SetTextColor(hDC, RGB(255, 255, 255));

  000ae	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  000b3	56		 push	 esi
  000b4	89 43 58	 mov	 DWORD PTR [ebx+88], eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 96   : 	SetBkColor(hDC,	0);

  000bd	6a 00		 push	 0
  000bf	56		 push	 esi
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkColor@8

; 97   : 
; 98   : 	if (!AppendTexture())

  000c6	8b cb		 mov	 ecx, ebx
  000c8	e8 00 00 00 00	 call	 ?AppendTexture@CGraphicFontTexture@@IAE_NXZ ; CGraphicFontTexture::AppendTexture
  000cd	84 c0		 test	 al, al
  000cf	74 09		 je	 SHORT $LN7@Create

; 99   : 		return false;
; 100  : 
; 101  : 	return true;
; 102  : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	b0 01		 mov	 al, 1
  000d5	5b		 pop	 ebx
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
$LN7@Create:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	32 c0		 xor	 al, al
  000de	5b		 pop	 ebx
  000df	5d		 pop	 ebp
  000e0	c2 0c 00	 ret	 12			; 0000000cH
?Create@CGraphicFontTexture@@QAE_NPBDH_N@Z ENDP		; CGraphicFontTexture::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Destroy@CGraphicFontTexture@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?Destroy@CGraphicFontTexture@@QAEXXZ PROC		; CGraphicFontTexture::Destroy, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 33   : 	HDC hDC = m_dib.GetDCHandle();

  0000e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00011	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 34   : 	if (hDC)

  00016	85 c0		 test	 eax, eax
  00018	74 0a		 je	 SHORT $LN4@Destroy

; 35   : 		SelectObject(hDC, m_hFontOld);

  0001a	ff 73 58	 push	 DWORD PTR [ebx+88]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
$LN4@Destroy:

; 36   : 
; 37   : 	m_dib.Destroy();

  00024	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00027	e8 00 00 00 00	 call	 ?Destroy@CGraphicDib@@QAEXXZ ; CGraphicDib::Destroy

; 38   : 
; 39   : 	m_lpd3dTexture = NULL;
; 40   : 	CGraphicTexture::Destroy();

  0002c	8b cb		 mov	 ecx, ebx
  0002e	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00035	e8 00 00 00 00	 call	 ?Destroy@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0003a	8b 73 60	 mov	 esi, DWORD PTR [ebx+96]
  0003d	3b 73 64	 cmp	 esi, DWORD PTR [ebx+100]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  00040	74 1d		 je	 SHORT $LN9@Destroy
$LL10@Destroy:

; 96   : 	{
; 97   : 		delete *i;

  00042	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00044	85 c9		 test	 ecx, ecx
  00046	74 06		 je	 SHORT $LN12@Destroy
  00048	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004a	6a 01		 push	 1
  0004c	ff 10		 call	 DWORD PTR [eax]
$LN12@Destroy:

; 98   : 		*i = NULL;

  0004e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00054	83 c6 04	 add	 esi, 4

; 149  :         return _Ptr == _Right._Ptr;

  00057	3b 73 64	 cmp	 esi, DWORD PTR [ebx+100]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  0005a	75 e6		 jne	 SHORT $LL10@Destroy
  0005c	8b 73 60	 mov	 esi, DWORD PTR [ebx+96]
$LN9@Destroy:

; 99   : 	}
; 100  : 
; 101  : 	container.clear();

  0005f	89 73 64	 mov	 DWORD PTR [ebx+100], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 42   : 	m_charInfoMap.clear();

  00062	8d 7b 6c	 lea	 edi, DWORD PTR [ebx+108]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1447 :         auto _Head = _Scary->_Myhead;

  00065	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00067	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0006a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0006e	75 20		 jne	 SHORT $LN38@Destroy
$LL37@Destroy:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00070	ff 76 08	 push	 DWORD PTR [esi+8]
  00073	8b cf		 mov	 ecx, edi
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0007b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0007d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0007f	6a 30		 push	 48			; 00000030H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00087	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0008a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0008e	74 e0		 je	 SHORT $LL37@Destroy
$LN38@Destroy:

; 1449 :         _Head->_Parent  = _Head;

  00090	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1450 :         _Head->_Left    = _Head;

  00093	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1451 :         _Head->_Right   = _Head;

  00095	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 44   : 	if (m_fontMap.size())

  00098	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1452 :         _Scary->_Mysize = 0;

  0009b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 44   : 	if (m_fontMap.size())

  000a2	83 7b 78 00	 cmp	 DWORD PTR [ebx+120], 0
  000a6	0f 84 ad 00 00
	00		 je	 $LN89@Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  000ac	8b 7b 74	 mov	 edi, DWORD PTR [ebx+116]
  000af	8d 43 74	 lea	 eax, DWORD PTR [ebx+116]
  000b2	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000b5	8b 37		 mov	 esi, DWORD PTR [edi]
  000b7	3b f7		 cmp	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 48   : 		while(i != m_fontMap.end())

  000b9	74 5d		 je	 SHORT $LN3@Destroy
  000bb	8b d8		 mov	 ebx, eax
  000bd	0f 1f 00	 npad	 3
$LL2@Destroy:

; 49   : 		{
; 50   : 			DeleteObject((HGDIOBJ)i->second);

  000c0	ff 76 14	 push	 DWORD PTR [esi+20]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000c9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000cc	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d0	74 22		 je	 SHORT $LN81@Destroy

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  000d2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d9	75 15		 jne	 SHORT $LN125@Destroy
  000db	0f 1f 44 00 00	 npad	 5
$LL79@Destroy:
  000e0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000e3	75 0b		 jne	 SHORT $LN125@Destroy

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  000e5	8b f0		 mov	 esi, eax
  000e7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ea	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ee	74 f0		 je	 SHORT $LL79@Destroy
$LN125@Destroy:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  000f0	8b f0		 mov	 esi, eax

; 59   :         } else {

  000f2	eb 18		 jmp	 SHORT $LN86@Destroy
$LN81@Destroy:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000f4	8b f0		 mov	 esi, eax

; 451  :         while (!_Pnode->_Left->_Isnil) {

  000f6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000fc	75 0e		 jne	 SHORT $LN86@Destroy
  000fe	66 90		 npad	 2
$LL85@Destroy:
  00100	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00102	8b f1		 mov	 esi, ecx
  00104	8b c8		 mov	 ecx, eax
  00106	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010a	74 f4		 je	 SHORT $LL85@Destroy
$LN86@Destroy:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0010c	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  0010e	3b f7		 cmp	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 48   : 		while(i != m_fontMap.end())

  00110	75 ae		 jne	 SHORT $LL2@Destroy
  00112	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN3@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00118	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0011b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0011f	75 29		 jne	 SHORT $LN92@Destroy
  00121	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LL91@Destroy:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00124	ff 76 08	 push	 DWORD PTR [esi+8]
  00127	8b cb		 mov	 ecx, ebx
  00129	53		 push	 ebx
  0012a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0012f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00131	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00133	6a 18		 push	 24			; 00000018H
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0013b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0013e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00142	74 e0		 je	 SHORT $LL91@Destroy
  00144	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN92@Destroy:

; 1449 :         _Head->_Parent  = _Head;

  0014a	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1450 :         _Head->_Left    = _Head;

  0014d	89 3f		 mov	 DWORD PTR [edi], edi

; 1451 :         _Head->_Right   = _Head;

  0014f	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1452 :         _Scary->_Mysize = 0;

  00152	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN89@Destroy:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 57   : 	Initialize();

  00159	8b cb		 mov	 ecx, ebx
  0015b	e8 00 00 00 00	 call	 ?Initialize@CGraphicFontTexture@@IAEXXZ ; CGraphicFontTexture::Initialize
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 58   : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
?Destroy@CGraphicFontTexture@@QAEXXZ ENDP		; CGraphicFontTexture::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ??1CGraphicFontTexture@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicFontTexture@@UAE@XZ PROC			; CGraphicFontTexture::~CGraphicFontTexture, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicFontTexture@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicFontTexture@@6B@

; 14   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::Destroy

; 15   : }

  00030	8d 4e 74	 lea	 ecx, DWORD PTR [esi+116]
  00033	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
  00038	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0003b	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00040	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00043	85 c9		 test	 ecx, ecx
  00045	74 27		 je	 SHORT $LN12@CGraphicFo

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00047	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0004a	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004c	83 e0 fc	 and	 eax, -4			; fffffffcH
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00056	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00060	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0

; 1699 :             _Myend   = pointer();

  00067	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN12@CGraphicFo:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 15   : }

  0006e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00071	e8 00 00 00 00	 call	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5e		 pop	 esi
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
  0008d	cc		 int	 3
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicFontTexture@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicFontTexture@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicFontTexture@@UAE@XZ ENDP			; CGraphicFontTexture::~CGraphicFontTexture
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ??0CGraphicFontTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Pnode$2 = -16						; size = 4
__Pnode$3 = -16						; size = 4
_this$ = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicFontTexture@@QAE@XZ PROC			; CGraphicFontTexture::CGraphicFontTexture, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicFontTexture@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	e8 00 00 00 00	 call	 ??0CGraphicTexture@@IAE@XZ ; CGraphicTexture::CGraphicTexture
  00032	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CGraphicFontTexture@@6B@
  00042	e8 00 00 00 00	 call	 ??0CGraphicDib@@QAE@XZ	; CGraphicDib::CGraphicDib
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00047	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0
  0004e	c7 43 64 00 00
	00 00		 mov	 DWORD PTR [ebx+100], 0
  00055	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [ebx+104], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  0005c	8d 7b 6c	 lea	 edi, DWORD PTR [ebx+108]
  0005f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00063	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00066	6a 30		 push	 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00068	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0006e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00075	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  0007a	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0007c	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  0007f	50		 push	 eax
  00080	56		 push	 esi
  00081	89 75 f0	 mov	 DWORD PTR __Pnode$3[ebp], esi
  00084	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00089	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  0008c	50		 push	 eax
  0008d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00096	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$3[ebp]
  00099	50		 push	 eax
  0009a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> *,std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  000a3	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000a9	89 37		 mov	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  000ab	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
  000ae	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b2	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b5	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000b7	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000bd	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c4	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  000c9	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000cb	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  000ce	50		 push	 eax
  000cf	56		 push	 esi
  000d0	89 75 f0	 mov	 DWORD PTR __Pnode$2[ebp], esi
  000d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000d8	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  000db	50		 push	 eax
  000dc	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000e5	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  000e8	50		 push	 eax
  000e9	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> *,std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  000f2	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H
  000f8	83 c4 38	 add	 esp, 56			; 00000038H

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000fb	89 37		 mov	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\GrpFontTexture.cpp

; 9    : 	Initialize();

  000fd	8b cb		 mov	 ecx, ebx
  000ff	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00103	e8 00 00 00 00	 call	 ?Initialize@CGraphicFontTexture@@IAEXXZ ; CGraphicFontTexture::Initialize

; 10   : }

  00108	8b c3		 mov	 eax, ebx
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$2:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 60	 add	 ecx, 96			; 00000060H
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$3:
  0001e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00024	e9 00 00 00 00	 jmp	 ??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$4:
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 74	 add	 ecx, 116		; 00000074H
  0002f	e9 00 00 00 00	 jmp	 ??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
__ehhandler$??0CGraphicFontTexture@@QAE@XZ:
  00039	90		 npad	 1
  0003a	90		 npad	 1
  0003b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00042	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicFontTexture@@QAE@XZ
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicFontTexture@@QAE@XZ ENDP			; CGraphicFontTexture::CGraphicFontTexture
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
