; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_kLightData@@3USLightData@@A			; m_kLightData
_BSS	SEGMENT
?m_kLightData@@3USLightData@@A DB 0340H DUP (?)		; m_kLightData
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??_FCStreamData@@QAEXXZ				; CStreamData::`default constructor closure'
PUBLIC	?ResetState@CStateManagerState@@QAEXXZ		; CStateManagerState::ResetState
PUBLIC	??1?$CSingleton@VCStateManager@@@@UAE@XZ	; CSingleton<CStateManager>::~CSingleton<CStateManager>
PUBLIC	??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z	; CSingleton<CStateManager>::`scalar deleting destructor'
PUBLIC	??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z	; CStateManager::CStateManager
PUBLIC	??1CStateManager@@UAE@XZ			; CStateManager::~CStateManager
PUBLIC	?SetDefaultState@CStateManager@@QAEXXZ		; CStateManager::SetDefaultState
PUBLIC	?Restore@CStateManager@@QAEXXZ			; CStateManager::Restore
PUBLIC	?BeginScene@CStateManager@@QAE_NXZ		; CStateManager::BeginScene
PUBLIC	?EndScene@CStateManager@@QAEXXZ			; CStateManager::EndScene
PUBLIC	?SaveMaterial@CStateManager@@QAEXXZ		; CStateManager::SaveMaterial
PUBLIC	?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SaveMaterial
PUBLIC	?RestoreMaterial@CStateManager@@QAEXXZ		; CStateManager::RestoreMaterial
PUBLIC	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
PUBLIC	?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ; CStateManager::GetMaterial
PUBLIC	?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z	; CStateManager::SetLight
PUBLIC	?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z	; CStateManager::GetLight
PUBLIC	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
PUBLIC	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
PUBLIC	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
PUBLIC	?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ; CStateManager::GetRenderState
PUBLIC	?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SaveTexture
PUBLIC	?RestoreTexture@CStateManager@@QAEXK@Z		; CStateManager::RestoreTexture
PUBLIC	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
PUBLIC	?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ; CStateManager::GetTexture
PUBLIC	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState
PUBLIC	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
PUBLIC	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
PUBLIC	?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState
PUBLIC	?SetBestFiltering@CStateManager@@QAEXK@Z	; CStateManager::SetBestFiltering
PUBLIC	?SaveVertexShader@CStateManager@@QAEXK@Z	; CStateManager::SaveVertexShader
PUBLIC	?RestoreVertexShader@CStateManager@@QAEXXZ	; CStateManager::RestoreVertexShader
PUBLIC	?SetVertexShader@CStateManager@@QAEXK@Z		; CStateManager::SetVertexShader
PUBLIC	?GetVertexShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetVertexShader
PUBLIC	?SavePixelShader@CStateManager@@QAEXK@Z		; CStateManager::SavePixelShader
PUBLIC	?RestorePixelShader@CStateManager@@QAEXXZ	; CStateManager::RestorePixelShader
PUBLIC	?SetPixelShader@CStateManager@@QAEXK@Z		; CStateManager::SetPixelShader
PUBLIC	?GetPixelShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetPixelShader
PUBLIC	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform
PUBLIC	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
PUBLIC	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
PUBLIC	?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform
PUBLIC	?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SaveVertexShaderConstant
PUBLIC	?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestoreVertexShaderConstant
PUBLIC	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
PUBLIC	?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SavePixelShaderConstant
PUBLIC	?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestorePixelShaderConstant
PUBLIC	?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
PUBLIC	?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SaveStreamSource
PUBLIC	?RestoreStreamSource@CStateManager@@QAEXI@Z	; CStateManager::RestoreStreamSource
PUBLIC	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
PUBLIC	?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SaveIndices
PUBLIC	?RestoreIndices@CStateManager@@QAEXXZ		; CStateManager::RestoreIndices
PUBLIC	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
PUBLIC	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
PUBLIC	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
PUBLIC	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
PUBLIC	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
PUBLIC	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
PUBLIC	?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice
PUBLIC	??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
PUBLIC	??_GCStateManager@@UAEPAXI@Z			; CStateManager::`scalar deleting destructor'
PUBLIC	??$_Destroy_range@V?$allocator@VCStateID@@@std@@@std@@YAXPAVCStateID@@QAV1@AAV?$allocator@VCStateID@@@0@@Z ; std::_Destroy_range<std::allocator<CStateID> >
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`vftable'
PUBLIC	??_7CStateManager@@6B@				; CStateManager::`vftable'
PUBLIC	??_R4CStateManager@@6B@				; CStateManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStateManager@@@8			; CStateManager `RTTI Type Descriptor'
PUBLIC	??_R3CStateManager@@8				; CStateManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStateManager@@8				; CStateManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStateManager@@8			; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8	; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCStateManager@@@@@8	; CSingleton<CStateManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z:PROC ; CSingleton<CStateManager>::`vector deleting destructor'
EXTRN	??_ECStateManager@@UAEPAXI@Z:PROC		; CStateManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCStateManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCStateManager@@@@6B@ DD 00H		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCStateManager@@@@8 DD 00H		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCStateManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCStateManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CStateManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCStateManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStateManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStateManager@@8 DD FLAT:??_R0?AVCStateManager@@@8 ; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CStateManager@@8
rdata$r	SEGMENT
??_R2CStateManager@@8 DD FLAT:??_R1A@?0A@EA@CStateManager@@8 ; CStateManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CStateManager@@8
rdata$r	SEGMENT
??_R3CStateManager@@8 DD 00H				; CStateManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStateManager@@@8
data$r	SEGMENT
??_R0?AVCStateManager@@@8 DD FLAT:??_7type_info@@6B@	; CStateManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStateManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CStateManager@@6B@
rdata$r	SEGMENT
??_R4CStateManager@@6B@ DD 00H				; CStateManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStateManager@@@8
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_7CStateManager@@6B@
CONST	SEGMENT
??_7CStateManager@@6B@ DD FLAT:??_R4CStateManager@@6B@	; CStateManager::`vftable'
	DD	FLAT:??_ECStateManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCStateManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCStateManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCStateManager@@@@6B@ ; CSingleton<CStateManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CStateManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1
__ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VCStateID@@@std@@@std@@YAXPAVCStateID@@QAV1@AAV?$allocator@VCStateID@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VCStateID@@@std@@@std@@YAXPAVCStateID@@QAV1@AAV?$allocator@VCStateID@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CStateID> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@VCStateID@@@std@@@std@@YAXPAVCStateID@@QAV1@AAV?$allocator@VCStateID@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCStateManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCStateManager@@UAEPAXI@Z PROC			; CStateManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CStateManager@@UAE@XZ ; CStateManager::~CStateManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 7c 33 01 00	 push	 78716			; 0001337cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCStateManager@@UAEPAXI@Z ENDP			; CStateManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 39		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	d1 fa		 sar	 edx, 1
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00021	c1 e0 02	 shl	 eax, 2
  00024	50		 push	 eax
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00034	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  0003b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00042	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00043	c3		 ret	 0
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_d3dCaps$ = -216					; size = 212
__$ArrayPad$ = -4					; size = 4
_lpDevice$ = 8						; size = 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z PROC ; CStateManager::SetDevice, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpDevice$[ebp]
  00018	57		 push	 edi

; 76   : 	StateManager_Assert(lpDevice);
; 77   : 	lpDevice->AddRef();

  00019	56		 push	 esi
  0001a	8b f9		 mov	 edi, ecx
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	ff 50 04	 call	 DWORD PTR [eax+4]

; 78   : 
; 79   : 	if (m_lpD3DDev)

  00021	8b 8f 78 33 01
	00		 mov	 ecx, DWORD PTR [edi+78712]
  00027	85 c9		 test	 ecx, ecx
  00029	74 06		 je	 SHORT $LN5@SetDevice

; 80   : 	{
; 81   : 		m_lpD3DDev->Release();

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	51		 push	 ecx
  0002e	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@SetDevice:

; 82   : 		m_lpD3DDev = NULL;
; 83   : 	}
; 84   : 
; 85   : 	m_lpD3DDev = lpDevice;

  00031	89 b7 78 33 01
	00		 mov	 DWORD PTR [edi+78712], esi

; 86   : 
; 87   : 	D3DCAPS8 d3dCaps;
; 88   : 	m_lpD3DDev->GetDeviceCaps(&d3dCaps);

  00037	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _d3dCaps$[ebp]
  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	ff 50 1c	 call	 DWORD PTR [eax+28]

; 89   : 
; 90   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MAGFANISOTROPIC)

  00044	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _d3dCaps$[ebp+64]

; 91   : 		m_dwBestMagFilter = D3DTEXF_ANISOTROPIC;
; 92   : 	else
; 93   : 		m_dwBestMagFilter = D3DTEXF_LINEAR;
; 94   : 
; 95   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MINFANISOTROPIC)
; 96   : 		m_dwBestMinFilter = D3DTEXF_ANISOTROPIC;
; 97   : 	else
; 98   : 		m_dwBestMinFilter = D3DTEXF_LINEAR;
; 99   : 
; 100  : 	DWORD dwMax = d3dCaps.MaxAnisotropy;
; 101  : 	dwMax = dwMax < 4 ? dwMax : 4;

  0004a	bb 04 00 00 00	 mov	 ebx, 4
  0004f	8b c1		 mov	 eax, ecx
  00051	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00057	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005c	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00062	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  00067	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0006a	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  0006d	89 87 74 33 01
	00		 mov	 DWORD PTR [edi+78708], eax
  00073	89 8f 70 33 01
	00		 mov	 DWORD PTR [edi+78704], ecx
  00079	39 5d 94	 cmp	 DWORD PTR _d3dCaps$[ebp+108], ebx
  0007c	0f 42 5d 94	 cmovb	 ebx, DWORD PTR _d3dCaps$[ebp+108]
  00080	33 f6		 xor	 esi, esi
$LL4@SetDevice:

; 102  : 
; 103  : 	for (int i = 0; i < 8; ++i)
; 104  : 		m_lpD3DDev->SetTextureStageState(i, D3DTSS_MAXANISOTROPY, dwMax);

  00082	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00088	53		 push	 ebx
  00089	6a 15		 push	 21			; 00000015H
  0008b	56		 push	 esi
  0008c	8b 10		 mov	 edx, DWORD PTR [eax]
  0008e	50		 push	 eax
  0008f	ff 92 fc 00 00
	00		 call	 DWORD PTR [edx+252]
  00095	46		 inc	 esi
  00096	83 fe 08	 cmp	 esi, 8
  00099	7c e7		 jl	 SHORT $LL4@SetDevice

; 105  : 
; 106  : 	SetDefaultState();

  0009b	8b cf		 mov	 ecx, edi
  0009d	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState

; 107  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5b		 pop	 ebx
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ENDP ; CStateManager::SetDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 420  : 	return m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 84 81 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+26232]

; 421  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_MinVertexIndex$ = 12					; size = 4
_NumVertexIndices$ = 16					; size = 4
_PrimitiveCount$ = 20					; size = 4
_pIndexData$ = 24					; size = 4
_IndexDataFormat$ = 28					; size = 4
_pVertexStreamZeroData$ = 32				; size = 4
_VertexStreamZeroStride$ = 36				; size = 4
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z PROC ; CStateManager::DrawIndexedPrimitiveUP, COMDAT
; _this$ = ecx

; 765  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 766  : 	m_CurrentState.m_IndexData = NULL;
; 767  : 	m_CurrentState.m_StreamData[0] = NULL;
; 768  : 	return (m_lpD3DDev->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertexIndices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 24	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 e4 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52452], 0
  00010	ff 75 20	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 e8 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52456], 0
  0001d	ff 75 1c	 push	 DWORD PTR _IndexDataFormat$[ebp]
  00020	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  0002a	ff 75 18	 push	 DWORD PTR _pIndexData$[ebp]
  0002d	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  00037	ff 75 14	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0003a	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  00040	ff 75 10	 push	 DWORD PTR _NumVertexIndices$[ebp]
  00043	ff 75 0c	 push	 DWORD PTR _MinVertexIndex$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0004b	50		 push	 eax
  0004c	ff 91 24 01 00
	00		 call	 DWORD PTR [ecx+292]

; 769  : }

  00052	5d		 pop	 ebp
  00053	c2 20 00	 ret	 32			; 00000020H
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ENDP ; CStateManager::DrawIndexedPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_minIndex$ = 12						; size = 4
_NumVertices$ = 16					; size = 4
_startIndex$ = 20					; size = 4
_primCount$ = 24					; size = 4
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z PROC ; CStateManager::DrawIndexedPrimitive, COMDAT
; _this$ = ecx

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 761  : 	return (m_lpD3DDev->DrawIndexedPrimitive(PrimitiveType, minIndex, NumVertices, startIndex, primCount));

  00003	ff 75 18	 push	 DWORD PTR _primCount$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 14	 push	 DWORD PTR _startIndex$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _NumVertices$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 75 0c	 push	 DWORD PTR _minIndex$[ebp]
  00017	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0001a	50		 push	 eax
  0001b	ff 91 1c 01 00
	00		 call	 DWORD PTR [ecx+284]

; 762  : }

  00021	5d		 pop	 ebp
  00022	c2 14 00	 ret	 20			; 00000014H
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ENDP ; CStateManager::DrawIndexedPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_PrimitiveCount$ = 12					; size = 4
_pVertexStreamZeroData$ = 16				; size = 4
_VertexStreamZeroStride$ = 20				; size = 4
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC ; CStateManager::DrawPrimitiveUP, COMDAT
; _this$ = ecx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 755  : 	m_CurrentState.m_StreamData[0] = NULL;
; 756  : 	return (m_lpD3DDev->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 14	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 10	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  0000f	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  00019	ff 75 0c	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0001c	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  00026	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	50		 push	 eax
  0002c	ff 91 20 01 00
	00		 call	 DWORD PTR [ecx+288]

; 757  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; CStateManager::DrawPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_StartVertex$ = 12					; size = 4
_PrimitiveCount$ = 16					; size = 4
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z PROC ; CStateManager::DrawPrimitive, COMDAT
; _this$ = ecx

; 749  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 750  : 	return (m_lpD3DDev->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount));

  00003	ff 75 10	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00006	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0000c	ff 75 0c	 push	 DWORD PTR _StartVertex$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	50		 push	 eax
  00015	ff 91 18 01 00
	00		 call	 DWORD PTR [ecx+280]

; 751  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ENDP ; CStateManager::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SetIndices, COMDAT
; _this$ = ecx

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 87   : 			: m_lpIndexData(pIndexData),

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pIndexData$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 738  : {

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _BaseVertexIndex$[ebp]

; 94   : 			return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  0000e	39 9e e4 cc 00
	00		 cmp	 DWORD PTR [esi+52452], ebx
  00014	75 08		 jne	 SHORT $LN8@SetIndices
  00016	39 be e8 cc 00
	00		 cmp	 DWORD PTR [esi+52456], edi
  0001c	74 1d		 je	 SHORT $LN1@SetIndices
$LN8@SetIndices:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 744  : 	m_lpD3DDev->SetIndices(pIndexData, BaseVertexIndex);

  0001e	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00024	57		 push	 edi
  00025	53		 push	 ebx
  00026	50		 push	 eax
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	ff 91 54 01 00
	00		 call	 DWORD PTR [ecx+340]

; 745  : 	m_CurrentState.m_IndexData = kIndexData;

  0002f	89 9e e4 cc 00
	00		 mov	 DWORD PTR [esi+52452], ebx
  00035	89 be e8 cc 00
	00		 mov	 DWORD PTR [esi+52456], edi
$LN1@SetIndices:

; 746  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SetIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreIndices@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreIndices@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreIndices, COMDAT
; _this$ = ecx

; 734  : 	SetIndices(m_CopyState.m_IndexData.m_lpIndexData, m_CopyState.m_IndexData.m_BaseVertexIndex);

  00000	ff b1 5c 33 01
	00		 push	 DWORD PTR [ecx+78684]
  00006	ff b1 58 33 01
	00		 push	 DWORD PTR [ecx+78680]
  0000c	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 735  : }

  00011	c3		 ret	 0
?RestoreIndices@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SaveIndices, COMDAT
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 728  : 	m_CopyState.m_IndexData = m_CurrentState.m_IndexData;

  00003	8b 81 e4 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52452]
  00009	89 81 58 33 01
	00		 mov	 DWORD PTR [ecx+78680], eax
  0000f	8b 81 e8 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52456]
  00015	89 81 5c 33 01
	00		 mov	 DWORD PTR [ecx+78684], eax

; 730  : }

  0001b	5d		 pop	 ebp

; 729  : 	SetIndices(pIndexData, BaseVertexIndex);

  0001c	e9 00 00 00 00	 jmp	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SaveIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SetStreamSource, COMDAT
; _this$ = ecx

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 717  : {

  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00008	8b 75 10	 mov	 esi, DWORD PTR _Stride$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 717  : {

  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pStreamData$[ebp]

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00011	39 bc d3 64 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52324], edi
  00018	75 09		 jne	 SHORT $LN8@SetStreamS
  0001a	39 b4 d3 68 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52328], esi
  00021	74 23		 je	 SHORT $LN1@SetStreamS
$LN8@SetStreamS:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 722  : 	m_lpD3DDev->SetStreamSource(StreamNumber, pStreamData, Stride);

  00023	8b 83 78 33 01
	00		 mov	 eax, DWORD PTR [ebx+78712]
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	52		 push	 edx
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	50		 push	 eax
  0002f	ff 91 4c 01 00
	00		 call	 DWORD PTR [ecx+332]

; 723  : 	m_CurrentState.m_StreamData[StreamNumber] = kStreamData;

  00035	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00038	89 bc c3 64 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52324], edi
  0003f	89 b4 c3 68 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52328], esi
$LN1@SetStreamS:

; 724  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SetStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreStreamSource@CStateManager@@QAEXI@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
?RestoreStreamSource@CStateManager@@QAEXI@Z PROC	; CStateManager::RestoreStreamSource, COMDAT
; _this$ = ecx

; 710  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 711  : 	SetStreamSource(StreamNumber,

  00003	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00006	ff b4 c1 dc 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78556]
  0000d	ff b4 c1 d8 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78552]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 712  : 					m_CopyState.m_StreamData[StreamNumber].m_lpStreamData,
; 713  : 					m_CopyState.m_StreamData[StreamNumber].m_Stride);
; 714  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RestoreStreamSource@CStateManager@@QAEXI@Z ENDP	; CStateManager::RestoreStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SaveStreamSource, COMDAT
; _this$ = ecx

; 703  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 704  : 	// Check that we have set this up before, if not, the default is this.
; 705  : 	m_CopyState.m_StreamData[StreamNumber] = m_CurrentState.m_StreamData[StreamNumber];

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
  00006	8b 84 d1 64 cc
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+52324]
  0000d	89 84 d1 d8 32
	01 00		 mov	 DWORD PTR [ecx+edx*8+78552], eax
  00014	8b 84 d1 68 cc
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+52328]
  0001b	89 84 d1 dc 32
	01 00		 mov	 DWORD PTR [ecx+edx*8+78556], eax

; 706  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00022	89 55 08	 mov	 DWORD PTR _StreamNumber$[ebp], edx

; 707  : }

  00025	5d		 pop	 ebp

; 706  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00026	e9 00 00 00 00	 jmp	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SaveStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC	; CStateManager::SetPixelShaderConstant, COMDAT
; _this$ = ecx

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 692  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 6c 01 00
	00		 call	 DWORD PTR [edx+364]

; 693  : 
; 694  : 	// Set the renderstate and remember it.
; 695  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN3@SetPixelSh

; 692  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 80 00 00	 add	 eax, 32888		; 00008078H
  00036	03 c3		 add	 eax, ebx
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetPixelSh:

; 693  : 
; 694  : 	// Set the renderstate and remember it.
; 695  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 696  : 	{
; 697  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 698  : 		m_CurrentState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0004a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0004e	83 ef 01	 sub	 edi, 1
  00051	75 ed		 jne	 SHORT $LL4@SetPixelSh
$LN3@SetPixelSh:
  00053	5f		 pop	 edi

; 699  : 	}
; 700  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP	; CStateManager::SetPixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestorePixelShaderConstant, COMDAT
; _this$ = ecx

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 687  : 	SetPixelShaderConstant(dwRegister, &m_CopyState.m_PixelShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 688  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestorePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SavePixelShaderConstant, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : 	DWORD i;
; 675  : 
; 676  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _dwConstantCount$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	74 25		 je	 SHORT $LN3@SavePixelS
  00011	8b 55 0c	 mov	 edx, DWORD PTR _pConstantData$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	c1 e0 04	 shl	 eax, 4
  00019	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  0001e	03 c7		 add	 eax, edi
$LL4@SavePixelS:
  00020	8d 52 10	 lea	 edx, DWORD PTR [edx+16]
  00023	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 677  : 	{
; 678  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 679  : 		m_CopyState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00026	0f 10 42 f0	 movups	 xmm0, XMMWORD PTR [edx-16]
  0002a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0002e	83 e9 01	 sub	 ecx, 1
  00031	75 ed		 jne	 SHORT $LL4@SavePixelS
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
$LN3@SavePixelS:

; 680  : 	}
; 681  : 
; 682  : 	SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00036	56		 push	 esi
  00037	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 683  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SavePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SetVertexShaderConstant, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 661  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 3c 01 00
	00		 call	 DWORD PTR [edx+316]

; 662  : 
; 663  : 	// Set the renderstate and remember it.
; 664  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN3@SetVertexS

; 661  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 7a 00 00	 add	 eax, 31352		; 00007a78H
  00036	03 c3		 add	 eax, ebx
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetVertexS:

; 662  : 
; 663  : 	// Set the renderstate and remember it.
; 664  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 665  : 	{
; 666  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 667  : 		m_CurrentState.m_VertexShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0004a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0004e	83 ef 01	 sub	 edi, 1
  00051	75 ed		 jne	 SHORT $LL4@SetVertexS
$LN3@SetVertexS:
  00053	5f		 pop	 edi

; 668  : 	}
; 669  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SetVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestoreVertexShaderConstant, COMDAT
; _this$ = ecx

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  : 	SetVertexShaderConstant(dwRegister, &m_CopyState.m_VertexShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e0 00 00	 add	 eax, 57580		; 0000e0ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 657  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestoreVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SaveVertexShaderConstant, COMDAT
; _this$ = ecx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  : 	DWORD i;
; 644  : 
; 645  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _dwConstantCount$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	85 d2		 test	 edx, edx
  0000e	74 27		 je	 SHORT $LN4@SaveVertex
  00010	56		 push	 esi
  00011	c1 e0 04	 shl	 eax, 4
  00014	8b ca		 mov	 ecx, edx
  00016	57		 push	 edi
  00017	8d bb ec e0 00
	00		 lea	 edi, DWORD PTR [ebx+57580]
  0001d	81 e1 ff ff ff
	0f		 and	 ecx, 268435455		; 0fffffffH
  00023	03 f8		 add	 edi, eax
  00025	8d b0 78 7a 00
	00		 lea	 esi, DWORD PTR [eax+31352]
  0002b	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  0002e	03 f3		 add	 esi, ebx
  00030	c1 e1 02	 shl	 ecx, 2
  00033	f3 a5		 rep movsd
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
$LN4@SaveVertex:

; 646  : 	{
; 647  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 648  : 		m_CopyState.m_VertexShaderConstants[dwRegister + i] = m_CurrentState.m_VertexShaderConstants[dwRegister + i];
; 649  : 	}
; 650  : 
; 651  : 	SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00037	52		 push	 edx
  00038	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003b	8b cb		 mov	 ecx, ebx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
  00043	5b		 pop	 ebx

; 652  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SaveVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z PROC ; CStateManager::GetTransform, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 	*pMatrix = m_CurrentState.m_Matrices[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 c8		 add	 ecx, eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0000e	0f 10 81 20 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33056]
  00015	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00018	0f 10 81 30 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33072]
  0001f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00023	0f 10 81 40 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33088]
  0002a	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  0002e	0f 10 81 50 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33104]
  00035	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0

; 638  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ENDP ; CStateManager::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SetTransform, COMDAT
; _this$ = ecx

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 623  : 	if (m_bScene)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _Type$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _pMatrix$[ebp]
  0000e	80 be 6d 33 01
	00 00		 cmp	 BYTE PTR [esi+78701], 0
  00015	74 11		 je	 SHORT $LN2@SetTransfo

; 624  : 	{
; 625  : 		m_lpD3DDev->SetTransform(Type, pMatrix);

  00017	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	ff 92 94 00 00
	00		 call	 DWORD PTR [edx+148]
$LN2@SetTransfo:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  00028	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 632  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0002b	c1 e3 06	 shl	 ebx, 6
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  0002e	0f 10 4f 10	 movups	 xmm1, XMMWORD PTR [edi+16]
  00032	0f 10 57 20	 movups	 xmm2, XMMWORD PTR [edi+32]
  00036	0f 10 5f 30	 movups	 xmm3, XMMWORD PTR [edi+48]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 632  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0003a	5f		 pop	 edi
  0003b	0f 11 84 33 20
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33056], xmm0
  00043	0f 11 8c 33 30
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33072], xmm1
  0004b	0f 11 94 33 40
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33088], xmm2
  00053	0f 11 9c 33 50
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33104], xmm3
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 633  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z PROC ; CStateManager::RestoreTransform, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : #ifdef _DEBUG
; 609  : 	if (!m_bTransformSavingFlag[Type])
; 610  : 	{
; 611  : 		Tracef(" CStateManager::RestoreTransform - This transform was not saved [%d]\n", Type);
; 612  : 		StateManager_Assert(!" This render state was not saved!");
; 613  : 	}
; 614  : 	m_bTransformSavingFlag[Type] = FALSE;
; 615  : #endif _DEBUG
; 616  : 
; 617  : 	SetTransform(Type, &m_CopyState.m_Matrices[Type]);

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	05 94 e7 00 00	 add	 eax, 59284		; 0000e794H
  00010	03 c1		 add	 eax, ecx
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 618  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ENDP ; CStateManager::RestoreTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SaveTransform, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : #ifdef _DEBUG
; 594  : 	if (m_bTransformSavingFlag[Type])
; 595  : 	{
; 596  : 		Tracef(" CStateManager::SaveTransform - This transform is already saved [%d]\n", Type);
; 597  : 		StateManager_Assert(!" This trasform is already saved!");
; 598  : 	}
; 599  : 	m_bTransformSavingFlag[Type] = TRUE;
; 600  : #endif _DEBUG
; 601  : 
; 602  : 	m_CopyState.m_Matrices[Type] = m_CurrentState.m_Matrices[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	0f 10 84 08 20
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33056]
  00013	0f 11 84 08 94
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59284], xmm0
  0001b	0f 10 84 08 30
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33072]
  00023	0f 11 84 08 a4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59300], xmm0
  0002b	0f 10 84 08 40
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33088]
  00033	0f 11 84 08 b4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59316], xmm0
  0003b	0f 10 84 08 50
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33104]
  00043	0f 11 84 08 c4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59332], xmm0

; 603  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  0004b	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 604  : }

  0004e	5d		 pop	 ebp

; 603  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  0004f	e9 00 00 00 00	 jmp	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SaveTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetPixelShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetPixelShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetPixelShader, COMDAT
; _this$ = ecx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 	*pdwShader = m_CurrentState.m_dwPixelShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 18 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33048]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 587  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetPixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetPixelShader, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 577  : 	if (m_CurrentState.m_dwPixelShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 18 81 00
	00		 cmp	 DWORD PTR [esi+33048], edi
  00010	74 16		 je	 SHORT $LN1@SetPixelSh

; 578  : 		return;
; 579  : 
; 580  : 	m_lpD3DDev->SetPixelShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 60 01 00
	00		 call	 DWORD PTR [edx+352]

; 581  : 	m_CurrentState.m_dwPixelShader = dwShader;

  00022	89 be 18 81 00
	00		 mov	 DWORD PTR [esi+33048], edi
$LN1@SetPixelSh:

; 582  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetPixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestorePixelShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestorePixelShader, COMDAT
; _this$ = ecx

; 572  : 	SetPixelShader(m_CopyState.m_dwPixelShader);

  00000	ff b1 8c e7 00
	00		 push	 DWORD PTR [ecx+59276]
  00006	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 573  : }

  0000b	c3		 ret	 0
?RestorePixelShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestorePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SavePixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SavePixelShader, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 	m_CopyState.m_dwPixelShader = m_CurrentState.m_dwPixelShader;

  00003	8b 81 18 81 00
	00		 mov	 eax, DWORD PTR [ecx+33048]
  00009	89 81 8c e7 00
	00		 mov	 DWORD PTR [ecx+59276], eax

; 568  : }

  0000f	5d		 pop	 ebp

; 567  : 	SetPixelShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader
?SavePixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SavePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetVertexShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetVertexShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetVertexShader, COMDAT
; _this$ = ecx

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 560  : 	*pdwShader = m_CurrentState.m_dwVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 1c 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33052]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 561  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetVertexShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetVertexShader, COMDAT
; _this$ = ecx

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 551  : 	if (m_CurrentState.m_dwVertexShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 1c 81 00
	00		 cmp	 DWORD PTR [esi+33052], edi
  00010	74 16		 je	 SHORT $LN1@SetVertexS

; 552  : 		return;
; 553  : 
; 554  : 	m_lpD3DDev->SetVertexShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 30 01 00
	00		 call	 DWORD PTR [edx+304]

; 555  : 	m_CurrentState.m_dwVertexShader = dwShader;

  00022	89 be 1c 81 00
	00		 mov	 DWORD PTR [esi+33052], edi
$LN1@SetVertexS:

; 556  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVertexShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreVertexShader, COMDAT
; _this$ = ecx

; 546  : 	SetVertexShader(m_CopyState.m_dwVertexShader);

  00000	ff b1 90 e7 00
	00		 push	 DWORD PTR [ecx+59280]
  00006	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 547  : }

  0000b	c3		 ret	 0
?RestoreVertexShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SaveVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SaveVertexShader, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 540  : 	m_CopyState.m_dwVertexShader = m_CurrentState.m_dwVertexShader;

  00003	8b 81 1c 81 00
	00		 mov	 eax, DWORD PTR [ecx+33052]
  00009	89 81 90 e7 00
	00		 mov	 DWORD PTR [ecx+59280], eax

; 542  : }

  0000f	5d		 pop	 ebp

; 541  : 	SetVertexShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader
?SaveVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SaveVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetBestFiltering@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?SetBestFiltering@CStateManager@@QAEXK@Z PROC		; CStateManager::SetBestFiltering, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 111  : 	SetTextureStageState(dwStage, D3DTSS_MINFILTER,	m_dwBestMinFilter);

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwStage$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff b7 70 33 01
	00		 push	 DWORD PTR [edi+78704]
  00010	6a 11		 push	 17			; 00000011H
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 112  : 	SetTextureStageState(dwStage, D3DTSS_MAGFILTER,	m_dwBestMagFilter);

  00018	ff b7 74 33 01
	00		 push	 DWORD PTR [edi+78708]
  0001e	8b cf		 mov	 ecx, edi
  00020	6a 10		 push	 16			; 00000010H
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 113  : 	SetTextureStageState(dwStage, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);

  00028	6a 02		 push	 2
  0002a	6a 12		 push	 18			; 00000012H
  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 114  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?SetBestFiltering@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetBestFiltering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_pdwValue$ = 16						; size = 4
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z PROC ; CStateManager::GetTextureStageState, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 534  : 	*pdwValue = m_CurrentState.m_TextureStates[dwStage][Type];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _dwStage$[ebp]
  00008	c1 e1 07	 shl	 ecx, 7
  0000b	03 4d 0c	 add	 ecx, DWORD PTR _Type$[ebp]
  0000e	8b 8c 88 78 6a
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+27256]
  00015	8b 45 10	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ENDP ; CStateManager::GetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SetTextureStageState, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 525  : 	if (m_CurrentState.m_TextureStates[dwStage][Type] == dwValue)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 07	 shl	 eax, 7
  0000b	03 45 0c	 add	 eax, DWORD PTR _Type$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR _dwValue$[ebp]
  00013	39 b4 81 78 6a
	00 00		 cmp	 DWORD PTR [ecx+eax*4+27256], esi
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	74 1a		 je	 SHORT $LN1@SetTexture

; 526  : 		return;
; 527  : 
; 528  : 	m_lpD3DDev->SetTextureStageState(dwStage, Type, dwValue);

  0001f	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  00025	56		 push	 esi
  00026	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	ff 91 fc 00 00
	00		 call	 DWORD PTR [ecx+252]

; 529  : 	m_CurrentState.m_TextureStates[dwStage][Type] = dwValue;

  00033	89 b3 78 6a 00
	00		 mov	 DWORD PTR [ebx+27256], esi
$LN1@SetTexture:

; 530  : }

  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z PROC ; CStateManager::RestoreTextureStageState, COMDAT
; _this$ = ecx

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  : #ifdef _DEBUG
; 513  : 	if (!m_bTextureStageStateSavingFlag[dwStage][Type])
; 514  : 	{
; 515  : 		Tracef(" CStateManager::RestoreTextureStageState - This texture stage state was not saved [%d, %d]\n", dwStage, Type);
; 516  : 		StateManager_Assert(!" This texture stage state was not saved!");
; 517  : 	}
; 518  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = FALSE;
; 519  : #endif _DEBUG
; 520  : 	SetTextureStageState(dwStage, Type, m_CopyState.m_TextureStates[dwStage][Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00009	c1 e0 07	 shl	 eax, 7
  0000c	03 c2		 add	 eax, edx
  0000e	ff b4 81 ec d0
	00 00		 push	 DWORD PTR [ecx+eax*4+53484]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00019	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 521  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ENDP ; CStateManager::RestoreTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SaveTextureStageState, COMDAT
; _this$ = ecx

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 497  : 	// Check that we have set this up before, if not, the default is this.
; 498  : #ifdef _DEBUG
; 499  : 	if (m_bTextureStageStateSavingFlag[dwStage][Type])
; 500  : 	{
; 501  : 		Tracef(" CStateManager::SaveTextureStageState - This texture stage state is already saved [%d, %d]\n", dwStage, Type);
; 502  : 		StateManager_Assert(!" This texture stage state is already saved!");
; 503  : 	}
; 504  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = TRUE;
; 505  : #endif _DEBUG
; 506  : 	m_CopyState.m_TextureStates[dwStage][Type] = m_CurrentState.m_TextureStates[dwStage][Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi

; 507  : 	SetTextureStageState(dwStage, Type, dwValue);

  00007	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _Type$[ebp]
  0000d	c1 e2 07	 shl	 edx, 7
  00010	03 d6		 add	 edx, esi
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00016	8b 84 91 78 6a
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+27256]
  0001d	89 84 91 ec d0
	00 00		 mov	 DWORD PTR [ecx+edx*4+53484], eax
  00024	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00029	5e		 pop	 esi

; 508  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SaveTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_ppTexture$ = 12					; size = 4
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::GetTexture, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 	*ppTexture = m_CurrentState.m_Textures[dwStage];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 8c 81 f8 80
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+33016]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ppTexture$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 492  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SetTexture, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 482  : 	if (pTexture == m_CurrentState.m_Textures[dwStage])

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _pTexture$[ebp]
  0000a	3b b4 91 f8 80
	00 00		 cmp	 esi, DWORD PTR [ecx+edx*4+33016]
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetTexture

; 483  : 		return;
; 484  : 
; 485  : 	m_lpD3DDev->SetTexture(dwStage, pTexture);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 f4 00 00
	00		 call	 DWORD PTR [ecx+244]

; 486  : 	m_CurrentState.m_Textures[dwStage] = pTexture;

  00028	89 b7 f8 80 00
	00		 mov	 DWORD PTR [edi+33016], esi
$LN1@SetTexture:

; 487  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTexture@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?RestoreTexture@CStateManager@@QAEXK@Z PROC		; CStateManager::RestoreTexture, COMDAT
; _this$ = ecx

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	SetTexture(dwStage, m_CopyState.m_Textures[dwStage]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	ff b4 81 6c e7
	00 00		 push	 DWORD PTR [ecx+eax*4+59244]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 478  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreTexture@CStateManager@@QAEXK@Z ENDP		; CStateManager::RestoreTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SaveTexture, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	// Check that we have set this up before, if not, the default is this.
; 471  : 	m_CopyState.m_Textures[dwStage] = m_CurrentState.m_Textures[dwStage];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b 84 91 f8 80
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+33016]
  0000d	89 84 91 6c e7
	00 00		 mov	 DWORD PTR [ecx+edx*4+59244], eax

; 472  : 	SetTexture(dwStage, pTexture);

  00014	89 55 08	 mov	 DWORD PTR _dwStage$[ebp], edx

; 473  : }

  00017	5d		 pop	 ebp

; 472  : 	SetTexture(dwStage, pTexture);

  00018	e9 00 00 00 00	 jmp	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SaveTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pdwValue$ = 12						; size = 4
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  : 	*pdwValue = m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 8c 81 78 66
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+26232]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 465  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_Value$ = 12						; size = 4
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SetRenderState, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  : 	if (m_CurrentState.m_RenderStates[Type] == Value)

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _Value$[ebp]
  0000a	39 b4 91 78 66
	00 00		 cmp	 DWORD PTR [ecx+edx*4+26232], esi
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetRenderS

; 456  : 		return;
; 457  : 
; 458  : 	m_lpD3DDev->SetRenderState(Type, Value);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 c8 00 00
	00		 call	 DWORD PTR [ecx+200]

; 459  : 	m_CurrentState.m_RenderStates[Type] = Value;

  00028	89 b7 78 66 00
	00		 mov	 DWORD PTR [edi+26232], esi
$LN1@SetRenderS:

; 460  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::RestoreRenderState, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  : #ifdef _DEBUG
; 442  : 	if (!m_bRenderStateSavingFlag[Type])
; 443  : 	{
; 444  : 		Tracef(" CStateManager::SaveRenderState - This render state was not saved [%d, %d]\n", Type);
; 445  : 		StateManager_Assert(!" This render state was not saved!");
; 446  : 	}
; 447  : 	m_bRenderStateSavingFlag[Type] = FALSE;
; 448  : #endif _DEBUG
; 449  : 
; 450  : 	SetRenderState(Type, m_CopyState.m_RenderStates[Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	ff b4 81 ec cc
	00 00		 push	 DWORD PTR [ecx+eax*4+52460]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 451  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::RestoreRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_dwValue$ = 12						; size = 4
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SaveRenderState, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  : #ifdef _DEBUG
; 426  : 	if (m_bRenderStateSavingFlag[Type])
; 427  : 	{
; 428  : 		Tracef(" CStateManager::SaveRenderState - This render state is already saved [%d, %d]\n", Type, dwValue);
; 429  : 		StateManager_Assert(!" This render state is already saved!");
; 430  : 	}
; 431  : 	m_bRenderStateSavingFlag[Type] = TRUE;
; 432  : #endif _DEBUG
; 433  : 
; 434  : 	// Check that we have set this up before, if not, the default is this.
; 435  : 	m_CopyState.m_RenderStates[Type] = m_CurrentState.m_RenderStates[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b 84 91 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+26232]
  0000d	89 84 91 ec cc
	00 00		 mov	 DWORD PTR [ecx+edx*4+52460], eax

; 436  : 	SetRenderState(Type, dwValue);

  00014	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 437  : }

  00017	5d		 pop	 ebp

; 436  : 	SetRenderState(Type, dwValue);

  00018	e9 00 00 00 00	 jmp	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SaveRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z PROC	; CStateManager::GetLight, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	assert(index<8);
; 29   : 	*pLight=m_kLightData.m_akD3DLight[index];

  00004	6b 75 08 68	 imul	 esi, DWORD PTR _index$[ebp], 104
  00008	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pLight$[ebp]
  00011	81 c6 00 00 00
	00		 add	 esi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00017	f3 a5		 rep movsd
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi

; 30   : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z ENDP	; CStateManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z PROC	; CStateManager::SetLight, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	assert(index<SLightData::LIGHT_NUM);
; 21   : 	m_kLightData.m_akD3DLight[index]=*pLight;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _pLight$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _index$[ebp]
  0000c	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	6b fb 68	 imul	 edi, ebx, 104
  00016	8b f2		 mov	 esi, edx

; 22   : 
; 23   : 	m_lpD3DDev->SetLight(index, pLight);

  00018	52		 push	 edx
  00019	53		 push	 ebx
  0001a	81 c7 00 00 00
	00		 add	 edi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00020	f3 a5		 rep movsd
  00022	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  00028	50		 push	 eax
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 24   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z ENDP	; CStateManager::SetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z PROC ; CStateManager::GetMaterial, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  : 	// Set the renderstate and remember it.
; 414  : 	*pMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  0000a	8b 55 08	 mov	 edx, DWORD PTR _pMaterial$[ebp]
  0000d	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00010	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  00017	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  0001b	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  00022	0f 11 42 20	 movups	 XMMWORD PTR [edx+32], xmm0
  00026	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  0002d	0f 11 42 30	 movups	 XMMWORD PTR [edx+48], xmm0
  00031	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  00037	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 415  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ENDP ; CStateManager::GetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SetMaterial, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 407  : 	m_lpD3DDev->SetMaterial(pMaterial);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	56		 push	 esi
  0000b	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00011	50		 push	 eax
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]

; 408  : 	m_CurrentState.m_D3DMaterial = *pMaterial;

  0001a	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0001d	0f 11 87 20 cc
	00 00		 movups	 XMMWORD PTR [edi+52256], xmm0
  00024	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00028	0f 11 87 30 cc
	00 00		 movups	 XMMWORD PTR [edi+52272], xmm0
  0002f	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00033	0f 11 87 40 cc
	00 00		 movups	 XMMWORD PTR [edi+52288], xmm0
  0003a	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  0003e	0f 11 87 50 cc
	00 00		 movups	 XMMWORD PTR [edi+52304], xmm0
  00045	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00048	89 87 60 cc 00
	00		 mov	 DWORD PTR [edi+52320], eax
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 409  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreMaterial, COMDAT
; _this$ = ecx

; 402  : 	SetMaterial(&m_CopyState.m_D3DMaterial);

  00000	8d 81 94 32 01
	00		 lea	 eax, DWORD PTR [ecx+78484]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 403  : }

  0000c	c3		 ret	 0
?RestoreMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  : 	// Check that we have set this up before, if not, the default is this.
; 396  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  0000a	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  00010	0f 11 81 94 32
	01 00		 movups	 XMMWORD PTR [ecx+78484], xmm0
  00017	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  0001e	0f 11 81 a4 32
	01 00		 movups	 XMMWORD PTR [ecx+78500], xmm0
  00025	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  0002c	0f 11 81 b4 32
	01 00		 movups	 XMMWORD PTR [ecx+78516], xmm0
  00033	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  0003a	0f 11 81 c4 32
	01 00		 movups	 XMMWORD PTR [ecx+78532], xmm0
  00041	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 398  : }

  00047	5d		 pop	 ebp

; 397  : 	SetMaterial(pMaterial);

  00048	e9 00 00 00 00	 jmp	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?SaveMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 390  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00000	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  00007	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  0000d	0f 11 81 94 32
	01 00		 movups	 XMMWORD PTR [ecx+78484], xmm0
  00014	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  0001b	0f 11 81 a4 32
	01 00		 movups	 XMMWORD PTR [ecx+78500], xmm0
  00022	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  00029	0f 11 81 b4 32
	01 00		 movups	 XMMWORD PTR [ecx+78516], xmm0
  00030	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  00037	0f 11 81 c4 32
	01 00		 movups	 XMMWORD PTR [ecx+78532], xmm0
  0003e	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 391  : }

  00044	c3		 ret	 0
?SaveMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?EndScene@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?EndScene@CStateManager@@QAEXXZ PROC			; CStateManager::EndScene, COMDAT
; _this$ = ecx

; 52   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 53   : 	m_lpD3DDev->EndScene();

  00003	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00009	50		 push	 eax
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]

; 54   : 	m_bScene=false;

  00012	c6 86 6d 33 01
	00 00		 mov	 BYTE PTR [esi+78701], 0
  00019	5e		 pop	 esi

; 55   : }

  0001a	c3		 ret	 0
?EndScene@CStateManager@@QAEXXZ ENDP			; CStateManager::EndScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?BeginScene@CStateManager@@QAE_NXZ
_TEXT	SEGMENT
_m4View$ = -196						; size = 64
_m4Proj$ = -132						; size = 64
_m4World$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BeginScene@CStateManager@@QAE_NXZ PROC			; CStateManager::BeginScene, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 34   : 	m_bScene=true;
; 35   : 
; 36   : 	D3DXMATRIX m4Proj;
; 37   : 	D3DXMATRIX m4View;
; 38   : 	D3DXMATRIX m4World;
; 39   : 	GetTransform(D3DTS_WORLD, &m4World);

  00016	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  00019	50		 push	 eax
  0001a	68 00 01 00 00	 push	 256			; 00000100H
  0001f	c6 86 6d 33 01
	00 01		 mov	 BYTE PTR [esi+78701], 1
  00026	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 40   : 	GetTransform(D3DTS_PROJECTION, &m4Proj);

  0002b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	6a 03		 push	 3
  00036	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 41   : 	GetTransform(D3DTS_VIEW, &m4View);

  0003b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 42   : 	SetTransform(D3DTS_WORLD, &m4World);

  0004b	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  0004e	8b ce		 mov	 ecx, esi
  00050	50		 push	 eax
  00051	68 00 01 00 00	 push	 256			; 00000100H
  00056	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 43   : 	SetTransform(D3DTS_PROJECTION, &m4Proj);

  0005b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00061	8b ce		 mov	 ecx, esi
  00063	50		 push	 eax
  00064	6a 03		 push	 3
  00066	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 44   : 	SetTransform(D3DTS_VIEW, &m4View);

  0006b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00071	8b ce		 mov	 ecx, esi
  00073	50		 push	 eax
  00074	6a 02		 push	 2
  00076	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 45   : 
; 46   : 	if (FAILED(m_lpD3DDev->BeginScene()))

  0007b	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00081	50		 push	 eax
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	ff 91 88 00 00
	00		 call	 DWORD PTR [ecx+136]

; 47   : 		return false;
; 48   : 	return true;
; 49   : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	5e		 pop	 esi
  00090	0f 99 c0	 setns	 al
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?BeginScene@CStateManager@@QAE_NXZ ENDP			; CStateManager::BeginScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?Restore@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Restore@CStateManager@@QAEXXZ PROC			; CStateManager::Restore, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi

; 118  : 	int i, j;
; 119  : 
; 120  : 	m_bForce = true;

  0000c	33 ff		 xor	 edi, edi
  0000e	c6 86 6c 33 01
	00 01		 mov	 BYTE PTR [esi+78700], 1
  00015	8d 9e 78 66 00
	00		 lea	 ebx, DWORD PTR [esi+26232]
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Restore:

; 121  : 
; 122  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; ++i)
; 123  : 		SetRenderState(D3DRENDERSTATETYPE(i), m_CurrentState.m_RenderStates[i]);

  00020	ff 33		 push	 DWORD PTR [ebx]
  00022	8b ce		 mov	 ecx, esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  0002a	47		 inc	 edi
  0002b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0002e	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00034	72 ea		 jb	 SHORT $LL4@Restore

; 124  : 
; 125  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00036	8b c6		 mov	 eax, esi
  00038	33 db		 xor	 ebx, ebx
  0003a	8d b8 78 6a 00
	00		 lea	 edi, DWORD PTR [eax+27256]
$LL7@Restore:

; 126  : 		for (j = 0; j < STATEMANAGER_MAX_TEXTURESTATES; ++j)

  00040	33 f6		 xor	 esi, esi
$LL10@Restore:

; 127  : 			SetTextureStageState(i, D3DTEXTURESTAGESTATETYPE(j), m_CurrentState.m_TextureStates[i][j]);

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	8b c8		 mov	 ecx, eax
  00046	56		 push	 esi
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00050	46		 inc	 esi
  00051	83 c7 04	 add	 edi, 4
  00054	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  0005a	72 e6		 jb	 SHORT $LL10@Restore

; 124  : 
; 125  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0005c	43		 inc	 ebx
  0005d	83 fb 08	 cmp	 ebx, 8
  00060	72 de		 jb	 SHORT $LL7@Restore

; 128  : 
; 129  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00062	8b f0		 mov	 esi, eax
  00064	33 ff		 xor	 edi, edi
  00066	8d 9e f8 80 00
	00		 lea	 ebx, DWORD PTR [esi+33016]
  0006c	0f 1f 40 00	 npad	 4
$LL13@Restore:

; 130  : 		SetTexture(i, m_CurrentState.m_Textures[i]);

  00070	ff 33		 push	 DWORD PTR [ebx]
  00072	8b ce		 mov	 ecx, esi
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  0007a	47		 inc	 edi
  0007b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0007e	83 ff 08	 cmp	 edi, 8
  00081	72 ed		 jb	 SHORT $LL13@Restore

; 131  : 
; 132  : 	m_bForce = false;

  00083	5f		 pop	 edi
  00084	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 133  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?Restore@CStateManager@@QAEXXZ ENDP			; CStateManager::Restore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ?SetDefaultState@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_DefaultMat$ = -1672					; size = 68
_Identity$ = -1604					; size = 64
_av4Null$ = -1540					; size = 1536
__$ArrayPad$ = -4					; size = 4
?SetDefaultState@CStateManager@@QAEXXZ PROC		; CStateManager::SetDefaultState, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 137  : 	m_CurrentState.ResetState();

  00016	8d 8e 78 66 00
	00		 lea	 ecx, DWORD PTR [esi+26232]
  0001c	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 138  : 	m_CopyState.ResetState();

  00021	8d 8e ec cc 00
	00		 lea	 ecx, DWORD PTR [esi+52460]
  00027	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 139  : 	m_ChipState.ResetState();

  0002c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002f	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 147  : 	SetTransform(D3DTS_WORLD, &Identity);

  00034	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  0003a	66 c7 86 6c 33
	01 00 01 00	 mov	 WORD PTR [esi+78700], 1
  00043	50		 push	 eax
  00044	68 00 01 00 00	 push	 256			; 00000100H
  00049	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0004b	c7 85 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+56], 0
  00055	c7 85 f0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+52], 0
  0005f	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+48], 0
  00069	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+44], 0
  00073	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+36], 0
  0007d	c7 85 dc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+32], 0
  00087	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+28], 0
  00091	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+24], 0
  0009b	c7 85 cc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+16], 0
  000a5	c7 85 c8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+12], 0
  000af	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+8], 0
  000b9	c7 85 c0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000c3	c7 85 f8 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+60], 1065353216 ; 3f800000H
  000cd	c7 85 e4 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+40], 1065353216 ; 3f800000H
  000d7	c7 85 d0 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+20], 1065353216 ; 3f800000H
  000e1	c7 85 bc f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 147  : 	SetTransform(D3DTS_WORLD, &Identity);

  000eb	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 148  : 	SetTransform(D3DTS_VIEW, &Identity);

  000f0	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  000f6	8b ce		 mov	 ecx, esi
  000f8	50		 push	 eax
  000f9	6a 02		 push	 2
  000fb	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 149  : 	SetTransform(D3DTS_PROJECTION, &Identity);

  00100	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  00106	8b ce		 mov	 ecx, esi
  00108	50		 push	 eax
  00109	6a 03		 push	 3
  0010b	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 150  : 
; 151  : 	D3DMATERIAL8 DefaultMat;
; 152  : 	ZeroMemory(&DefaultMat, sizeof(D3DMATERIAL8));
; 153  : 
; 154  : 	DefaultMat.Diffuse.r = 1.0f;

  00110	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000

; 155  : 	DefaultMat.Diffuse.g = 1.0f;
; 156  : 	DefaultMat.Diffuse.b = 1.0f;
; 157  : 	DefaultMat.Diffuse.a = 1.0f;
; 158  : 	DefaultMat.Ambient.r = 1.0f;
; 159  : 	DefaultMat.Ambient.g = 1.0f;
; 160  : 	DefaultMat.Ambient.b = 1.0f;
; 161  : 	DefaultMat.Ambient.a = 1.0f;
; 162  : 	DefaultMat.Emissive.r = 0.0f;
; 163  : 	DefaultMat.Emissive.g = 0.0f;
; 164  : 	DefaultMat.Emissive.b = 0.0f;
; 165  : 	DefaultMat.Emissive.a = 0.0f;
; 166  : 	DefaultMat.Specular.r = 0.0f;
; 167  : 	DefaultMat.Specular.g = 0.0f;
; 168  : 	DefaultMat.Specular.b = 0.0f;
; 169  : 	DefaultMat.Specular.a = 0.0f;
; 170  : 	DefaultMat.Power = 0.0f;
; 171  : 
; 172  : 	SetMaterial(&DefaultMat);

  00117	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _DefaultMat$[ebp]
  0011d	0f 11 85 78 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp], xmm0
  00124	8b ce		 mov	 ecx, esi
  00126	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _DefaultMat$[ebp+64], 0
  00130	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00137	0f 11 85 88 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+16], xmm0
  0013e	50		 push	 eax
  0013f	0f 57 c0	 xorps	 xmm0, xmm0
  00142	0f 11 85 a8 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+48], xmm0
  00149	0f 11 85 98 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+32], xmm0
  00150	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 173  : 
; 174  : 	SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE, D3DMCS_MATERIAL);

  00155	6a 00		 push	 0
  00157	68 91 00 00 00	 push	 145			; 00000091H
  0015c	8b ce		 mov	 ecx, esi
  0015e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 175  : 	SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL);

  00163	6a 00		 push	 0
  00165	68 92 00 00 00	 push	 146			; 00000092H
  0016a	8b ce		 mov	 ecx, esi
  0016c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 176  : 	SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);

  00171	6a 00		 push	 0
  00173	68 93 00 00 00	 push	 147			; 00000093H
  00178	8b ce		 mov	 ecx, esi
  0017a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 177  : 	SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL);

  0017f	6a 00		 push	 0
  00181	68 94 00 00 00	 push	 148			; 00000094H
  00186	8b ce		 mov	 ecx, esi
  00188	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 178  : 
; 179  : 	SetRenderState(D3DRS_LINEPATTERN, 0xFFFFFFFF);

  0018d	6a ff		 push	 -1
  0018f	6a 0a		 push	 10			; 0000000aH
  00191	8b ce		 mov	 ecx, esi
  00193	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 180  : 	SetRenderState(D3DRS_LASTPIXEL, FALSE);

  00198	6a 00		 push	 0
  0019a	6a 10		 push	 16			; 00000010H
  0019c	8b ce		 mov	 ecx, esi
  0019e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 181  : 	SetRenderState(D3DRS_ALPHAREF, 1);

  001a3	6a 01		 push	 1
  001a5	6a 18		 push	 24			; 00000018H
  001a7	8b ce		 mov	 ecx, esi
  001a9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 182  : 	SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATEREQUAL);

  001ae	6a 07		 push	 7
  001b0	6a 19		 push	 25			; 00000019H
  001b2	8b ce		 mov	 ecx, esi
  001b4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 183  : 	SetRenderState(D3DRS_ZVISIBLE, FALSE);

  001b9	6a 00		 push	 0
  001bb	6a 1e		 push	 30			; 0000001eH
  001bd	8b ce		 mov	 ecx, esi
  001bf	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 184  : 	SetRenderState(D3DRS_FOGSTART, 0);

  001c4	6a 00		 push	 0
  001c6	6a 24		 push	 36			; 00000024H
  001c8	8b ce		 mov	 ecx, esi
  001ca	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 185  : 	SetRenderState(D3DRS_FOGEND, 0);

  001cf	6a 00		 push	 0
  001d1	6a 25		 push	 37			; 00000025H
  001d3	8b ce		 mov	 ecx, esi
  001d5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 186  : 	SetRenderState(D3DRS_FOGDENSITY, 0);

  001da	6a 00		 push	 0
  001dc	6a 26		 push	 38			; 00000026H
  001de	8b ce		 mov	 ecx, esi
  001e0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 187  : 	SetRenderState(D3DRS_EDGEANTIALIAS, FALSE);

  001e5	6a 00		 push	 0
  001e7	6a 28		 push	 40			; 00000028H
  001e9	8b ce		 mov	 ecx, esi
  001eb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 188  : 	SetRenderState(D3DRS_ZBIAS, 0);

  001f0	6a 00		 push	 0
  001f2	6a 2f		 push	 47			; 0000002fH
  001f4	8b ce		 mov	 ecx, esi
  001f6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 189  : 	SetRenderState(D3DRS_STENCILWRITEMASK, 0xFFFFFFFF);

  001fb	6a ff		 push	 -1
  001fd	6a 3b		 push	 59			; 0000003bH
  001ff	8b ce		 mov	 ecx, esi
  00201	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 190  : 	SetRenderState(D3DRS_AMBIENT, 0x00000000);

  00206	6a 00		 push	 0
  00208	68 8b 00 00 00	 push	 139			; 0000008bH
  0020d	8b ce		 mov	 ecx, esi
  0020f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 191  : 	SetRenderState(D3DRS_LOCALVIEWER, FALSE);

  00214	6a 00		 push	 0
  00216	68 8e 00 00 00	 push	 142			; 0000008eH
  0021b	8b ce		 mov	 ecx, esi
  0021d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 192  : 	SetRenderState(D3DRS_NORMALIZENORMALS, FALSE);

  00222	6a 00		 push	 0
  00224	68 8f 00 00 00	 push	 143			; 0000008fH
  00229	8b ce		 mov	 ecx, esi
  0022b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 193  : 	SetRenderState(D3DRS_VERTEXBLEND, D3DVBF_DISABLE);

  00230	6a 00		 push	 0
  00232	68 97 00 00 00	 push	 151			; 00000097H
  00237	8b ce		 mov	 ecx, esi
  00239	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 194  : 	SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

  0023e	6a 00		 push	 0
  00240	68 98 00 00 00	 push	 152			; 00000098H
  00245	8b ce		 mov	 ecx, esi
  00247	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 195  : 	SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING, FALSE);

  0024c	6a 00		 push	 0
  0024e	68 99 00 00 00	 push	 153			; 00000099H
  00253	8b ce		 mov	 ecx, esi
  00255	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 196  : 	SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, FALSE);

  0025a	6a 00		 push	 0
  0025c	68 a1 00 00 00	 push	 161			; 000000a1H
  00261	8b ce		 mov	 ecx, esi
  00263	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 197  : 	SetRenderState(D3DRS_MULTISAMPLEMASK, 0xFFFFFFFF);

  00268	6a ff		 push	 -1
  0026a	68 a2 00 00 00	 push	 162			; 000000a2H
  0026f	8b ce		 mov	 ecx, esi
  00271	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 198  : 	SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

  00276	6a 00		 push	 0
  00278	68 a7 00 00 00	 push	 167			; 000000a7H
  0027d	8b ce		 mov	 ecx, esi
  0027f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 199  : 	SetRenderState(D3DRS_COLORWRITEENABLE, 0xFFFFFFFF);

  00284	6a ff		 push	 -1
  00286	68 a8 00 00 00	 push	 168			; 000000a8H
  0028b	8b ce		 mov	 ecx, esi
  0028d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 200  : 	SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  00292	6a 03		 push	 3
  00294	6a 08		 push	 8
  00296	8b ce		 mov	 ecx, esi
  00298	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 201  : 	SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

  0029d	6a 02		 push	 2
  0029f	6a 09		 push	 9
  002a1	8b ce		 mov	 ecx, esi
  002a3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 202  : 	SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  002a8	6a 02		 push	 2
  002aa	6a 16		 push	 22			; 00000016H
  002ac	8b ce		 mov	 ecx, esi
  002ae	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 203  : 	SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  002b3	6a 00		 push	 0
  002b5	6a 1b		 push	 27			; 0000001bH
  002b7	8b ce		 mov	 ecx, esi
  002b9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 204  : 	SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);

  002be	6a 01		 push	 1
  002c0	68 ab 00 00 00	 push	 171			; 000000abH
  002c5	8b ce		 mov	 ecx, esi
  002c7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 205  : 	SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  002cc	6a 05		 push	 5
  002ce	6a 13		 push	 19			; 00000013H
  002d0	8b ce		 mov	 ecx, esi
  002d2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 206  : 	SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  002d7	6a 06		 push	 6
  002d9	6a 14		 push	 20			; 00000014H
  002db	8b ce		 mov	 ecx, esi
  002dd	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 207  : 	SetRenderState(D3DRS_FOGENABLE, FALSE);

  002e2	6a 00		 push	 0
  002e4	6a 1c		 push	 28			; 0000001cH
  002e6	8b ce		 mov	 ecx, esi
  002e8	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 208  : 	SetRenderState(D3DRS_FOGCOLOR, 0xFF000000);

  002ed	68 00 00 00 ff	 push	 -16777216		; ff000000H
  002f2	6a 22		 push	 34			; 00000022H
  002f4	8b ce		 mov	 ecx, esi
  002f6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 209  : 	SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_NONE);

  002fb	6a 00		 push	 0
  002fd	6a 23		 push	 35			; 00000023H
  002ff	8b ce		 mov	 ecx, esi
  00301	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 210  : 	SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);

  00306	6a 03		 push	 3
  00308	68 8c 00 00 00	 push	 140			; 0000008cH
  0030d	8b ce		 mov	 ecx, esi
  0030f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 211  : 	SetRenderState(D3DRS_RANGEFOGENABLE, FALSE);

  00314	6a 00		 push	 0
  00316	6a 30		 push	 48			; 00000030H
  00318	8b ce		 mov	 ecx, esi
  0031a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 212  : 	SetRenderState(D3DRS_ZENABLE, TRUE);

  0031f	6a 01		 push	 1
  00321	6a 07		 push	 7
  00323	8b ce		 mov	 ecx, esi
  00325	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 213  : 	SetRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);

  0032a	6a 04		 push	 4
  0032c	6a 17		 push	 23			; 00000017H
  0032e	8b ce		 mov	 ecx, esi
  00330	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 214  : 	SetRenderState(D3DRS_ZWRITEENABLE, TRUE);

  00335	6a 01		 push	 1
  00337	6a 0e		 push	 14			; 0000000eH
  00339	8b ce		 mov	 ecx, esi
  0033b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 215  : 	SetRenderState(D3DRS_DITHERENABLE, TRUE);

  00340	6a 01		 push	 1
  00342	6a 1a		 push	 26			; 0000001aH
  00344	8b ce		 mov	 ecx, esi
  00346	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 216  : 	SetRenderState(D3DRS_STENCILENABLE, FALSE);

  0034b	6a 00		 push	 0
  0034d	6a 34		 push	 52			; 00000034H
  0034f	8b ce		 mov	 ecx, esi
  00351	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 217  : 	SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);

  00356	6a 00		 push	 0
  00358	6a 0f		 push	 15			; 0000000fH
  0035a	8b ce		 mov	 ecx, esi
  0035c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 218  : 	SetRenderState(D3DRS_CLIPPING, TRUE);

  00361	6a 01		 push	 1
  00363	68 88 00 00 00	 push	 136			; 00000088H
  00368	8b ce		 mov	 ecx, esi
  0036a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 219  : 	SetRenderState(D3DRS_LIGHTING, FALSE);

  0036f	6a 00		 push	 0
  00371	68 89 00 00 00	 push	 137			; 00000089H
  00376	8b ce		 mov	 ecx, esi
  00378	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 220  : 	SetRenderState(D3DRS_SPECULARENABLE, FALSE);

  0037d	6a 00		 push	 0
  0037f	6a 1d		 push	 29			; 0000001dH
  00381	8b ce		 mov	 ecx, esi
  00383	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 221  : 	SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00388	6a 00		 push	 0
  0038a	68 8d 00 00 00	 push	 141			; 0000008dH
  0038f	8b ce		 mov	 ecx, esi
  00391	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	SetRenderState(D3DRS_WRAP0, 0);

  00396	6a 00		 push	 0
  00398	68 80 00 00 00	 push	 128			; 00000080H
  0039d	8b ce		 mov	 ecx, esi
  0039f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	SetRenderState(D3DRS_WRAP1, 0);

  003a4	6a 00		 push	 0
  003a6	68 81 00 00 00	 push	 129			; 00000081H
  003ab	8b ce		 mov	 ecx, esi
  003ad	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 224  : 	SetRenderState(D3DRS_WRAP2, 0);

  003b2	6a 00		 push	 0
  003b4	68 82 00 00 00	 push	 130			; 00000082H
  003b9	8b ce		 mov	 ecx, esi
  003bb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 225  : 	SetRenderState(D3DRS_WRAP3, 0);

  003c0	6a 00		 push	 0
  003c2	68 83 00 00 00	 push	 131			; 00000083H
  003c7	8b ce		 mov	 ecx, esi
  003c9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 226  : 	SetRenderState(D3DRS_WRAP4, 0);

  003ce	6a 00		 push	 0
  003d0	68 84 00 00 00	 push	 132			; 00000084H
  003d5	8b ce		 mov	 ecx, esi
  003d7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 227  : 	SetRenderState(D3DRS_WRAP5, 0);

  003dc	6a 00		 push	 0
  003de	68 85 00 00 00	 push	 133			; 00000085H
  003e3	8b ce		 mov	 ecx, esi
  003e5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 228  : 	SetRenderState(D3DRS_WRAP6, 0);

  003ea	6a 00		 push	 0
  003ec	68 86 00 00 00	 push	 134			; 00000086H
  003f1	8b ce		 mov	 ecx, esi
  003f3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 229  : 	SetRenderState(D3DRS_WRAP7, 0);

  003f8	6a 00		 push	 0
  003fa	68 87 00 00 00	 push	 135			; 00000087H
  003ff	8b ce		 mov	 ecx, esi
  00401	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 230  : 
; 231  : 	SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00406	6a 04		 push	 4
  00408	6a 01		 push	 1
  0040a	6a 00		 push	 0
  0040c	8b ce		 mov	 ecx, esi
  0040e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 232  : 	SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00413	6a 02		 push	 2
  00415	6a 02		 push	 2
  00417	6a 00		 push	 0
  00419	8b ce		 mov	 ecx, esi
  0041b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 233  : 	SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00420	6a 01		 push	 1
  00422	6a 03		 push	 3
  00424	6a 00		 push	 0
  00426	8b ce		 mov	 ecx, esi
  00428	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 234  : 	SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0042d	6a 02		 push	 2
  0042f	6a 05		 push	 5
  00431	6a 00		 push	 0
  00433	8b ce		 mov	 ecx, esi
  00435	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 235  : 	SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  0043a	6a 01		 push	 1
  0043c	6a 06		 push	 6
  0043e	6a 00		 push	 0
  00440	8b ce		 mov	 ecx, esi
  00442	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 236  : 	SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  00447	6a 02		 push	 2
  00449	6a 04		 push	 4
  0044b	6a 00		 push	 0
  0044d	8b ce		 mov	 ecx, esi
  0044f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 237  : 
; 238  : 	SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00454	6a 01		 push	 1
  00456	6a 01		 push	 1
  00458	6a 01		 push	 1
  0045a	8b ce		 mov	 ecx, esi
  0045c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 239  : 	SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00461	6a 02		 push	 2
  00463	6a 02		 push	 2
  00465	6a 01		 push	 1
  00467	8b ce		 mov	 ecx, esi
  00469	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 240  : 	SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0046e	6a 00		 push	 0
  00470	6a 03		 push	 3
  00472	6a 01		 push	 1
  00474	8b ce		 mov	 ecx, esi
  00476	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 241  : 	SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0047b	6a 01		 push	 1
  0047d	6a 04		 push	 4
  0047f	6a 01		 push	 1
  00481	8b ce		 mov	 ecx, esi
  00483	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 242  : 	SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00488	6a 02		 push	 2
  0048a	6a 05		 push	 5
  0048c	6a 01		 push	 1
  0048e	8b ce		 mov	 ecx, esi
  00490	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 243  : 	SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00495	6a 00		 push	 0
  00497	6a 06		 push	 6
  00499	6a 01		 push	 1
  0049b	8b ce		 mov	 ecx, esi
  0049d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 244  : 
; 245  : 	SetTextureStageState(2, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004a2	6a 01		 push	 1
  004a4	6a 01		 push	 1
  004a6	6a 02		 push	 2
  004a8	8b ce		 mov	 ecx, esi
  004aa	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 246  : 	SetTextureStageState(2, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004af	6a 02		 push	 2
  004b1	6a 02		 push	 2
  004b3	6a 02		 push	 2
  004b5	8b ce		 mov	 ecx, esi
  004b7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 247  : 	SetTextureStageState(2, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  004bc	6a 00		 push	 0
  004be	6a 03		 push	 3
  004c0	6a 02		 push	 2
  004c2	8b ce		 mov	 ecx, esi
  004c4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 248  : 	SetTextureStageState(2, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  004c9	6a 01		 push	 1
  004cb	6a 04		 push	 4
  004cd	6a 02		 push	 2
  004cf	8b ce		 mov	 ecx, esi
  004d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 249  : 	SetTextureStageState(2, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  004d6	6a 02		 push	 2
  004d8	6a 05		 push	 5
  004da	6a 02		 push	 2
  004dc	8b ce		 mov	 ecx, esi
  004de	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 250  : 	SetTextureStageState(2, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  004e3	6a 00		 push	 0
  004e5	6a 06		 push	 6
  004e7	6a 02		 push	 2
  004e9	8b ce		 mov	 ecx, esi
  004eb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 251  : 
; 252  : 	SetTextureStageState(3, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004f0	6a 01		 push	 1
  004f2	6a 01		 push	 1
  004f4	6a 03		 push	 3
  004f6	8b ce		 mov	 ecx, esi
  004f8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 253  : 	SetTextureStageState(3, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004fd	6a 02		 push	 2
  004ff	6a 02		 push	 2
  00501	6a 03		 push	 3
  00503	8b ce		 mov	 ecx, esi
  00505	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 254  : 	SetTextureStageState(3, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0050a	6a 00		 push	 0
  0050c	6a 03		 push	 3
  0050e	6a 03		 push	 3
  00510	8b ce		 mov	 ecx, esi
  00512	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	SetTextureStageState(3, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00517	6a 01		 push	 1
  00519	6a 04		 push	 4
  0051b	6a 03		 push	 3
  0051d	8b ce		 mov	 ecx, esi
  0051f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 	SetTextureStageState(3, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00524	6a 02		 push	 2
  00526	6a 05		 push	 5
  00528	6a 03		 push	 3
  0052a	8b ce		 mov	 ecx, esi
  0052c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 257  : 	SetTextureStageState(3, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00531	6a 00		 push	 0
  00533	6a 06		 push	 6
  00535	6a 03		 push	 3
  00537	8b ce		 mov	 ecx, esi
  00539	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 
; 259  : 	SetTextureStageState(4, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0053e	6a 01		 push	 1
  00540	6a 01		 push	 1
  00542	6a 04		 push	 4
  00544	8b ce		 mov	 ecx, esi
  00546	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 260  : 	SetTextureStageState(4, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0054b	6a 02		 push	 2
  0054d	6a 02		 push	 2
  0054f	6a 04		 push	 4
  00551	8b ce		 mov	 ecx, esi
  00553	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 261  : 	SetTextureStageState(4, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00558	6a 00		 push	 0
  0055a	6a 03		 push	 3
  0055c	6a 04		 push	 4
  0055e	8b ce		 mov	 ecx, esi
  00560	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	SetTextureStageState(4, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00565	6a 01		 push	 1
  00567	6a 04		 push	 4
  00569	6a 04		 push	 4
  0056b	8b ce		 mov	 ecx, esi
  0056d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 	SetTextureStageState(4, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00572	6a 02		 push	 2
  00574	6a 05		 push	 5
  00576	6a 04		 push	 4
  00578	8b ce		 mov	 ecx, esi
  0057a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 264  : 	SetTextureStageState(4, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0057f	6a 00		 push	 0
  00581	6a 06		 push	 6
  00583	6a 04		 push	 4
  00585	8b ce		 mov	 ecx, esi
  00587	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 
; 266  : 	SetTextureStageState(5, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0058c	6a 01		 push	 1
  0058e	6a 01		 push	 1
  00590	6a 05		 push	 5
  00592	8b ce		 mov	 ecx, esi
  00594	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 267  : 	SetTextureStageState(5, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00599	6a 02		 push	 2
  0059b	6a 02		 push	 2
  0059d	6a 05		 push	 5
  0059f	8b ce		 mov	 ecx, esi
  005a1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	SetTextureStageState(5, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005a6	6a 00		 push	 0
  005a8	6a 03		 push	 3
  005aa	6a 05		 push	 5
  005ac	8b ce		 mov	 ecx, esi
  005ae	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 	SetTextureStageState(5, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  005b3	6a 01		 push	 1
  005b5	6a 04		 push	 4
  005b7	6a 05		 push	 5
  005b9	8b ce		 mov	 ecx, esi
  005bb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 270  : 	SetTextureStageState(5, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  005c0	6a 02		 push	 2
  005c2	6a 05		 push	 5
  005c4	6a 05		 push	 5
  005c6	8b ce		 mov	 ecx, esi
  005c8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 271  : 	SetTextureStageState(5, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  005cd	6a 00		 push	 0
  005cf	6a 06		 push	 6
  005d1	6a 05		 push	 5
  005d3	8b ce		 mov	 ecx, esi
  005d5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 272  : 
; 273  : 	SetTextureStageState(6, D3DTSS_COLOROP, D3DTOP_DISABLE);

  005da	6a 01		 push	 1
  005dc	6a 01		 push	 1
  005de	6a 06		 push	 6
  005e0	8b ce		 mov	 ecx, esi
  005e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 274  : 	SetTextureStageState(6, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  005e7	6a 02		 push	 2
  005e9	6a 02		 push	 2
  005eb	6a 06		 push	 6
  005ed	8b ce		 mov	 ecx, esi
  005ef	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 275  : 	SetTextureStageState(6, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005f4	6a 00		 push	 0
  005f6	6a 03		 push	 3
  005f8	6a 06		 push	 6
  005fa	8b ce		 mov	 ecx, esi
  005fc	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 276  : 	SetTextureStageState(6, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00601	6a 01		 push	 1
  00603	6a 04		 push	 4
  00605	6a 06		 push	 6
  00607	8b ce		 mov	 ecx, esi
  00609	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 277  : 	SetTextureStageState(6, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0060e	6a 02		 push	 2
  00610	6a 05		 push	 5
  00612	6a 06		 push	 6
  00614	8b ce		 mov	 ecx, esi
  00616	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 278  : 	SetTextureStageState(6, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0061b	6a 00		 push	 0
  0061d	6a 06		 push	 6
  0061f	6a 06		 push	 6
  00621	8b ce		 mov	 ecx, esi
  00623	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 279  : 
; 280  : 	SetTextureStageState(7, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00628	6a 01		 push	 1
  0062a	6a 01		 push	 1
  0062c	6a 07		 push	 7
  0062e	8b ce		 mov	 ecx, esi
  00630	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 281  : 	SetTextureStageState(7, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00635	6a 02		 push	 2
  00637	6a 02		 push	 2
  00639	6a 07		 push	 7
  0063b	8b ce		 mov	 ecx, esi
  0063d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 282  : 	SetTextureStageState(7, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00642	6a 00		 push	 0
  00644	6a 03		 push	 3
  00646	6a 07		 push	 7
  00648	8b ce		 mov	 ecx, esi
  0064a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 283  : 	SetTextureStageState(7, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0064f	6a 01		 push	 1
  00651	6a 04		 push	 4
  00653	6a 07		 push	 7
  00655	8b ce		 mov	 ecx, esi
  00657	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 284  : 	SetTextureStageState(7, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0065c	6a 02		 push	 2
  0065e	6a 05		 push	 5
  00660	6a 07		 push	 7
  00662	8b ce		 mov	 ecx, esi
  00664	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 285  : 	SetTextureStageState(7, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00669	6a 00		 push	 0
  0066b	6a 06		 push	 6
  0066d	6a 07		 push	 7
  0066f	8b ce		 mov	 ecx, esi
  00671	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 286  : 
; 287  : 	SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);

  00676	6a 00		 push	 0
  00678	6a 0b		 push	 11			; 0000000bH
  0067a	6a 00		 push	 0
  0067c	8b ce		 mov	 ecx, esi
  0067e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 288  : 	SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);

  00683	6a 01		 push	 1
  00685	6a 0b		 push	 11			; 0000000bH
  00687	6a 01		 push	 1
  00689	8b ce		 mov	 ecx, esi
  0068b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 289  : 	SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 2);

  00690	6a 02		 push	 2
  00692	6a 0b		 push	 11			; 0000000bH
  00694	6a 02		 push	 2
  00696	8b ce		 mov	 ecx, esi
  00698	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 290  : 	SetTextureStageState(3, D3DTSS_TEXCOORDINDEX, 3);

  0069d	6a 03		 push	 3
  0069f	6a 0b		 push	 11			; 0000000bH
  006a1	6a 03		 push	 3
  006a3	8b ce		 mov	 ecx, esi
  006a5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 291  : 	SetTextureStageState(4, D3DTSS_TEXCOORDINDEX, 4);

  006aa	6a 04		 push	 4
  006ac	6a 0b		 push	 11			; 0000000bH
  006ae	6a 04		 push	 4
  006b0	8b ce		 mov	 ecx, esi
  006b2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 292  : 	SetTextureStageState(5, D3DTSS_TEXCOORDINDEX, 5);

  006b7	6a 05		 push	 5
  006b9	6a 0b		 push	 11			; 0000000bH
  006bb	6a 05		 push	 5
  006bd	8b ce		 mov	 ecx, esi
  006bf	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 293  : 	SetTextureStageState(6, D3DTSS_TEXCOORDINDEX, 6);

  006c4	6a 06		 push	 6
  006c6	6a 0b		 push	 11			; 0000000bH
  006c8	6a 06		 push	 6
  006ca	8b ce		 mov	 ecx, esi
  006cc	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 294  : 	SetTextureStageState(7, D3DTSS_TEXCOORDINDEX, 7);

  006d1	6a 07		 push	 7
  006d3	6a 0b		 push	 11			; 0000000bH
  006d5	6a 07		 push	 7
  006d7	8b ce		 mov	 ecx, esi
  006d9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 295  : 
; 296  : 	SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  006de	6a 02		 push	 2
  006e0	6a 11		 push	 17			; 00000011H
  006e2	6a 00		 push	 0
  006e4	8b ce		 mov	 ecx, esi
  006e6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 297  : 	SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  006eb	6a 02		 push	 2
  006ed	6a 10		 push	 16			; 00000010H
  006ef	6a 00		 push	 0
  006f1	8b ce		 mov	 ecx, esi
  006f3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 298  : 	SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  006f8	6a 02		 push	 2
  006fa	6a 12		 push	 18			; 00000012H
  006fc	6a 00		 push	 0
  006fe	8b ce		 mov	 ecx, esi
  00700	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 299  : 
; 300  : 	SetTextureStageState(1, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00705	6a 02		 push	 2
  00707	6a 11		 push	 17			; 00000011H
  00709	6a 01		 push	 1
  0070b	8b ce		 mov	 ecx, esi
  0070d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 301  : 	SetTextureStageState(1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00712	6a 02		 push	 2
  00714	6a 10		 push	 16			; 00000010H
  00716	6a 01		 push	 1
  00718	8b ce		 mov	 ecx, esi
  0071a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 302  : 	SetTextureStageState(1, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0071f	6a 02		 push	 2
  00721	6a 12		 push	 18			; 00000012H
  00723	6a 01		 push	 1
  00725	8b ce		 mov	 ecx, esi
  00727	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 303  : 
; 304  : 	SetTextureStageState(2, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0072c	6a 02		 push	 2
  0072e	6a 11		 push	 17			; 00000011H
  00730	6a 02		 push	 2
  00732	8b ce		 mov	 ecx, esi
  00734	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 305  : 	SetTextureStageState(2, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00739	6a 02		 push	 2
  0073b	6a 10		 push	 16			; 00000010H
  0073d	6a 02		 push	 2
  0073f	8b ce		 mov	 ecx, esi
  00741	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 306  : 	SetTextureStageState(2, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00746	6a 02		 push	 2
  00748	6a 12		 push	 18			; 00000012H
  0074a	6a 02		 push	 2
  0074c	8b ce		 mov	 ecx, esi
  0074e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 307  : 
; 308  : 	SetTextureStageState(3, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00753	6a 02		 push	 2
  00755	6a 11		 push	 17			; 00000011H
  00757	6a 03		 push	 3
  00759	8b ce		 mov	 ecx, esi
  0075b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 309  : 	SetTextureStageState(3, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00760	6a 02		 push	 2
  00762	6a 10		 push	 16			; 00000010H
  00764	6a 03		 push	 3
  00766	8b ce		 mov	 ecx, esi
  00768	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 310  : 	SetTextureStageState(3, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0076d	6a 02		 push	 2
  0076f	6a 12		 push	 18			; 00000012H
  00771	6a 03		 push	 3
  00773	8b ce		 mov	 ecx, esi
  00775	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 311  : 
; 312  : 	SetTextureStageState(4, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0077a	6a 02		 push	 2
  0077c	6a 11		 push	 17			; 00000011H
  0077e	6a 04		 push	 4
  00780	8b ce		 mov	 ecx, esi
  00782	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 313  : 	SetTextureStageState(4, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00787	6a 02		 push	 2
  00789	6a 10		 push	 16			; 00000010H
  0078b	6a 04		 push	 4
  0078d	8b ce		 mov	 ecx, esi
  0078f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 314  : 	SetTextureStageState(4, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00794	6a 02		 push	 2
  00796	6a 12		 push	 18			; 00000012H
  00798	6a 04		 push	 4
  0079a	8b ce		 mov	 ecx, esi
  0079c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 315  : 
; 316  : 	SetTextureStageState(5, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007a1	6a 02		 push	 2
  007a3	6a 11		 push	 17			; 00000011H
  007a5	6a 05		 push	 5
  007a7	8b ce		 mov	 ecx, esi
  007a9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 317  : 	SetTextureStageState(5, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007ae	6a 02		 push	 2
  007b0	6a 10		 push	 16			; 00000010H
  007b2	6a 05		 push	 5
  007b4	8b ce		 mov	 ecx, esi
  007b6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 318  : 	SetTextureStageState(5, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007bb	6a 02		 push	 2
  007bd	6a 12		 push	 18			; 00000012H
  007bf	6a 05		 push	 5
  007c1	8b ce		 mov	 ecx, esi
  007c3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 319  : 
; 320  : 	SetTextureStageState(6, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007c8	6a 02		 push	 2
  007ca	6a 11		 push	 17			; 00000011H
  007cc	6a 06		 push	 6
  007ce	8b ce		 mov	 ecx, esi
  007d0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 321  : 	SetTextureStageState(6, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007d5	6a 02		 push	 2
  007d7	6a 10		 push	 16			; 00000010H
  007d9	6a 06		 push	 6
  007db	8b ce		 mov	 ecx, esi
  007dd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 322  : 	SetTextureStageState(6, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007e2	6a 02		 push	 2
  007e4	6a 12		 push	 18			; 00000012H
  007e6	6a 06		 push	 6
  007e8	8b ce		 mov	 ecx, esi
  007ea	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 323  : 
; 324  : 	SetTextureStageState(7, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007ef	6a 02		 push	 2
  007f1	6a 11		 push	 17			; 00000011H
  007f3	6a 07		 push	 7
  007f5	8b ce		 mov	 ecx, esi
  007f7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 325  : 	SetTextureStageState(7, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007fc	6a 02		 push	 2
  007fe	6a 10		 push	 16			; 00000010H
  00800	6a 07		 push	 7
  00802	8b ce		 mov	 ecx, esi
  00804	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 326  : 	SetTextureStageState(7, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00809	6a 02		 push	 2
  0080b	6a 12		 push	 18			; 00000012H
  0080d	6a 07		 push	 7
  0080f	8b ce		 mov	 ecx, esi
  00811	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 327  : 
; 328  : 	SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00816	6a 01		 push	 1
  00818	6a 0d		 push	 13			; 0000000dH
  0081a	6a 00		 push	 0
  0081c	8b ce		 mov	 ecx, esi
  0081e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 329  : 	SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00823	6a 01		 push	 1
  00825	6a 0e		 push	 14			; 0000000eH
  00827	6a 00		 push	 0
  00829	8b ce		 mov	 ecx, esi
  0082b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 330  : 	SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00830	6a 01		 push	 1
  00832	6a 0d		 push	 13			; 0000000dH
  00834	6a 01		 push	 1
  00836	8b ce		 mov	 ecx, esi
  00838	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 331  : 	SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0083d	6a 01		 push	 1
  0083f	6a 0e		 push	 14			; 0000000eH
  00841	6a 01		 push	 1
  00843	8b ce		 mov	 ecx, esi
  00845	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 332  : 	SetTextureStageState(2, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0084a	6a 01		 push	 1
  0084c	6a 0d		 push	 13			; 0000000dH
  0084e	6a 02		 push	 2
  00850	8b ce		 mov	 ecx, esi
  00852	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 333  : 	SetTextureStageState(2, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00857	6a 01		 push	 1
  00859	6a 0e		 push	 14			; 0000000eH
  0085b	6a 02		 push	 2
  0085d	8b ce		 mov	 ecx, esi
  0085f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 334  : 	SetTextureStageState(3, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00864	6a 01		 push	 1
  00866	6a 0d		 push	 13			; 0000000dH
  00868	6a 03		 push	 3
  0086a	8b ce		 mov	 ecx, esi
  0086c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 335  : 	SetTextureStageState(3, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00871	6a 01		 push	 1
  00873	6a 0e		 push	 14			; 0000000eH
  00875	6a 03		 push	 3
  00877	8b ce		 mov	 ecx, esi
  00879	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 336  : 	SetTextureStageState(4, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0087e	6a 01		 push	 1
  00880	6a 0d		 push	 13			; 0000000dH
  00882	6a 04		 push	 4
  00884	8b ce		 mov	 ecx, esi
  00886	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 337  : 	SetTextureStageState(4, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0088b	6a 01		 push	 1
  0088d	6a 0e		 push	 14			; 0000000eH
  0088f	6a 04		 push	 4
  00891	8b ce		 mov	 ecx, esi
  00893	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 338  : 	SetTextureStageState(5, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00898	6a 01		 push	 1
  0089a	6a 0d		 push	 13			; 0000000dH
  0089c	6a 05		 push	 5
  0089e	8b ce		 mov	 ecx, esi
  008a0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 339  : 	SetTextureStageState(5, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008a5	6a 01		 push	 1
  008a7	6a 0e		 push	 14			; 0000000eH
  008a9	6a 05		 push	 5
  008ab	8b ce		 mov	 ecx, esi
  008ad	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 340  : 	SetTextureStageState(6, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008b2	6a 01		 push	 1
  008b4	6a 0d		 push	 13			; 0000000dH
  008b6	6a 06		 push	 6
  008b8	8b ce		 mov	 ecx, esi
  008ba	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 341  : 	SetTextureStageState(6, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008bf	6a 01		 push	 1
  008c1	6a 0e		 push	 14			; 0000000eH
  008c3	6a 06		 push	 6
  008c5	8b ce		 mov	 ecx, esi
  008c7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 342  : 	SetTextureStageState(7, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008cc	6a 01		 push	 1
  008ce	6a 0d		 push	 13			; 0000000dH
  008d0	6a 07		 push	 7
  008d2	8b ce		 mov	 ecx, esi
  008d4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 343  : 	SetTextureStageState(7, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008d9	6a 01		 push	 1
  008db	6a 0e		 push	 14			; 0000000eH
  008dd	6a 07		 push	 7
  008df	8b ce		 mov	 ecx, esi
  008e1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 344  : 
; 345  : 	SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008e6	6a 00		 push	 0
  008e8	6a 18		 push	 24			; 00000018H
  008ea	6a 00		 push	 0
  008ec	8b ce		 mov	 ecx, esi
  008ee	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 346  : 	SetTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008f3	6a 00		 push	 0
  008f5	6a 18		 push	 24			; 00000018H
  008f7	6a 01		 push	 1
  008f9	8b ce		 mov	 ecx, esi
  008fb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 347  : 	SetTextureStageState(2, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00900	6a 00		 push	 0
  00902	6a 18		 push	 24			; 00000018H
  00904	6a 02		 push	 2
  00906	8b ce		 mov	 ecx, esi
  00908	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 348  : 	SetTextureStageState(3, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0090d	6a 00		 push	 0
  0090f	6a 18		 push	 24			; 00000018H
  00911	6a 03		 push	 3
  00913	8b ce		 mov	 ecx, esi
  00915	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 349  : 	SetTextureStageState(4, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0091a	6a 00		 push	 0
  0091c	6a 18		 push	 24			; 00000018H
  0091e	6a 04		 push	 4
  00920	8b ce		 mov	 ecx, esi
  00922	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 350  : 	SetTextureStageState(5, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00927	6a 00		 push	 0
  00929	6a 18		 push	 24			; 00000018H
  0092b	6a 05		 push	 5
  0092d	8b ce		 mov	 ecx, esi
  0092f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 351  : 	SetTextureStageState(6, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00934	6a 00		 push	 0
  00936	6a 18		 push	 24			; 00000018H
  00938	6a 06		 push	 6
  0093a	8b ce		 mov	 ecx, esi
  0093c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 352  : 	SetTextureStageState(7, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00941	6a 00		 push	 0
  00943	6a 18		 push	 24			; 00000018H
  00945	6a 07		 push	 7
  00947	8b ce		 mov	 ecx, esi
  00949	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 353  : 
; 354  : 	SetTexture(0, NULL);

  0094e	6a 00		 push	 0
  00950	6a 00		 push	 0
  00952	8b ce		 mov	 ecx, esi
  00954	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 355  : 	SetTexture(1, NULL);

  00959	6a 00		 push	 0
  0095b	6a 01		 push	 1
  0095d	8b ce		 mov	 ecx, esi
  0095f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 356  : 	SetTexture(2, NULL);

  00964	6a 00		 push	 0
  00966	6a 02		 push	 2
  00968	8b ce		 mov	 ecx, esi
  0096a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 357  : 	SetTexture(3, NULL);

  0096f	6a 00		 push	 0
  00971	6a 03		 push	 3
  00973	8b ce		 mov	 ecx, esi
  00975	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 358  : 	SetTexture(4, NULL);

  0097a	6a 00		 push	 0
  0097c	6a 04		 push	 4
  0097e	8b ce		 mov	 ecx, esi
  00980	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 359  : 	SetTexture(5, NULL);

  00985	6a 00		 push	 0
  00987	6a 05		 push	 5
  00989	8b ce		 mov	 ecx, esi
  0098b	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 360  : 	SetTexture(6, NULL);

  00990	6a 00		 push	 0
  00992	6a 06		 push	 6
  00994	8b ce		 mov	 ecx, esi
  00996	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 361  : 	SetTexture(7, NULL);

  0099b	6a 00		 push	 0
  0099d	6a 07		 push	 7
  0099f	8b ce		 mov	 ecx, esi
  009a1	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 362  : 
; 363  : 	SetPixelShader(0);

  009a6	6a 00		 push	 0
  009a8	8b ce		 mov	 ecx, esi
  009aa	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 364  : 	SetVertexShader(D3DFVF_XYZ);

  009af	6a 02		 push	 2
  009b1	8b ce		 mov	 ecx, esi
  009b3	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 365  : 
; 366  : 	D3DXVECTOR4 av4Null[STATEMANAGER_MAX_VCONSTANTS];
; 367  : 	memset(av4Null, 0, sizeof(av4Null));

  009b8	68 00 06 00 00	 push	 1536			; 00000600H
  009bd	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009c3	6a 00		 push	 0
  009c5	50		 push	 eax
  009c6	e8 00 00 00 00	 call	 _memset
  009cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 368  : 	SetVertexShaderConstant(0, av4Null, STATEMANAGER_MAX_VCONSTANTS);

  009ce	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009d4	8b ce		 mov	 ecx, esi
  009d6	6a 60		 push	 96			; 00000060H
  009d8	50		 push	 eax
  009d9	6a 00		 push	 0
  009db	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 369  : 	SetPixelShaderConstant(0, av4Null, STATEMANAGER_MAX_PCONSTANTS);

  009e0	6a 08		 push	 8
  009e2	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009e8	8b ce		 mov	 ecx, esi
  009ea	50		 push	 eax
  009eb	6a 00		 push	 0
  009ed	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 370  : 
; 371  : 	m_bForce = false;
; 372  : 
; 373  : #ifdef _DEBUG
; 374  : 	int i, j;
; 375  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)
; 376  : 		m_bRenderStateSavingFlag[i] = FALSE;
; 377  : 
; 378  : 	for (j = 0; j < STATEMANAGER_MAX_TRANSFORMSTATES; j++)
; 379  : 		m_bTransformSavingFlag[j] = FALSE;
; 380  : 
; 381  : 	for (j = 0; j < STATEMANAGER_MAX_STAGES; ++j)
; 382  : 		for (i = 0; i < STATEMANAGER_MAX_TEXTURESTATES; ++i)
; 383  : 			m_bTextureStageStateSavingFlag[j][i] = FALSE;
; 384  : #endif _DEBUG
; 385  : }

  009f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009f5	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  009fc	33 cd		 xor	 ecx, ebp
  009fe	5e		 pop	 esi
  009ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a04	8b e5		 mov	 esp, ebp
  00a06	5d		 pop	 ebp
  00a07	c3		 ret	 0
?SetDefaultState@CStateManager@@QAEXXZ ENDP		; CStateManager::SetDefaultState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ??1CStateManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CStateManager@@UAE@XZ PROC				; CStateManager::~CStateManager, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CStateManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 67   : 	if (m_lpD3DDev)

  00026	8b 8e 78 33 01
	00		 mov	 ecx, DWORD PTR [esi+78712]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
  00032	85 c9		 test	 ecx, ecx
  00034	74 10		 je	 SHORT $LN2@CStateMana

; 68   : 	{
; 69   : 		m_lpD3DDev->Release();

  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	51		 push	 ecx
  00039	ff 50 08	 call	 DWORD PTR [eax+8]

; 70   : 		m_lpD3DDev = NULL;

  0003c	c7 86 78 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78712], 0
$LN2@CStateMana:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b be 60 33 01
	00		 mov	 edi, DWORD PTR [esi+78688]
  0004c	85 ff		 test	 edi, edi
  0004e	74 46		 je	 SHORT $LN13@CStateMana

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00050	8b 8e 68 33 01
	00		 mov	 ecx, DWORD PTR [esi+78696]
  00056	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005b	2b cf		 sub	 ecx, edi
  0005d	f7 e9		 imul	 ecx
  0005f	d1 fa		 sar	 edx, 1
  00061	8b c2		 mov	 eax, edx
  00063	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00066	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00068	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0006b	c1 e0 02	 shl	 eax, 2
  0006e	50		 push	 eax
  0006f	57		 push	 edi
  00070	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00075	c7 86 60 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78688], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00082	c7 86 64 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78692], 0

; 1699 :             _Myend   = pointer();

  0008c	c7 86 68 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78696], 0
$LN13@CStateMana:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 72   : }

  00096	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@
  0009c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
  000b7	cc		 int	 3
  000b8	cc		 int	 3
  000b9	cc		 int	 3
  000ba	cc		 int	 3
  000bb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CStateManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CStateManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CStateManager@@UAE@XZ ENDP				; CStateManager::~CStateManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp
;	COMDAT ??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpDevice$ = 8						; size = 4
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z PROC	; CStateManager::CStateManager, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, esi ; CSingleton<CStateManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 58   : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 162  : 		CStateManagerState()

  00036	8d 86 f0 65 00
	00		 lea	 eax, DWORD PTR [esi+26096]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 58   : {

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 162  : 		CStateManagerState()

  00042	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL22@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00050	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00056	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00059	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00060	83 e9 01	 sub	 ecx, 1
  00063	75 eb		 jne	 SHORT $LL22@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  00065	89 8e 70 66 00
	00		 mov	 DWORD PTR [esi+26224], ecx

; 162  : 		CStateManagerState()

  0006b	8d 86 64 cc 00
	00		 lea	 eax, DWORD PTR [esi+52324]

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00071	89 8e 74 66 00
	00		 mov	 DWORD PTR [esi+26228], ecx

; 162  : 		CStateManagerState()

  00077	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007c	0f 1f 40 00	 npad	 4
$LL46@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00080	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00086	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00089	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00090	83 e9 01	 sub	 ecx, 1
  00093	75 eb		 jne	 SHORT $LL46@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  00095	89 8e e4 cc 00
	00		 mov	 DWORD PTR [esi+52452], ecx

; 162  : 		CStateManagerState()

  0009b	8d 86 d8 32 01
	00		 lea	 eax, DWORD PTR [esi+78552]

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  000a1	89 8e e8 cc 00
	00		 mov	 DWORD PTR [esi+52456], ecx

; 162  : 		CStateManagerState()

  000a7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ac	0f 1f 40 00	 npad	 4
$LL70@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000b6	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  000b9	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  000c0	83 e9 01	 sub	 ecx, 1
  000c3	75 eb		 jne	 SHORT $LL70@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  000c5	89 8e 58 33 01
	00		 mov	 DWORD PTR [esi+78680], ecx

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  000cb	89 8e 5c 33 01
	00		 mov	 DWORD PTR [esi+78684], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d1	89 8e 60 33 01
	00		 mov	 DWORD PTR [esi+78688], ecx
  000d7	89 8e 64 33 01
	00		 mov	 DWORD PTR [esi+78692], ecx
  000dd	89 8e 68 33 01
	00		 mov	 DWORD PTR [esi+78696], ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.cpp

; 62   : 	SetDevice(lpDevice);

  000e3	ff 75 08	 push	 DWORD PTR _lpDevice$[ebp]
  000e6	89 8e 78 33 01
	00		 mov	 DWORD PTR [esi+78712], ecx
  000ec	88 8e 6d 33 01
	00		 mov	 BYTE PTR [esi+78701], cl
  000f2	8b ce		 mov	 ecx, esi
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	c7 86 70 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78704], 2
  00102	c7 86 74 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78708], 2
  0010c	e8 00 00 00 00	 call	 ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice

; 63   : }

  00111	8b c6		 mov	 eax, esi
  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCStateManager@@@@UAE@XZ ; CSingleton<CStateManager>::~CSingleton<CStateManager>
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 60 33 01
	00		 add	 ecx, 78688		; 00013360H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z ENDP	; CStateManager::CStateManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z PROC	; CSingleton<CStateManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z ENDP	; CSingleton<CStateManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCStateManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCStateManager@@@@UAE@XZ PROC		; CSingleton<CStateManager>::~CSingleton<CStateManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCStateManager@@@@UAE@XZ ENDP		; CSingleton<CStateManager>::~CSingleton<CStateManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
;	COMDAT ?ResetState@CStateManagerState@@QAEXXZ
_TEXT	SEGMENT
?ResetState@CStateManagerState@@QAEXXZ PROC		; CStateManagerState::ResetState, COMDAT
; _this$ = ecx

; 167  : 		{

  00000	8b d1		 mov	 edx, ecx

; 168  : 			DWORD i, y;
; 169  : 
; 170  : 			for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)

  00002	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0000e	8b fa		 mov	 edi, edx
  00010	f3 ab		 rep stosd

; 171  : 				m_RenderStates[i] = 0x7FFFFFFF;
; 172  : 
; 173  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)

  00012	8d ba 00 04 00
	00		 lea	 edi, DWORD PTR [edx+1024]
  00018	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0001d	f3 ab		 rep stosd

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0001f	33 f6		 xor	 esi, esi

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;
; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00021	8d 82 ec 65 00
	00		 lea	 eax, DWORD PTR [edx+26092]

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00027	33 ff		 xor	 edi, edi

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;
; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00029	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002e	66 90		 npad	 2
$LL13@ResetState:

; 178  : 				m_StreamData[i] = CStreamData();

  00030	89 30		 mov	 DWORD PTR [eax], esi
  00032	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00035	89 78 fc	 mov	 DWORD PTR [eax-4], edi
  00038	83 e9 01	 sub	 ecx, 1
  0003b	75 f3		 jne	 SHORT $LL13@ResetState

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  0003d	89 b2 6c 66 00
	00		 mov	 DWORD PTR [edx+26220], esi

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00043	8d 82 dc 1a 00
	00		 lea	 eax, DWORD PTR [edx+6876]

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  00049	89 b2 70 66 00
	00		 mov	 DWORD PTR [edx+26224], esi

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  0004f	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00054	5f		 pop	 edi

; 181  : 
; 182  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)
; 183  : 				m_Textures[i] = NULL;

  00055	89 b2 80 1a 00
	00		 mov	 DWORD PTR [edx+6784], esi
  0005b	89 b2 84 1a 00
	00		 mov	 DWORD PTR [edx+6788], esi
  00061	89 b2 88 1a 00
	00		 mov	 DWORD PTR [edx+6792], esi
  00067	89 b2 8c 1a 00
	00		 mov	 DWORD PTR [edx+6796], esi
  0006d	89 b2 90 1a 00
	00		 mov	 DWORD PTR [edx+6800], esi
  00073	89 b2 94 1a 00
	00		 mov	 DWORD PTR [edx+6804], esi
  00079	89 b2 98 1a 00
	00		 mov	 DWORD PTR [edx+6808], esi
  0007f	89 b2 9c 1a 00
	00		 mov	 DWORD PTR [edx+6812], esi

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00085	5e		 pop	 esi
$LL19@ResetState:
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00086	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  0008d	8d 40 40	 lea	 eax, DWORD PTR [eax+64]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00090	c7 40 c0 00 00
	00 00		 mov	 DWORD PTR [eax-64], 0
  00097	c7 40 bc 00 00
	00 00		 mov	 DWORD PTR [eax-68], 0
  0009e	c7 40 b8 00 00
	00 00		 mov	 DWORD PTR [eax-72], 0
  000a5	c7 40 b0 00 00
	00 00		 mov	 DWORD PTR [eax-80], 0
  000ac	c7 40 ac 00 00
	00 00		 mov	 DWORD PTR [eax-84], 0
  000b3	c7 40 a8 00 00
	00 00		 mov	 DWORD PTR [eax-88], 0
  000ba	c7 40 a4 00 00
	00 00		 mov	 DWORD PTR [eax-92], 0
  000c1	c7 40 9c 00 00
	00 00		 mov	 DWORD PTR [eax-100], 0
  000c8	c7 40 98 00 00
	00 00		 mov	 DWORD PTR [eax-104], 0
  000cf	c7 40 94 00 00
	00 00		 mov	 DWORD PTR [eax-108], 0
  000d6	c7 40 90 00 00
	00 00		 mov	 DWORD PTR [eax-112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000dd	c7 40 c8 00 00
	80 3f		 mov	 DWORD PTR [eax-56], 1065353216 ; 3f800000H
  000e4	c7 40 b4 00 00
	80 3f		 mov	 DWORD PTR [eax-76], 1065353216 ; 3f800000H
  000eb	c7 40 a0 00 00
	80 3f		 mov	 DWORD PTR [eax-96], 1065353216 ; 3f800000H
  000f2	c7 40 8c 00 00
	80 3f		 mov	 DWORD PTR [eax-116], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  000f9	83 e9 01	 sub	 ecx, 1
  000fc	75 88		 jne	 SHORT $LL19@ResetState

; 188  : 				D3DXMatrixIdentity(&m_Matrices[i]);
; 189  : 
; 190  : 			for (i = 0; i < STATEMANAGER_MAX_VCONSTANTS; i++)

  000fe	0f 57 c0	 xorps	 xmm0, xmm0
  00101	8d 82 00 14 00
	00		 lea	 eax, DWORD PTR [edx+5120]
  00107	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0010c	0f 1f 40 00	 npad	 4
$LL22@ResetState:
  00110	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 191  : 				m_VertexShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);

  00113	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00117	83 e9 01	 sub	 ecx, 1
  0011a	75 f4		 jne	 SHORT $LL22@ResetState

; 192  : 
; 193  : 			for (i = 0; i < STATEMANAGER_MAX_PCONSTANTS; i++)
; 194  : 				m_PixelShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);
; 195  : 
; 196  : 			m_dwPixelShader = 0;
; 197  : 			m_dwVertexShader = D3DFVF_XYZ;
; 198  : 
; 199  : 			ZeroMemory(&m_Matrices, sizeof(D3DXMATRIX) * STATEMANAGER_MAX_TRANSFORMSTATES);

  0011c	0f 57 c0	 xorps	 xmm0, xmm0
  0011f	8d 82 a8 1a 00
	00		 lea	 eax, DWORD PTR [edx+6824]
  00125	68 00 4b 00 00	 push	 19200			; 00004b00H
  0012a	51		 push	 ecx
  0012b	0f 11 82 00 1a
	00 00		 movups	 XMMWORD PTR [edx+6656], xmm0
  00132	50		 push	 eax
  00133	0f 11 82 10 1a
	00 00		 movups	 XMMWORD PTR [edx+6672], xmm0
  0013a	0f 11 82 20 1a
	00 00		 movups	 XMMWORD PTR [edx+6688], xmm0
  00141	0f 11 82 30 1a
	00 00		 movups	 XMMWORD PTR [edx+6704], xmm0
  00148	0f 11 82 40 1a
	00 00		 movups	 XMMWORD PTR [edx+6720], xmm0
  0014f	0f 11 82 50 1a
	00 00		 movups	 XMMWORD PTR [edx+6736], xmm0
  00156	0f 11 82 60 1a
	00 00		 movups	 XMMWORD PTR [edx+6752], xmm0
  0015d	0f 11 82 70 1a
	00 00		 movups	 XMMWORD PTR [edx+6768], xmm0
  00164	89 8a a0 1a 00
	00		 mov	 DWORD PTR [edx+6816], ecx
  0016a	c7 82 a4 1a 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+6820], 2
  00174	e8 00 00 00 00	 call	 _memset
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 		}

  0017c	c3		 ret	 0
?ResetState@CStateManagerState@@QAEXXZ ENDP		; CStateManagerState::ResetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\StateManager.h
;	COMDAT ??_FCStreamData@@QAEXXZ
_TEXT	SEGMENT
??_FCStreamData@@QAEXXZ PROC				; CStreamData::`default constructor closure', COMDAT
; _this$ = ecx

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c3		 ret	 0
??_FCStreamData@@QAEXXZ ENDP				; CStreamData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
