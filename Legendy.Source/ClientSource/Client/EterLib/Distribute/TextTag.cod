; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
PUBLIC	?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z ; GetTextTagOutputString
PUBLIC	?GetTextTagOutputLen@@YAHPB_WH@Z		; GetTextTagOutputLen
PUBLIC	?FindColorTagEndPosition@@YAHPB_WH@Z		; FindColorTagEndPosition
PUBLIC	?FindColorTagStartPosition@@YAHPB_WH@Z		; FindColorTagStartPosition
PUBLIC	?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z ; GetTextTagInternalPosFromRenderPos
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z$1
__ehfuncinfo$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTextTagOutputLen@@YAHPB_WH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTextTagOutputLen@@YAHPB_WH@Z$0
__ehfuncinfo$?GetTextTagOutputLen@@YAHPB_WH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTextTagOutputLen@@YAHPB_WH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z$1
__ehfuncinfo$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z
_TEXT	SEGMENT
_len$ = -104						; size = 4
__Old_capacity$1$ = -100				; size = 4
_src$GSCopy$1$ = -96					; size = 4
__New_ptr$2 = -92					; size = 4
__Ch$1$ = -88						; size = 4
tv862 = -84						; size = 4
_output_len$1$ = -80					; size = 4
$T3 = -76						; size = 4
_hyperlinkStep$1$ = -72					; size = 4
_color_tag$1$ = -65					; size = 1
_extraInfo$ = -64					; size = 24
_dst$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_src$ = 8						; size = 4
_src_len$ = 12						; size = 4
_offset$ = 16						; size = 4
?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z PROC	; GetTextTagInternalPosFromRenderPos, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002e	be 07 00 00 00	 mov	 esi, 7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 96   : {

  00033	8b 55 0c	 mov	 edx, DWORD PTR _src_len$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00036	33 c0		 xor	 eax, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 96   : {

  00038	89 4d a0	 mov	 DWORD PTR _src$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dst$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00042	89 75 ec	 mov	 DWORD PTR _dst$[ebp+20], esi

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00045	66 89 45 d8	 mov	 WORD PTR _dst$[ebp], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 98   : 	std::wstring dst;

  00049	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004c	33 ff		 xor	 edi, edi
  0004e	89 45 d0	 mov	 DWORD PTR _extraInfo$[ebp+16], eax
  00051	8b c6		 mov	 eax, esi
  00053	89 45 d4	 mov	 DWORD PTR _extraInfo$[ebp+20], eax
  00056	66 89 7d c0	 mov	 WORD PTR _extraInfo$[ebp], di
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 103  : 	int internal_offset = 0;

  0005a	33 db		 xor	 ebx, ebx
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00060	89 7d b0	 mov	 DWORD PTR _output_len$1$[ebp], edi
  00063	89 7d b8	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], edi
  00066	c6 45 bf 00	 mov	 BYTE PTR _color_tag$1$[ebp], 0

; 104  : 
; 105  :     for (int i = 0; i < src_len; )

  0006a	85 d2		 test	 edx, edx
  0006c	0f 8e db 01 00
	00		 jle	 $LN139@GetTextTag
$LL2@GetTextTag:

; 106  :     {
; 107  :         int tag = GetTextTag(&src[i], src_len - i, len, extraInfo);

  00072	8d 45 c0	 lea	 eax, DWORD PTR _extraInfo$[ebp]
  00075	2b d7		 sub	 edx, edi
  00077	50		 push	 eax
  00078	8d 45 98	 lea	 eax, DWORD PTR _len$[ebp]
  0007b	50		 push	 eax
  0007c	8d 0c 79	 lea	 ecx, DWORD PTR [ecx+edi*2]
  0007f	52		 push	 edx
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 108  : 
; 109  :         if (tag == TEXT_TAG_COLOR)

  00089	83 f8 02	 cmp	 eax, 2
  0008c	75 0b		 jne	 SHORT $LN5@GetTextTag

; 110  : 		{
; 111  : 			color_tag = true;

  0008e	c6 45 bf 01	 mov	 BYTE PTR _color_tag$1$[ebp], 1

; 112  : 			internal_offset = i;

  00092	8b df		 mov	 ebx, edi

; 113  : 		}

  00094	e9 9f 01 00 00	 jmp	 $LN77@GetTextTag
$LN5@GetTextTag:

; 114  : 		else if (tag == TEXT_TAG_RESTORE_COLOR)

  00099	83 f8 05	 cmp	 eax, 5
  0009c	75 09		 jne	 SHORT $LN7@GetTextTag

; 115  : 		{
; 116  : 			color_tag = false;

  0009e	c6 45 bf 00	 mov	 BYTE PTR _color_tag$1$[ebp], 0

; 117  : 		}

  000a2	e9 91 01 00 00	 jmp	 $LN77@GetTextTag
$LN7@GetTextTag:

; 118  :         else if (tag == TEXT_TAG_PLAIN || tag == TEXT_TAG_TAG)

  000a7	85 c0		 test	 eax, eax
  000a9	74 4d		 je	 SHORT $LN11@GetTextTag
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	74 48		 je	 SHORT $LN11@GetTextTag

; 129  : 				dst += src[i];
; 130  : 			}
; 131  :         }
; 132  :         else if (tag == TEXT_TAG_HYPERLINK_START)

  000b0	83 f8 03	 cmp	 eax, 3
  000b3	75 0c		 jne	 SHORT $LN15@GetTextTag

; 133  :             hyperlinkStep = 1;

  000b5	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  000bc	e9 77 01 00 00	 jmp	 $LN77@GetTextTag
$LN15@GetTextTag:

; 134  :         else if (tag == TEXT_TAG_HYPERLINK_END)

  000c1	83 f8 04	 cmp	 eax, 4
  000c4	75 0c		 jne	 SHORT $LN17@GetTextTag

; 135  :             hyperlinkStep = 0;

  000c6	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
  000cd	e9 66 01 00 00	 jmp	 $LN77@GetTextTag
$LN17@GetTextTag:

; 136  : #ifdef ENABLE_EMOJI_SYSTEM
; 137  : 		else if (tag == TEXT_TAG_EMOJI_START)

  000d2	83 f8 06	 cmp	 eax, 6
  000d5	75 0c		 jne	 SHORT $LN19@GetTextTag

; 138  : 			hyperlinkStep = 1;

  000d7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  000de	e9 55 01 00 00	 jmp	 $LN77@GetTextTag
$LN19@GetTextTag:

; 139  : 		else if (tag == TEXT_TAG_EMOJI_END)

  000e3	83 f8 07	 cmp	 eax, 7
  000e6	0f 85 4c 01 00
	00		 jne	 $LN77@GetTextTag

; 140  : 			hyperlinkStep = 0;

  000ec	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
  000f3	e9 40 01 00 00	 jmp	 $LN77@GetTextTag
$LN11@GetTextTag:

; 119  :         {
; 120  :             if (hyperlinkStep == 0)

  000f8	83 7d b8 00	 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 0
  000fc	0f 85 36 01 00
	00		 jne	 $LN77@GetTextTag

; 121  : 			{
; 122  : 				if (!color_tag)
; 123  : 					internal_offset = i;
; 124  : 
; 125  : 				if (offset <= output_len)

  00102	80 7d bf 00	 cmp	 BYTE PTR _color_tag$1$[ebp], 0
  00106	8b c7		 mov	 eax, edi
  00108	0f 45 c3	 cmovne	 eax, ebx
  0010b	8b d8		 mov	 ebx, eax
  0010d	8b 45 b0	 mov	 eax, DWORD PTR _output_len$1$[ebp]
  00110	89 5d b4	 mov	 DWORD PTR $T3[ebp], ebx
  00113	39 45 10	 cmp	 DWORD PTR _offset$[ebp], eax
  00116	0f 8e 2e 01 00
	00		 jle	 $LN140@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0011c	8b 5d e8	 mov	 ebx, DWORD PTR _dst$[ebp+16]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 128  :                 ++output_len;

  0011f	40		 inc	 eax
  00120	89 45 b0	 mov	 DWORD PTR _output_len$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2827 :         push_back(_Ch);

  00123	8b 45 a0	 mov	 eax, DWORD PTR _src$GSCopy$1$[ebp]
  00126	0f b7 0c 78	 movzx	 ecx, WORD PTR [eax+edi*2]
  0012a	89 4d a8	 mov	 DWORD PTR __Ch$1$[ebp], ecx

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0012d	3b de		 cmp	 ebx, esi

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0012f	73 20		 jae	 SHORT $LN67@GetTextTag

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00131	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]

; 2153 :         return _BUF_SIZE <= _Myres;

  00134	83 fe 08	 cmp	 esi, 8

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00137	89 45 e8	 mov	 DWORD PTR _dst$[ebp+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  0013a	8d 45 d8	 lea	 eax, DWORD PTR _dst$[ebp]

; 2136 :         if (_Large_string_engaged()) {

  0013d	0f 43 45 d8	 cmovae	 eax, DWORD PTR _dst$[ebp]

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00141	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00145	33 c9		 xor	 ecx, ecx
  00147	66 89 4c 58 02	 mov	 WORD PTR [eax+ebx*2+2], cx

; 3614 :             return;

  0014c	e9 e1 00 00 00	 jmp	 $LN144@GetTextTag
$LN67@GetTextTag:

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00151	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00156	2b c3		 sub	 eax, ebx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00158	83 f8 01	 cmp	 eax, 1
  0015b	0f 82 3f 01 00
	00		 jb	 $LN133@GetTextTag

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;
; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00161	8b d6		 mov	 edx, esi

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00163	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  00166	83 ce 07	 or	 esi, 7

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00169	89 55 9c	 mov	 DWORD PTR __Old_capacity$1$[ebp], edx

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0016c	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00172	76 0a		 jbe	 SHORT $LN82@GetTextTag

; 4203 :             return _Max;

  00174	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00179	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0017c	eb 2f		 jmp	 SHORT $LN138@GetTextTag
$LN82@GetTextTag:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0017e	8b ca		 mov	 ecx, edx
  00180	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00185	d1 e9		 shr	 ecx, 1
  00187	2b c1		 sub	 eax, ecx
  00189	3b d0		 cmp	 edx, eax
  0018b	76 0a		 jbe	 SHORT $LN83@GetTextTag

; 4207 :             return _Max;

  0018d	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00192	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00195	eb 16		 jmp	 SHORT $LN138@GetTextTag
$LN83@GetTextTag:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00197	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0019a	3b f0		 cmp	 esi, eax
  0019c	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0019f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  001a2	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  001a7	0f 87 ee 00 00
	00		 ja	 $LN134@GetTextTag
$LN138@GetTextTag:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  001ad	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  001b5	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  001b8	89 45 a4	 mov	 DWORD PTR __New_ptr$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001bb	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  001be	89 4d e8	 mov	 DWORD PTR _dst$[ebp+16], ecx

; 4260 :         _My_data._Myres       = _New_capacity;
; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  001c1	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]
  001c4	89 75 ec	 mov	 DWORD PTR _dst$[ebp+20], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  001c7	8b 5d 9c	 mov	 ebx, DWORD PTR __Old_capacity$1$[ebp]
  001ca	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  001cd	89 4d ac	 mov	 DWORD PTR tv862[ebp], ecx
  001d0	52		 push	 edx
  001d1	83 fb 08	 cmp	 ebx, 8
  001d4	72 33		 jb	 SHORT $LN76@GetTextTag
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  001d6	ff 75 d8	 push	 DWORD PTR _dst$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001df	8b 45 ac	 mov	 eax, DWORD PTR tv862[ebp]
  001e2	8b 4d a8	 mov	 ecx, DWORD PTR __Ch$1$[ebp]
  001e5	66 89 08	 mov	 WORD PTR [eax], cx

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001e8	33 c9		 xor	 ecx, ecx
  001ea	66 89 48 02	 mov	 WORD PTR [eax+2], cx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ee	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  001f5	50		 push	 eax
  001f6	ff 75 d8	 push	 DWORD PTR _dst$[ebp]
  001f9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  001fe	8b 45 a4	 mov	 eax, DWORD PTR __New_ptr$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00201	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  00204	89 45 d8	 mov	 DWORD PTR _dst$[ebp], eax

; 4267 :         } else {

  00207	eb 2c		 jmp	 SHORT $LN145@GetTextTag
$LN76@GetTextTag:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00209	8d 4d d8	 lea	 ecx, DWORD PTR _dst$[ebp]
  0020c	51		 push	 ecx
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00213	8b 45 ac	 mov	 eax, DWORD PTR tv862[ebp]
  00216	8b 4d a8	 mov	 ecx, DWORD PTR __Ch$1$[ebp]
  00219	66 89 08	 mov	 WORD PTR [eax], cx

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0021c	33 c9		 xor	 ecx, ecx
  0021e	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00222	8d 45 a4	 lea	 eax, DWORD PTR __New_ptr$2[ebp]
  00225	50		 push	 eax
  00226	8d 45 d8	 lea	 eax, DWORD PTR _dst$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  0022f	83 c4 14	 add	 esp, 20			; 00000014H
$LN144@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 143  :         i += len;

  00232	8b 75 ec	 mov	 esi, DWORD PTR _dst$[ebp+20]
$LN145@GetTextTag:
  00235	8b 5d b4	 mov	 ebx, DWORD PTR $T3[ebp]
$LN77@GetTextTag:
  00238	03 7d 98	 add	 edi, DWORD PTR _len$[ebp]
  0023b	8b 55 0c	 mov	 edx, DWORD PTR _src_len$[ebp]
  0023e	3b fa		 cmp	 edi, edx
  00240	7d 08		 jge	 SHORT $LN140@GetTextTag

; 104  : 
; 105  :     for (int i = 0; i < src_len; )

  00242	8b 4d a0	 mov	 ecx, DWORD PTR _src$GSCopy$1$[ebp]
  00245	e9 28 fe ff ff	 jmp	 $LL2@GetTextTag
$LN140@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0024a	8b 45 d4	 mov	 eax, DWORD PTR _extraInfo$[ebp+20]
$LN139@GetTextTag:
  0024d	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00250	72 13		 jb	 SHORT $LN115@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00252	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00259	50		 push	 eax
  0025a	ff 75 c0	 push	 DWORD PTR _extraInfo$[ebp]
  0025d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00262	83 c4 08	 add	 esp, 8
$LN115@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00265	83 fe 08	 cmp	 esi, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00268	72 13		 jb	 SHORT $LN125@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026a	8d 0c 75 02 00
	00 00		 lea	 ecx, DWORD PTR [esi*2+2]
  00271	51		 push	 ecx
  00272	ff 75 d8	 push	 DWORD PTR _dst$[ebp]
  00275	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0027a	83 c4 08	 add	 esp, 8
$LN125@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 146  : 	return internal_offset;

  0027d	8b c3		 mov	 eax, ebx

; 147  : }

  0027f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00282	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00289	59		 pop	 ecx
  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00290	33 cd		 xor	 ecx, ebp
  00292	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00297	8b e5		 mov	 esp, ebp
  00299	5d		 pop	 ebp
  0029a	c3		 ret	 0
$LN134@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0029b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN133@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  002a0	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN143@GetTextTag:
  002a5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _dst$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _extraInfo$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTextTagInternalPosFromRenderPos@@YAHPB_WHH@Z ENDP	; GetTextTagInternalPosFromRenderPos
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?FindColorTagStartPosition@@YAHPB_WH@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_src_len$ = 12						; size = 4
?FindColorTagStartPosition@@YAHPB_WH@Z PROC		; FindColorTagStartPosition, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 183  :     if (src_len < 2)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _src_len$[ebp]
  00007	56		 push	 esi
  00008	83 fb 02	 cmp	 ebx, 2
  0000b	7c 7d		 jl	 SHORT $LN10@FindColorT

; 184  :         return 0;
; 185  : 
; 186  :     const wchar_t * cur = src;
; 187  : 
; 188  : 	// @fixme012
; 189  : 	wchar_t wcStarts = L'c';

  0000d	be 63 00 00 00	 mov	 esi, 99			; 00000063H
  00012	57		 push	 edi

; 190  : 	wchar_t wcEnds = L'r';

  00013	8d 7e 0f	 lea	 edi, DWORD PTR [esi+15]

; 191  : 	if (GetDefaultCodePage() == CP_ARABIC)

  00016	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  0001b	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00020	75 07		 jne	 SHORT $LN5@FindColorT

; 192  : 	{
; 193  : 		wcStarts = L'h';

  00022	be 68 00 00 00	 mov	 esi, 104		; 00000068H

; 194  : 		wcEnds = L'h';

  00027	8b fe		 mov	 edi, esi
$LN5@FindColorT:

; 195  : 	}
; 196  : 
; 197  :     if (*cur == wcEnds && *(cur - 1) == L'|')

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0002c	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0002f	66 3b c7	 cmp	 ax, di
  00032	5f		 pop	 edi
  00033	75 41		 jne	 SHORT $LN19@FindColorT
  00035	66 83 79 fe 7c	 cmp	 WORD PTR [ecx-2], 124	; 0000007cH
  0003a	75 3a		 jne	 SHORT $LN19@FindColorT

; 198  :     {
; 199  : 	    int len = src_len;
; 200  : 
; 201  :         if (len >= 2 && *(cur - 2) == L'|')

  0003c	66 83 79 fc 7c	 cmp	 WORD PTR [ecx-4], 124	; 0000007cH
  00041	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00044	74 3b		 je	 SHORT $LN20@FindColorT

; 202  :             return 1;
; 203  : 
; 204  :         cur -= 2;
; 205  :         len -= 2;

  00046	8d 53 fe	 lea	 edx, DWORD PTR [ebx-2]

; 206  : 
; 207  :         while (len > 1)

  00049	83 fa 01	 cmp	 edx, 1
  0004c	7e 17		 jle	 SHORT $LN21@FindColorT
  0004e	66 90		 npad	 2
$LL2@FindColorT:

; 208  :         {
; 209  :             if (*cur == wcStarts && *(cur - 1) == L'|')

  00050	66 39 30	 cmp	 WORD PTR [eax], si
  00053	75 07		 jne	 SHORT $LN9@FindColorT
  00055	66 83 78 fe 7c	 cmp	 WORD PTR [eax-2], 124	; 0000007cH
  0005a	74 0f		 je	 SHORT $LN13@FindColorT
$LN9@FindColorT:

; 211  : 
; 212  :             --cur;
; 213  :             --len;

  0005c	4a		 dec	 edx
  0005d	83 e8 02	 sub	 eax, 2
  00060	83 fa 01	 cmp	 edx, 1
  00063	7f eb		 jg	 SHORT $LL2@FindColorT
$LN21@FindColorT:
  00065	5e		 pop	 esi

; 214  :         }
; 215  :         return (src_len);

  00066	8b c3		 mov	 eax, ebx

; 221  : }

  00068	5b		 pop	 ebx
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN13@FindColorT:

; 210  :                 return (src - cur) + 1;

  0006b	2b c8		 sub	 ecx, eax
  0006d	d1 f9		 sar	 ecx, 1
  0006f	5e		 pop	 esi

; 221  : }

  00070	5b		 pop	 ebx
  00071	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN19@FindColorT:

; 216  :     }
; 217  : 	else if (*cur == L'|' && *(cur - 1) == L'|')

  00076	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  00079	75 0f		 jne	 SHORT $LN10@FindColorT
  0007b	66 39 41 fe	 cmp	 WORD PTR [ecx-2], ax
  0007f	75 09		 jne	 SHORT $LN10@FindColorT
$LN20@FindColorT:
  00081	5e		 pop	 esi

; 218  : 		return 1;

  00082	b8 01 00 00 00	 mov	 eax, 1

; 221  : }

  00087	5b		 pop	 ebx
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN10@FindColorT:
  0008a	5e		 pop	 esi

; 219  : 
; 220  :     return 0;

  0008b	33 c0		 xor	 eax, eax

; 221  : }

  0008d	5b		 pop	 ebx
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?FindColorTagStartPosition@@YAHPB_WH@Z ENDP		; FindColorTagStartPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?FindColorTagEndPosition@@YAHPB_WH@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_src_len$ = 12						; size = 4
?FindColorTagEndPosition@@YAHPB_WH@Z PROC		; FindColorTagEndPosition, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 225  : 	const wchar_t * cur = src;
; 226  : 
; 227  : 	// @fixme012
; 228  : 	wchar_t wcStarts = L'c';

  00005	bf 63 00 00 00	 mov	 edi, 99			; 00000063H

; 229  : 	wchar_t wcEnds = L'r';

  0000a	8d 77 0f	 lea	 esi, DWORD PTR [edi+15]

; 230  : 	if (GetDefaultCodePage() == CP_ARABIC)

  0000d	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00012	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00017	75 07		 jne	 SHORT $LN4@FindColorT

; 231  : 	{
; 232  : 		wcStarts = L'h';

  00019	bf 68 00 00 00	 mov	 edi, 104		; 00000068H

; 233  : 		wcEnds = L'h';

  0001e	8b f7		 mov	 esi, edi
$LN4@FindColorT:

; 234  : 	}
; 235  : 
; 236  : 	if (src_len >= 4 && *cur == L'|' && *(cur + 1) == wcStarts)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _src_len$[ebp]
  00023	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00026	83 f8 04	 cmp	 eax, 4
  00029	7c 39		 jl	 SHORT $LN5@FindColorT
  0002b	66 83 3a 7c	 cmp	 WORD PTR [edx], 124	; 0000007cH
  0002f	75 24		 jne	 SHORT $LN8@FindColorT
  00031	66 39 7a 02	 cmp	 WORD PTR [edx+2], di
  00035	75 38		 jne	 SHORT $LN16@FindColorT

; 237  : 	{
; 238  : 		int left = src_len - 2;

  00037	8d 48 fe	 lea	 ecx, DWORD PTR [eax-2]

; 239  : 		cur += 2;

  0003a	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  0003d	0f 1f 00	 npad	 3
$LL2@FindColorT:

; 240  : 
; 241  : 		while (left > 1)
; 242  : 		{
; 243  : 			if (*cur == L'|' && *(cur + 1) == wcEnds)

  00040	66 83 38 7c	 cmp	 WORD PTR [eax], 124	; 0000007cH
  00044	75 06		 jne	 SHORT $LN7@FindColorT
  00046	66 39 70 02	 cmp	 WORD PTR [eax+2], si
  0004a	74 0f		 je	 SHORT $LN11@FindColorT
$LN7@FindColorT:

; 245  : 
; 246  : 			--left;

  0004c	49		 dec	 ecx

; 247  : 			++cur;

  0004d	83 c0 02	 add	 eax, 2
  00050	83 f9 01	 cmp	 ecx, 1
  00053	7f eb		 jg	 SHORT $LL2@FindColorT
$LN8@FindColorT:
  00055	5f		 pop	 edi

; 252  : 
; 253  : 	return 0;

  00056	33 c0		 xor	 eax, eax

; 254  : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN11@FindColorT:

; 244  : 				return (cur - src) + 1;

  0005b	2b c2		 sub	 eax, edx
  0005d	d1 f8		 sar	 eax, 1
  0005f	5f		 pop	 edi
  00060	40		 inc	 eax

; 254  : }

  00061	5e		 pop	 esi
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN5@FindColorT:

; 248  : 		}
; 249  : 	}
; 250  : 	else if (src_len >= 2 && *cur == L'|' && *(cur + 1) == L'|')

  00064	83 f8 02	 cmp	 eax, 2
  00067	7c ec		 jl	 SHORT $LN8@FindColorT
  00069	66 83 3a 7c	 cmp	 WORD PTR [edx], 124	; 0000007cH
  0006d	75 e6		 jne	 SHORT $LN8@FindColorT
$LN16@FindColorT:
  0006f	66 83 7a 02 7c	 cmp	 WORD PTR [edx+2], 124	; 0000007cH
  00074	75 df		 jne	 SHORT $LN8@FindColorT

; 251  : 		return 1;

  00076	5f		 pop	 edi
  00077	b8 01 00 00 00	 mov	 eax, 1

; 254  : }

  0007c	5e		 pop	 esi
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?FindColorTagEndPosition@@YAHPB_WH@Z ENDP		; FindColorTagEndPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?GetTextTagOutputLen@@YAHPB_WH@Z
_TEXT	SEGMENT
_src$GSCopy$1$ = -48					; size = 4
_len$ = -44						; size = 4
_extraInfo$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_src$ = 8						; size = 4
_src_len$ = 12						; size = 4
?GetTextTagOutputLen@@YAHPB_WH@Z PROC			; GetTextTagOutputLen, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTextTagOutputLen@@YAHPB_WH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002e	33 d2		 xor	 edx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 150  : {

  00030	8b 45 0c	 mov	 eax, DWORD PTR _src_len$[ebp]
  00033	89 4d d0	 mov	 DWORD PTR _src$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00036	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _extraInfo$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003d	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _extraInfo$[ebp+20], 7

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00044	66 89 55 d8	 mov	 WORD PTR _extraInfo$[ebp], dx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 153  :     int output_len = 0;

  00048	33 db		 xor	 ebx, ebx
  0004a	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 154  :     int hyperlinkStep = 0;

  0004d	33 f6		 xor	 esi, esi

; 155  : 
; 156  :     for (int i = 0; i < src_len; )

  0004f	33 ff		 xor	 edi, edi
  00051	85 c0		 test	 eax, eax
  00053	7e 73		 jle	 SHORT $LN42@GetTextTag
$LL2@GetTextTag:

; 157  :     {
; 158  :         int tag = GetTextTag(&src[i], src_len - i, len, extraInfo);

  00055	8d 55 d8	 lea	 edx, DWORD PTR _extraInfo$[ebp]
  00058	2b c7		 sub	 eax, edi
  0005a	52		 push	 edx
  0005b	8d 55 d4	 lea	 edx, DWORD PTR _len$[ebp]
  0005e	52		 push	 edx
  0005f	50		 push	 eax
  00060	8d 04 79	 lea	 eax, DWORD PTR [ecx+edi*2]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 159  : 
; 160  :         if (tag == TEXT_TAG_PLAIN || tag == TEXT_TAG_TAG)

  0006c	85 c0		 test	 eax, eax
  0006e	74 2b		 je	 SHORT $LN7@GetTextTag
  00070	83 f8 01	 cmp	 eax, 1
  00073	74 26		 je	 SHORT $LN7@GetTextTag

; 164  :         }
; 165  :         else if (tag == TEXT_TAG_HYPERLINK_START)

  00075	83 f8 03	 cmp	 eax, 3
  00078	75 05		 jne	 SHORT $LN9@GetTextTag

; 166  :             hyperlinkStep = 1;

  0007a	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  0007d	eb 21		 jmp	 SHORT $LN8@GetTextTag
$LN9@GetTextTag:

; 167  :         else if (tag == TEXT_TAG_HYPERLINK_END)

  0007f	83 f8 04	 cmp	 eax, 4
  00082	75 04		 jne	 SHORT $LN11@GetTextTag

; 168  :             hyperlinkStep = 0;

  00084	33 f6		 xor	 esi, esi
  00086	eb 18		 jmp	 SHORT $LN8@GetTextTag
$LN11@GetTextTag:

; 169  : #ifdef ENABLE_EMOJI_SYSTEM
; 170  : 		else if (tag == TEXT_TAG_EMOJI_START)

  00088	83 f8 06	 cmp	 eax, 6
  0008b	75 05		 jne	 SHORT $LN13@GetTextTag

; 171  : 			hyperlinkStep = 1;

  0008d	8d 70 fb	 lea	 esi, DWORD PTR [eax-5]
  00090	eb 0e		 jmp	 SHORT $LN8@GetTextTag
$LN13@GetTextTag:

; 172  : 		else if (tag == TEXT_TAG_EMOJI_END)

  00092	83 f8 07	 cmp	 eax, 7
  00095	75 09		 jne	 SHORT $LN8@GetTextTag

; 173  : 			hyperlinkStep = 0;

  00097	33 f6		 xor	 esi, esi
  00099	eb 05		 jmp	 SHORT $LN8@GetTextTag
$LN7@GetTextTag:

; 161  :         {
; 162  :             if (hyperlinkStep == 0)

  0009b	85 f6		 test	 esi, esi
  0009d	75 01		 jne	 SHORT $LN8@GetTextTag

; 163  :                 ++output_len;

  0009f	43		 inc	 ebx
$LN8@GetTextTag:

; 174  : #endif
; 175  : 
; 176  :         i += len;

  000a0	03 7d d4	 add	 edi, DWORD PTR _len$[ebp]
  000a3	8b 45 0c	 mov	 eax, DWORD PTR _src_len$[ebp]
  000a6	8b 4d d0	 mov	 ecx, DWORD PTR _src$GSCopy$1$[ebp]
  000a9	3b f8		 cmp	 edi, eax
  000ab	7c a8		 jl	 SHORT $LL2@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000ad	8b 4d ec	 mov	 ecx, DWORD PTR _extraInfo$[ebp+20]
  000b0	83 f9 08	 cmp	 ecx, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000b3	72 13		 jb	 SHORT $LN42@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b5	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  000bc	51		 push	 ecx
  000bd	ff 75 d8	 push	 DWORD PTR _extraInfo$[ebp]
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN42@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 179  : }

  000c8	8b c3		 mov	 eax, ebx
  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000db	33 cd		 xor	 ecx, ebp
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTextTagOutputLen@@YAHPB_WH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _extraInfo$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetTextTagOutputLen@@YAHPB_WH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTextTagOutputLen@@YAHPB_WH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTextTagOutputLen@@YAHPB_WH@Z ENDP			; GetTextTagOutputLen
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -80				; size = 4
_src$GSCopy$1$ = -76					; size = 4
_len$ = -72						; size = 4
__Old$1$ = -68						; size = 4
$T2 = -64						; size = 4
_i$1$ = -60						; size = 4
__Ch$1$ = -56						; size = 4
tv702 = -52						; size = 4
__New_ptr$3 = -48					; size = 4
_hyperlinkStep$1$ = -44					; size = 4
_extraInfo$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_src$ = 12						; size = 4
_src_len$ = 16						; size = 4
?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z PROC ; GetTextTagOutputString, COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002e	33 c9		 xor	 ecx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 60   : {

  00030	8b 55 0c	 mov	 edx, DWORD PTR _src$[ebp]
  00033	8b 45 10	 mov	 eax, DWORD PTR _src_len$[ebp]
  00036	89 7d b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00039	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00040	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00047	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 60   : {

  0004e	89 55 b4	 mov	 DWORD PTR _src$GSCopy$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00051	66 89 0f	 mov	 WORD PTR [edi], cx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 92   : 	return dst;

  00054	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0005b	89 4d e8	 mov	 DWORD PTR _extraInfo$[ebp+16], ecx

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005e	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _extraInfo$[ebp+20], 7

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00065	66 89 4d d8	 mov	 WORD PTR _extraInfo$[ebp], cx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 65   :     int hyperlinkStep = 0;

  00069	33 db		 xor	 ebx, ebx
  0006b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00072	89 5d d4	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], ebx

; 66   : 
; 67   :     for (int i = 0; i < src_len; )

  00075	89 4d c4	 mov	 DWORD PTR _i$1$[ebp], ecx
  00078	85 c0		 test	 eax, eax
  0007a	0f 8e ad 01 00
	00		 jle	 $LN89@GetTextTag
$LL2@GetTextTag:

; 68   :     {
; 69   :         int tag = GetTextTag(&src[i], src_len - i, len, extraInfo);

  00080	8d 34 4a	 lea	 esi, DWORD PTR [edx+ecx*2]
  00083	2b c1		 sub	 eax, ecx
  00085	8d 55 d8	 lea	 edx, DWORD PTR _extraInfo$[ebp]
  00088	52		 push	 edx
  00089	8d 55 b8	 lea	 edx, DWORD PTR _len$[ebp]
  0008c	52		 push	 edx
  0008d	50		 push	 eax
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 70   : 
; 71   :         if (tag == TEXT_TAG_PLAIN || tag == TEXT_TAG_TAG)

  00097	85 c0		 test	 eax, eax
  00099	74 4b		 je	 SHORT $LN7@GetTextTag
  0009b	83 f8 01	 cmp	 eax, 1
  0009e	74 46		 je	 SHORT $LN7@GetTextTag

; 74   : 			{
; 75   :                 ++output_len;
; 76   : 				dst += src[i];
; 77   : 			}
; 78   :         }
; 79   :         else if (tag == TEXT_TAG_HYPERLINK_START)

  000a0	83 f8 03	 cmp	 eax, 3
  000a3	75 0d		 jne	 SHORT $LN9@GetTextTag

; 80   :             hyperlinkStep = 1;

  000a5	bb 01 00 00 00	 mov	 ebx, 1
  000aa	89 5d d4	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], ebx
  000ad	e9 48 01 00 00	 jmp	 $LN51@GetTextTag
$LN9@GetTextTag:

; 81   :         else if (tag == TEXT_TAG_HYPERLINK_END)

  000b2	83 f8 04	 cmp	 eax, 4
  000b5	75 0a		 jne	 SHORT $LN11@GetTextTag

; 82   :             hyperlinkStep = 0;

  000b7	33 db		 xor	 ebx, ebx
  000b9	89 5d d4	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], ebx
  000bc	e9 39 01 00 00	 jmp	 $LN51@GetTextTag
$LN11@GetTextTag:

; 83   : #ifdef ENABLE_EMOJI_SYSTEM
; 84   : 		else if (tag == TEXT_TAG_EMOJI_START)

  000c1	83 f8 06	 cmp	 eax, 6
  000c4	75 0d		 jne	 SHORT $LN13@GetTextTag

; 85   : 			hyperlinkStep = 1;

  000c6	bb 01 00 00 00	 mov	 ebx, 1
  000cb	89 5d d4	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], ebx
  000ce	e9 27 01 00 00	 jmp	 $LN51@GetTextTag
$LN13@GetTextTag:

; 86   : 		else if (tag == TEXT_TAG_EMOJI_END)

  000d3	83 f8 07	 cmp	 eax, 7
  000d6	0f 85 1e 01 00
	00		 jne	 $LN51@GetTextTag

; 87   : 			hyperlinkStep = 0;

  000dc	33 db		 xor	 ebx, ebx
  000de	89 5d d4	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], ebx
  000e1	e9 14 01 00 00	 jmp	 $LN51@GetTextTag
$LN7@GetTextTag:

; 72   :         {
; 73   :             if (hyperlinkStep == 0)

  000e6	85 db		 test	 ebx, ebx
  000e8	0f 85 0c 01 00
	00		 jne	 $LN51@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  000ee	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 2827 :         push_back(_Ch);

  000f1	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  000f4	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 2827 :         push_back(_Ch);

  000f7	89 55 c8	 mov	 DWORD PTR __Ch$1$[ebp], edx

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  000fa	89 4d bc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  000fd	3b d9		 cmp	 ebx, ecx
  000ff	73 1f		 jae	 SHORT $LN41@GetTextTag

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00101	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00104	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00107	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00109	83 f9 08	 cmp	 ecx, 8

; 2136 :         if (_Large_string_engaged()) {

  0010c	72 02		 jb	 SHORT $LN44@GetTextTag

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0010e	8b 07		 mov	 eax, DWORD PTR [edi]
$LN44@GetTextTag:

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00110	33 c9		 xor	 ecx, ecx
  00112	66 89 14 58	 mov	 WORD PTR [eax+ebx*2], dx
  00116	66 89 4c 58 02	 mov	 WORD PTR [eax+ebx*2+2], cx

; 3614 :             return;

  0011b	e9 d7 00 00 00	 jmp	 $LN105@GetTextTag
$LN41@GetTextTag:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  00120	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00125	2b c3		 sub	 eax, ebx
  00127	83 f8 01	 cmp	 eax, 1
  0012a	0f 82 20 01 00
	00		 jb	 $LN96@GetTextTag

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00130	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00133	83 ce 07	 or	 esi, 7
  00136	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0013c	76 0a		 jbe	 SHORT $LN56@GetTextTag

; 4203 :             return _Max;

  0013e	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00143	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00146	eb 2f		 jmp	 SHORT $LN101@GetTextTag
$LN56@GetTextTag:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00148	8b d1		 mov	 edx, ecx
  0014a	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0014f	d1 ea		 shr	 edx, 1
  00151	2b c2		 sub	 eax, edx
  00153	3b c8		 cmp	 ecx, eax
  00155	76 0a		 jbe	 SHORT $LN57@GetTextTag

; 4207 :             return _Max;

  00157	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0015c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0015f	eb 16		 jmp	 SHORT $LN101@GetTextTag
$LN57@GetTextTag:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00161	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00164	3b f0		 cmp	 esi, eax
  00166	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00169	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0016c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00171	0f 87 d4 00 00
	00		 ja	 $LN97@GetTextTag
$LN101@GetTextTag:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00177	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  0017f	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 4260 :         _My_data._Myres       = _New_capacity;

  00182	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00185	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  00188	89 45 d0	 mov	 DWORD PTR __New_ptr$3[ebp], eax

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  0018b	8b 5d bc	 mov	 ebx, DWORD PTR __Old$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0018e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  00191	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00194	89 75 cc	 mov	 DWORD PTR tv702[ebp], esi

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00197	83 fb 08	 cmp	 ebx, 8
  0019a	72 35		 jb	 SHORT $LN50@GetTextTag
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0019c	ff 75 cc	 push	 DWORD PTR tv702[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0019f	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  001a1	56		 push	 esi
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001a8	8b 45 d0	 mov	 eax, DWORD PTR __New_ptr$3[ebp]
  001ab	8b 4d cc	 mov	 ecx, DWORD PTR tv702[ebp]
  001ae	8b 55 c8	 mov	 edx, DWORD PTR __Ch$1$[ebp]
  001b1	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001b5	33 d2		 xor	 edx, edx
  001b7	66 89 54 01 02	 mov	 WORD PTR [ecx+eax+2], dx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001bc	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
  001c3	50		 push	 eax
  001c4	56		 push	 esi
  001c5	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  001ca	8b 45 d0	 mov	 eax, DWORD PTR __New_ptr$3[ebp]
  001cd	89 07		 mov	 DWORD PTR [edi], eax

; 4267 :         } else {

  001cf	eb 23		 jmp	 SHORT $LN106@GetTextTag
$LN50@GetTextTag:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  001d1	56		 push	 esi
  001d2	57		 push	 edi
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001d9	8b 45 d0	 mov	 eax, DWORD PTR __New_ptr$3[ebp]

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001dc	33 c9		 xor	 ecx, ecx
  001de	8b 55 c8	 mov	 edx, DWORD PTR __Ch$1$[ebp]
  001e1	66 89 14 06	 mov	 WORD PTR [esi+eax], dx
  001e5	66 89 4c 06 02	 mov	 WORD PTR [esi+eax+2], cx

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001ea	8d 45 d0	 lea	 eax, DWORD PTR __New_ptr$3[ebp]
  001ed	50		 push	 eax
  001ee	57		 push	 edi
  001ef	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN106@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 90   :         i += len;

  001f4	83 c4 14	 add	 esp, 20			; 00000014H
$LN105@GetTextTag:
  001f7	8b 5d d4	 mov	 ebx, DWORD PTR _hyperlinkStep$1$[ebp]
$LN51@GetTextTag:
  001fa	8b 4d c4	 mov	 ecx, DWORD PTR _i$1$[ebp]
  001fd	03 4d b8	 add	 ecx, DWORD PTR _len$[ebp]
  00200	8b 45 10	 mov	 eax, DWORD PTR _src_len$[ebp]
  00203	89 4d c4	 mov	 DWORD PTR _i$1$[ebp], ecx
  00206	3b c8		 cmp	 ecx, eax
  00208	7d 08		 jge	 SHORT $LN102@GetTextTag

; 66   : 
; 67   :     for (int i = 0; i < src_len; )

  0020a	8b 55 b4	 mov	 edx, DWORD PTR _src$GSCopy$1$[ebp]
  0020d	e9 6e fe ff ff	 jmp	 $LL2@GetTextTag
$LN102@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00212	8b 4d ec	 mov	 ecx, DWORD PTR _extraInfo$[ebp+20]
  00215	83 f9 08	 cmp	 ecx, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00218	72 13		 jb	 SHORT $LN89@GetTextTag
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0021a	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  00221	51		 push	 ecx
  00222	ff 75 d8	 push	 DWORD PTR _extraInfo$[ebp]
  00225	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0022a	83 c4 08	 add	 esp, 8
$LN89@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 92   : 	return dst;

  0022d	8b c7		 mov	 eax, edi

; 93   : }

  0022f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00232	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00239	59		 pop	 ecx
  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx
  0023d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN97@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0024b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN96@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4250 :             _Xlen_string(); // result too long

  00250	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN104@GetTextTag:
  00255	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z$0:
  00000	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN18@GetTextTag
  0000c	83 65 c0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d b0	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN18@GetTextTag:
  00018	c3		 ret	 0
__unwindfunclet$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z$1:
  00019	8d 4d d8	 lea	 ecx, DWORD PTR _extraInfo$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTextTagOutputString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WH@Z ENDP ; GetTextTagOutputString
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp
;	COMDAT ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_maxLen$ = 12						; size = 4
__New_ptr$1 = 16					; size = 4
_tagLen$ = 16						; size = 4
_extraInfo$ = 20					; size = 4
?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; GetTextTag, COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7    :     tagLen = 1;

  00003	8b 45 10	 mov	 eax, DWORD PTR _tagLen$[ebp]
  00006	56		 push	 esi

; 8    : 
; 9    :     if (maxLen < 2 || *src != L'|')

  00007	8b 75 0c	 mov	 esi, DWORD PTR _maxLen$[ebp]
  0000a	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00010	83 fe 02	 cmp	 esi, 2
  00013	0f 8c 30 01 00
	00		 jl	 $LN3@GetTextTag
  00019	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0001c	66 83 3a 7c	 cmp	 WORD PTR [edx], 124	; 0000007cH
  00020	0f 85 23 01 00
	00		 jne	 $LN3@GetTextTag

; 11   : 
; 12   :     const wchar_t * cur = ++src;
; 13   : 
; 14   :     if (*cur == L'c') // color

  00026	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  0002a	83 f9 63	 cmp	 ecx, 99			; 00000063H
  0002d	0f 85 ae 00 00
	00		 jne	 $LN4@GetTextTag

; 15   :     {
; 16   :         if (maxLen < 10)

  00033	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00036	0f 8c 0d 01 00
	00		 jl	 $LN3@GetTextTag

; 17   :             return TEXT_TAG_PLAIN;
; 18   : 
; 19   :         tagLen = 10;

  0003c	53		 push	 ebx
  0003d	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0003e	8b 7d 14	 mov	 edi, DWORD PTR _extraInfo$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 20   :         extraInfo.assign(++cur, 8);

  00041	8d 5a 04	 lea	 ebx, DWORD PTR [edx+4]
  00044	c7 00 0a 00 00
	00		 mov	 DWORD PTR [eax], 10	; 0000000aH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0004a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0004d	83 fa 08	 cmp	 edx, 8
  00050	72 25		 jb	 SHORT $LN20@GetTextTag

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00052	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00054	6a 10		 push	 16			; 00000010H
  00056	53		 push	 ebx
  00057	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00058	c7 47 10 08 00
	00 00		 mov	 DWORD PTR [edi+16], 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  0005f	e8 00 00 00 00	 call	 _memmove
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00067	33 c0		 xor	 eax, eax
  00069	66 89 46 10	 mov	 WORD PTR [esi+16], ax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 21   :         return TEXT_TAG_COLOR;

  0006d	b8 02 00 00 00	 mov	 eax, 2
  00072	5f		 pop	 edi
  00073	5b		 pop	 ebx
  00074	5e		 pop	 esi

; 57   : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN20@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b ca		 mov	 ecx, edx
  00079	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0007e	d1 e9		 shr	 ecx, 1
  00080	2b c1		 sub	 eax, ecx
  00082	3b d0		 cmp	 edx, eax
  00084	76 42		 jbe	 SHORT $LN40@GetTextTag

; 4207 :             return _Max;

  00086	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN47@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 65   :     return _Count * _Ty_size;

  00090	03 c0		 add	 eax, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00098	c7 47 10 08 00
	00 00		 mov	 DWORD PTR [edi+16], 8

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0009f	33 c9		 xor	 ecx, ecx

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  000a1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000a4	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a7	89 45 10	 mov	 DWORD PTR __New_ptr$1[ebp], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000aa	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000ad	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b1	8d 45 10	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000b4	50		 push	 eax
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 21   :         return TEXT_TAG_COLOR;

  000be	b8 02 00 00 00	 mov	 eax, 2
  000c3	5f		 pop	 edi
  000c4	5b		 pop	 ebx
  000c5	5e		 pop	 esi

; 57   : }

  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN40@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000c8	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000cb	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  000d0	3b c6		 cmp	 eax, esi
  000d2	0f 47 f0	 cmova	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000d5	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000d8	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000dd	77 6f		 ja	 SHORT $LN63@GetTextTag
  000df	eb af		 jmp	 SHORT $LN47@GetTextTag
$LN4@GetTextTag:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLib\TextTag.cpp

; 23   :     else if (*cur == L'|')

  000e1	83 f9 7c	 cmp	 ecx, 124		; 0000007cH
  000e4	75 0c		 jne	 SHORT $LN7@GetTextTag

; 24   :     {
; 25   :         tagLen = 2;

  000e6	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 26   :         return TEXT_TAG_TAG;

  000ec	8d 41 85	 lea	 eax, DWORD PTR [ecx-123]
  000ef	5e		 pop	 esi

; 57   : }

  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
$LN7@GetTextTag:

; 27   :     }
; 28   :     else if (*cur == L'r') // restore color

  000f2	83 f9 72	 cmp	 ecx, 114		; 00000072H
  000f5	75 0c		 jne	 SHORT $LN9@GetTextTag

; 29   :     {
; 30   :         tagLen = 2;

  000f7	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 31   :         return TEXT_TAG_RESTORE_COLOR;

  000fd	8d 41 93	 lea	 eax, DWORD PTR [ecx-109]
  00100	5e		 pop	 esi

; 57   : }

  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN9@GetTextTag:

; 32   :     }
; 33   :     else if (*cur == L'H')

  00103	83 f9 48	 cmp	 ecx, 72			; 00000048H
  00106	75 0c		 jne	 SHORT $LN11@GetTextTag

; 34   :     {
; 35   :         tagLen = 2;

  00108	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 36   :         return TEXT_TAG_HYPERLINK_START;

  0010e	8d 41 bb	 lea	 eax, DWORD PTR [ecx-69]
  00111	5e		 pop	 esi

; 57   : }

  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN11@GetTextTag:

; 37   :     }
; 38   :     else if (*cur == L'h') // end of hyperlink

  00114	83 f9 68	 cmp	 ecx, 104		; 00000068H
  00117	75 0c		 jne	 SHORT $LN13@GetTextTag

; 39   :     {
; 40   :         tagLen = 2;

  00119	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 41   :         return TEXT_TAG_HYPERLINK_END;

  0011f	8d 41 9c	 lea	 eax, DWORD PTR [ecx-100]
  00122	5e		 pop	 esi

; 57   : }

  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
$LN13@GetTextTag:

; 42   :     }
; 43   : #ifdef ENABLE_EMOJI_SYSTEM
; 44   : 	else if (*cur == L'E') // emoji |Epath/emo|e

  00125	83 f9 45	 cmp	 ecx, 69			; 00000045H
  00128	75 0c		 jne	 SHORT $LN15@GetTextTag

; 45   : 	{
; 46   : 		tagLen = 2;

  0012a	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 47   : 		return TEXT_TAG_EMOJI_START;

  00130	8d 41 c1	 lea	 eax, DWORD PTR [ecx-63]
  00133	5e		 pop	 esi

; 57   : }

  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
$LN15@GetTextTag:

; 48   : 	}
; 49   : 	else if (*cur == L'e') // end of emoji

  00136	83 f9 65	 cmp	 ecx, 101		; 00000065H
  00139	75 0e		 jne	 SHORT $LN3@GetTextTag

; 50   : 	{
; 51   : 		tagLen = 2;

  0013b	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 52   : 		return TEXT_TAG_EMOJI_END;

  00141	b8 07 00 00 00	 mov	 eax, 7
  00146	5e		 pop	 esi

; 57   : }

  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
$LN3@GetTextTag:

; 10   :         return TEXT_TAG_PLAIN;

  00149	33 c0		 xor	 eax, eax
  0014b	5e		 pop	 esi

; 57   : }

  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
$LN63@GetTextTag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0014e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN61@GetTextTag:
  00153	cc		 int	 3
?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; GetTextTag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z PROC		; std::_Destroy_in_place<wchar_t *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ENDP		; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 12		 jb	 SHORT $LN4@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	33 c0		 xor	 eax, eax
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0002d	66 89 06	 mov	 WORD PTR [esi], ax
  00030	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00031	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
