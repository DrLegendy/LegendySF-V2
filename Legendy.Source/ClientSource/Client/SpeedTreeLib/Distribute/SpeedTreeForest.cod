; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??0CSpeedTreeForest@@QAE@XZ			; CSpeedTreeForest::CSpeedTreeForest
PUBLIC	??1CSpeedTreeForest@@UAE@XZ			; CSpeedTreeForest::~CSpeedTreeForest
PUBLIC	?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z ; CSpeedTreeForest::GetMainTree
PUBLIC	?GetMainTree@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@K@Z ; CSpeedTreeForest::GetMainTree
PUBLIC	?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z ; CSpeedTreeForest::CreateInstance
PUBLIC	?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z ; CSpeedTreeForest::DeleteInstance
PUBLIC	?UpdateSystem@CSpeedTreeForest@@QAEXM@Z		; CSpeedTreeForest::UpdateSystem
PUBLIC	?Clear@CSpeedTreeForest@@QAEXXZ			; CSpeedTreeForest::Clear
PUBLIC	?SetLight@CSpeedTreeForest@@QAEXPBM00@Z		; CSpeedTreeForest::SetLight
PUBLIC	?SetFog@CSpeedTreeForest@@QAEXMM@Z		; CSpeedTreeForest::SetFog
PUBLIC	?SetWindStrength@CSpeedTreeForest@@QAEXM@Z	; CSpeedTreeForest::SetWindStrength
PUBLIC	?SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z	; CSpeedTreeForest::SetupWindMatrices
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::~map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >
PUBLIC	?AdjustExtents@CSpeedTreeForest@@AAEXMMM@Z	; CSpeedTreeForest::AdjustExtents
PUBLIC	??_GCSpeedTreeForest@@UAEPAXI@Z			; CSpeedTreeForest::`scalar deleting destructor'
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_7CSpeedTreeForest@@6B@			; CSpeedTreeForest::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSpeedTreeForest@@6B@			; CSpeedTreeForest::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSpeedTreeForest@@@8			; CSpeedTreeForest `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeForest@@8			; CSpeedTreeForest::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeForest@@8			; CSpeedTreeForest::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeForest@@8		; CSpeedTreeForest::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?SetTime@CSpeedTreeRT@@SAXM@Z:PROC		; CSpeedTreeRT::SetTime
EXTRN	?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z:PROC	; CSpeedTreeRT::SetWindStrength
EXTRN	?SetNumWindMatrices@CSpeedTreeRT@@SAXI@Z:PROC	; CSpeedTreeRT::SetNumWindMatrices
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::RegisterBoundingSphere
EXTRN	??0CSpeedTreeWrapper@@QAE@XZ:PROC		; CSpeedTreeWrapper::CSpeedTreeWrapper
EXTRN	?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z:PROC ; CSpeedTreeWrapper::LoadTree
EXTRN	?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z:PROC ; CSpeedTreeWrapper::GetInstances
EXTRN	?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ:PROC ; CSpeedTreeWrapper::MakeInstance
EXTRN	?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z:PROC ; CSpeedTreeWrapper::DeleteInstance
EXTRN	??_ECSpeedTreeForest@@UAEPAXI@Z:PROC		; CSpeedTreeForest::`vector deleting destructor'
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Destroy@CMappedFile@@QAEXXZ:PROC		; CMappedFile::Destroy
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?fLastTime@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4MA
_BSS	SEGMENT
?fLastTime@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4MA DD 01H DUP (?) ; `CSpeedTreeForest::UpdateSystem'::`2'::fLastTime
_BSS	ENDS
;	COMDAT ?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA DD 01H DUP (?) ; `CSpeedTreeForest::UpdateSystem'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA
_BSS	SEGMENT
?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA DD 04H DUP (?) ; `CSpeedTreeForest::SetupWindMatrices'::`2'::afMatrixTimes
_BSS	ENDS
;	COMDAT ?fTimeOfLastCall@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA
_BSS	SEGMENT
?fTimeOfLastCall@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA DD 01H DUP (?) ; `CSpeedTreeForest::SetupWindMatrices'::`2'::fTimeOfLastCall
_BSS	ENDS
;	COMDAT ?fOldStrength@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA
_BSS	SEGMENT
?fOldStrength@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA DD 01H DUP (?) ; `CSpeedTreeForest::SetupWindMatrices'::`2'::fOldStrength
_BSS	ENDS
;	COMDAT ?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA DD 01H DUP (?) ; `CSpeedTreeForest::SetupWindMatrices'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeForest@@8 DD FLAT:??_R0?AVCSpeedTreeForest@@@8 ; CSpeedTreeForest::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeForest@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R2CSpeedTreeForest@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeForest@@8 ; CSpeedTreeForest::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R3CSpeedTreeForest@@8 DD 00H				; CSpeedTreeForest::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSpeedTreeForest@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeForest@@@8
data$r	SEGMENT
??_R0?AVCSpeedTreeForest@@@8 DD FLAT:??_7type_info@@6B@	; CSpeedTreeForest `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeForest@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSpeedTreeForest@@6B@
rdata$r	SEGMENT
??_R4CSpeedTreeForest@@6B@ DD 00H			; CSpeedTreeForest::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeForest@@@8
	DD	FLAT:??_R3CSpeedTreeForest@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7CSpeedTreeForest@@6B@
CONST	SEGMENT
??_7CSpeedTreeForest@@6B@ DD FLAT:??_R4CSpeedTreeForest@@6B@ ; CSpeedTreeForest::`vftable'
	DD	FLAT:??_ECSpeedTreeForest@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCSpeedTreeWrapper@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$4
__ehfuncinfo$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSpeedTreeForest@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSpeedTreeForest@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSpeedTreeForest@@QAE@XZ$0
__ehfuncinfo$??0CSpeedTreeForest@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSpeedTreeForest@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1704 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1708 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1716 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSpeedTreeForest@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSpeedTreeForest@@UAEPAXI@Z PROC			; CSpeedTreeForest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSpeedTreeForest@@UAE@XZ ; CSpeedTreeForest::~CSpeedTreeForest
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSpeedTreeForest@@UAEPAXI@Z ENDP			; CSpeedTreeForest::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?AdjustExtents@CSpeedTreeForest@@AAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?AdjustExtents@CSpeedTreeForest@@AAEXMMM@Z PROC		; CSpeedTreeForest::AdjustExtents, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  :     // min
; 141  :     m_afForestExtents[0] = __min(m_afForestExtents[0], x);

  00003	f3 0f 10 41 4c	 movss	 xmm0, DWORD PTR [ecx+76]
  00008	f3 0f 5d 45 08	 minss	 xmm0, DWORD PTR _x$[ebp]
  0000d	f3 0f 11 41 4c	 movss	 DWORD PTR [ecx+76], xmm0

; 142  :     m_afForestExtents[1] = __min(m_afForestExtents[1], y);

  00012	f3 0f 10 41 50	 movss	 xmm0, DWORD PTR [ecx+80]
  00017	f3 0f 5d 45 0c	 minss	 xmm0, DWORD PTR _y$[ebp]
  0001c	f3 0f 11 41 50	 movss	 DWORD PTR [ecx+80], xmm0

; 143  :     m_afForestExtents[2] = __min(m_afForestExtents[2], z);

  00021	f3 0f 10 41 54	 movss	 xmm0, DWORD PTR [ecx+84]
  00026	f3 0f 5d 45 10	 minss	 xmm0, DWORD PTR _z$[ebp]
  0002b	f3 0f 11 41 54	 movss	 DWORD PTR [ecx+84], xmm0

; 144  : 
; 145  :     // max
; 146  :     m_afForestExtents[3] = __max(m_afForestExtents[3], x);

  00030	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00035	f3 0f 5f 45 08	 maxss	 xmm0, DWORD PTR _x$[ebp]
  0003a	f3 0f 11 41 58	 movss	 DWORD PTR [ecx+88], xmm0

; 147  :     m_afForestExtents[4] = __max(m_afForestExtents[4], y);

  0003f	f3 0f 10 41 5c	 movss	 xmm0, DWORD PTR [ecx+92]
  00044	f3 0f 5f 45 0c	 maxss	 xmm0, DWORD PTR _y$[ebp]
  00049	f3 0f 11 41 5c	 movss	 DWORD PTR [ecx+92], xmm0

; 148  :     m_afForestExtents[5] = __max(m_afForestExtents[5], z);

  0004e	f3 0f 10 41 60	 movss	 xmm0, DWORD PTR [ecx+96]
  00053	f3 0f 5f 45 10	 maxss	 xmm0, DWORD PTR _z$[ebp]
  00058	f3 0f 11 41 60	 movss	 DWORD PTR [ecx+96], xmm0

; 149  : }

  0005d	5d		 pop	 ebp
  0005e	c2 0c 00	 ret	 12			; 0000000cH
?AdjustExtents@CSpeedTreeForest@@AAEXMMM@Z ENDP		; CSpeedTreeForest::AdjustExtents
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::~map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >
??1?$map@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::~map<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1196 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z
_TEXT	SEGMENT
tv556 = -16						; size = 16
_fTimeInSecs$ = 8					; size = 4
?SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z PROC	; CSpeedTreeForest::SetupWindMatrices, COMDAT
; _this$ = ecx

; 176  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 177  : 	// matrix computational data
; 178  : 	static float afMatrixTimes[c_nNumWindMatrices] = { 0.0f };
; 179  : 	static float afFrequencies[c_nNumWindMatrices][2] =
; 180  : 	{
; 181  : 		{ 0.15f, 0.17f },
; 182  : 		{ 0.25f, 0.15f },
; 183  : 		{ 0.19f, 0.05f },
; 184  : 		{ 0.15f, 0.22f }
; 185  : 	};
; 186  : 
; 187  : 	// compute time since last call
; 188  : 	static float fTimeOfLastCall = 0.0f;
; 189  : 	float fTimeSinceLastCall = fTimeInSecs - fTimeOfLastCall;

  00019	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fTimeInSecs$[ebx]

; 190  : 	fTimeOfLastCall = fTimeInSecs;
; 191  : 
; 192  : 	// wind strength
; 193  : 	static float fOldStrength = m_fWindStrength;

  0001e	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00024	0f 28 c8	 movaps	 xmm1, xmm0
  00027	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR ?fTimeOfLastCall@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA
  0002f	56		 push	 esi
  00030	8b f1		 mov	 esi, ecx
  00032	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?fTimeOfLastCall@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA, xmm0
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index

; 194  : 
; 195  : 	// increment matrix times
; 196  : 	for (int i = 0; i < c_nNumWindMatrices; ++i)

  00040	0f c6 c9 00	 shufps	 xmm1, xmm1, 0
  00044	0f 29 4d f0	 movaps	 XMMWORD PTR tv556[ebp], xmm1
  00048	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA
  00050	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00056	7f 6e		 jg	 SHORT $LN42@SetupWindM
  00058	eb 0a		 jmp	 SHORT $LN2@SetupWindM
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL40@SetupWindM:

; 197  : 		afMatrixTimes[i] += fTimeSinceLastCall;

  00060	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR tv556[ebp]
$LN2@SetupWindM:
  00064	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA

; 198  : 
; 199  : 	// compute maximum branch throw
; 200  : 	float fBaseAngle = m_fWindStrength * 35.0f;

  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA
  00070	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?fOldStrength@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA
  00078	0f 57 db	 xorps	 xmm3, xmm3
  0007b	0f 58 c8	 addps	 xmm1, xmm0
  0007e	0f 11 0d 00 00
	00 00		 movups	 XMMWORD PTR ?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA, xmm1
  00085	f3 0f 10 4e 64	 movss	 xmm1, DWORD PTR [esi+100]
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL8@SetupWindM:

; 204  : 	{
; 205  : 		// adjust time to prevent "jumping"
; 206  : 		if (m_fWindStrength != 0.0f)

  00090	0f 2e cb	 ucomiss xmm1, xmm3
  00093	9f		 lahf
  00094	f6 c4 44	 test	 ah, 68			; 00000044H
  00097	7b 10		 jnp	 SHORT $LN35@SetupWindM

; 207  : 			afMatrixTimes[j] = (afMatrixTimes[j] * fOldStrength) / m_fWindStrength;

  00099	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0009d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000a1	f3 0f 5e c1	 divss	 xmm0, xmm1
  000a5	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN35@SetupWindM:

; 201  : 
; 202  : 	// build rotation matrices
; 203  : 	for (int j = 0; j < c_nNumWindMatrices; ++j)

  000a9	83 c1 04	 add	 ecx, 4
  000ac	81 f9 10 00 00
	00		 cmp	 ecx, OFFSET ?afMatrixTimes@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4PAMA+16
  000b2	7c dc		 jl	 SHORT $LL8@SetupWindM

; 208  : 
; 209  : 		// compute percentages for each axis
; 210  : 		float fBaseFreq = m_fWindStrength * 20.0f;
; 211  : 		float fXPercent = sinf(fBaseFreq * afFrequencies[j % c_nNumWindMatrices][0] * afMatrixTimes[j]);
; 212  : 		float fYPercent = cosf(fBaseFreq * afFrequencies[j % c_nNumWindMatrices][1] * afMatrixTimes[j]);
; 213  : 
; 214  : 		// build compound rotation matrix (rotate on 'x' then on 'y')
; 215  : 		const float c_fDeg2Rad = 57.2957795f;
; 216  :         float fSinX = sinf(fBaseAngle * fXPercent / c_fDeg2Rad);
; 217  :         float fSinY = sinf(fBaseAngle * fYPercent / c_fDeg2Rad);
; 218  :         float fCosX = cosf(fBaseAngle * fXPercent / c_fDeg2Rad);
; 219  :         float fCosY = cosf(fBaseAngle * fYPercent / c_fDeg2Rad);
; 220  : 
; 221  :         float afMatrix[16] = { 0.0f };
; 222  :         afMatrix[0] = fCosY;
; 223  :         afMatrix[2] = -fSinY;
; 224  :         afMatrix[4] = fSinX * fSinY;
; 225  :         afMatrix[5] = fCosX;
; 226  :         afMatrix[6] = fSinX * fCosY;
; 227  :         afMatrix[8] = fSinY * fCosX;
; 228  :         afMatrix[9] = -fSinX;
; 229  :         afMatrix[10] = fCosX * fCosY;
; 230  :         afMatrix[15] = 1.0f;
; 231  : 
; 232  : 		#ifdef WRAPPER_USE_CPU_WIND
; 233  : 			CSpeedTreeRT::SetWindMatrix(j, afMatrix);
; 234  : 		#endif
; 235  : 
; 236  : 		#ifdef WRAPPER_USE_GPU_WIND
; 237  : 			// graphics API specific
; 238  : 			UploadWindMatrix(c_nVertexShader_WindMatrices + j * 4, afMatrix);
; 239  : 		#endif
; 240  : 	}
; 241  : 
; 242  : 	// track wind strength
; 243  : 	fOldStrength = m_fWindStrength;

  000b4	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?fOldStrength@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA, xmm1

; 244  : }

  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	8b e3		 mov	 esp, ebx
  000c2	5b		 pop	 ebx
  000c3	c2 04 00	 ret	 4
$LN42@SetupWindM:

; 190  : 	fTimeOfLastCall = fTimeInSecs;
; 191  : 
; 192  : 	// wind strength
; 193  : 	static float fOldStrength = m_fWindStrength;

  000c6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA
  000cb	e8 00 00 00 00	 call	 __Init_thread_header
  000d0	83 c4 04	 add	 esp, 4
  000d3	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA, -1
  000da	75 84		 jne	 SHORT $LL40@SetupWindM
  000dc	f3 0f 10 46 64	 movss	 xmm0, DWORD PTR [esi+100]
  000e1	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4HA
  000e6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?fOldStrength@?1??SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z@4MA, xmm0
  000ee	e8 00 00 00 00	 call	 __Init_thread_footer
  000f3	83 c4 04	 add	 esp, 4
  000f6	e9 65 ff ff ff	 jmp	 $LL40@SetupWindM
?SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z ENDP	; CSpeedTreeForest::SetupWindMatrices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?SetWindStrength@CSpeedTreeForest@@QAEXM@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_uiCount$ = -4						; size = 4
_itor$1$ = 8						; size = 4
_fStrength$ = 8						; size = 4
?SetWindStrength@CSpeedTreeForest@@QAEXM@Z PROC		; CSpeedTreeForest::SetWindStrength, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 155  : 	if (m_fWindStrength == fStrength)

  00006	f3 0f 10 41 64	 movss	 xmm0, DWORD PTR [ecx+100]
  0000b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fStrength$[ebp]
  00010	0f 2e c1	 ucomiss xmm0, xmm1
  00013	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	9f		 lahf
  00017	f6 c4 44	 test	 ah, 68			; 00000044H
  0001a	0f 8b c5 00 00
	00		 jnp	 $LN3@SetWindStr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00020	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 158  : 	m_fWindStrength = fStrength;

  00023	56		 push	 esi
  00024	f3 0f 11 49 64	 movss	 DWORD PTR [ecx+100], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00029	8b 30		 mov	 esi, DWORD PTR [eax]
  0002b	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 163  : 	while (itor != m_pMainTreeMap.end())

  0002d	0f 84 b1 00 00
	00		 je	 $LN65@SetWindStr
  00033	53		 push	 ebx
  00034	57		 push	 edi
$LL2@SetWindStr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00035	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 286  :         _Tree_iterator _Tmp = *this;

  00038	8b c6		 mov	 eax, esi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0003a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003e	74 27		 je	 SHORT $LN36@SetWindStr

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00040	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 17		 jne	 SHORT $LN64@SetWindStr
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL34@SetWindStr:
  00050	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00053	75 0b		 jne	 SHORT $LN64@SetWindStr

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00055	8b f1		 mov	 esi, ecx
  00057	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0005a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005e	74 f0		 je	 SHORT $LL34@SetWindStr
$LN64@SetWindStr:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  00060	8b f1		 mov	 esi, ecx
  00062	89 75 08	 mov	 DWORD PTR _itor$1$[ebp], esi

; 59   :         } else {

  00065	eb 1c		 jmp	 SHORT $LN41@SetWindStr
$LN36@SetWindStr:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00067	8b f1		 mov	 esi, ecx
  00069	89 75 08	 mov	 DWORD PTR _itor$1$[ebp], esi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  0006c	8b 16		 mov	 edx, DWORD PTR [esi]
  0006e	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00072	75 0f		 jne	 SHORT $LN41@SetWindStr
$LL40@SetWindStr:
  00074	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 452  :             _Pnode = _Pnode->_Left;

  00076	8b f2		 mov	 esi, edx
  00078	89 75 08	 mov	 DWORD PTR _itor$1$[ebp], esi
  0007b	8b d1		 mov	 edx, ecx
  0007d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00081	74 f1		 je	 SHORT $LL40@SetWindStr
$LN41@SetWindStr:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 166  : 		CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  00083	8d 4d fc	 lea	 ecx, DWORD PTR _uiCount$[ebp]
  00086	51		 push	 ecx
  00087	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008a	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 167  : 
; 168  : 		for (UINT i = 0; i < uiCount; ++i)

  0008f	33 ff		 xor	 edi, edi
  00091	8b d8		 mov	 ebx, eax
  00093	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  00096	76 3e		 jbe	 SHORT $LN5@SetWindStr
  00098	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
  0009b	0f 1f 44 00 00	 npad	 5
$LL6@SetWindStr:

; 169  : 			ppInstances[i]->GetSpeedTree()->SetWindStrength(m_fWindStrength);

  000a0	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  000a3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a6	f3 0f 10 46 64	 movss	 xmm0, DWORD PTR [esi+100]
  000ab	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]
  000b1	c7 44 24 08 00
	00 80 bf	 mov	 DWORD PTR [esp+8], -1082130432 ; bf800000H
  000b9	c7 44 24 04 00
	00 80 bf	 mov	 DWORD PTR [esp+4], -1082130432 ; bf800000H
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	e8 00 00 00 00	 call	 ?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z ; CSpeedTreeRT::SetWindStrength
  000cb	47		 inc	 edi
  000cc	dd d8		 fstp	 ST(0)
  000ce	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  000d1	72 cd		 jb	 SHORT $LL6@SetWindStr
  000d3	8b 75 08	 mov	 esi, DWORD PTR _itor$1$[ebp]
$LN5@SetWindStr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  000d9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 163  : 	while (itor != m_pMainTreeMap.end())

  000dc	0f 85 53 ff ff
	ff		 jne	 $LL2@SetWindStr
  000e2	5f		 pop	 edi
  000e3	5b		 pop	 ebx
$LN65@SetWindStr:
  000e4	5e		 pop	 esi
$LN3@SetWindStr:

; 170  : 	}
; 171  : }

  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
?SetWindStrength@CSpeedTreeForest@@QAEXM@Z ENDP		; CSpeedTreeForest::SetWindStrength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?SetFog@CSpeedTreeForest@@QAEXMM@Z
_TEXT	SEGMENT
_fFogNear$ = 8						; size = 4
_fFogFar$ = 12						; size = 4
?SetFog@CSpeedTreeForest@@QAEXMM@Z PROC			; CSpeedTreeForest::SetFog, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 	const float c_fFogLinearScale = (1.0f / (fFogFar - fFogNear));
; 309  : 
; 310  : 	m_afFog[0] = fFogNear;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fFogNear$[ebp]

; 311  : 	m_afFog[1] = fFogFar;

  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fFogFar$[ebp]
  0000d	f3 0f 11 49 40	 movss	 DWORD PTR [ecx+64], xmm1
  00012	f3 0f 5c c8	 subss	 xmm1, xmm0
  00016	f3 0f 11 41 3c	 movss	 DWORD PTR [ecx+60], xmm0
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000

; 312  : 	m_afFog[2] = c_fFogLinearScale;
; 313  : 	m_afFog[3] = 0.0f;

  00023	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  0002a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0002e	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0

; 314  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetFog@CSpeedTreeForest@@QAEXMM@Z ENDP			; CSpeedTreeForest::SetFog
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?SetLight@CSpeedTreeForest@@QAEXPBM00@Z
_TEXT	SEGMENT
_afDirection$ = 8					; size = 4
_afAmbient$ = 12					; size = 4
_afDiffuse$ = 16					; size = 4
?SetLight@CSpeedTreeForest@@QAEXPBM00@Z PROC		; CSpeedTreeForest::SetLight, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 	m_afLighting[0] = afDirection[0];

  00003	8b 55 08	 mov	 edx, DWORD PTR _afDirection$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 291  : 	m_afLighting[1] = afDirection[1];
; 292  : 	m_afLighting[2] = afDirection[2];
; 293  : 	m_afLighting[3] = 1.0f;
; 294  : 
; 295  : 	m_afLighting[4] = afAmbient[0];

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _afAmbient$[ebp]
  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001d	c7 46 18 00 00
	80 3f		 mov	 DWORD PTR [esi+24], 1065353216 ; 3f800000H
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00029	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00032	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00035	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 296  : 	m_afLighting[5] = afAmbient[1];
; 297  : 	m_afLighting[6] = afAmbient[2];
; 298  : 	m_afLighting[7] = afAmbient[3];
; 299  : 
; 300  : 	m_afLighting[8] = afDiffuse[0];

  00038	8b 4d 10	 mov	 ecx, DWORD PTR _afDiffuse$[ebp]
  0003b	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00049	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004c	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0004f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00052	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00055	5e		 pop	 esi

; 301  : 	m_afLighting[9] = afDiffuse[1];
; 302  : 	m_afLighting[10] = afDiffuse[2];
; 303  : 	m_afLighting[11] = afDiffuse[3];
; 304  : }

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
?SetLight@CSpeedTreeForest@@QAEXPBM00@Z ENDP		; CSpeedTreeForest::SetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?Clear@CSpeedTreeForest@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_pMainTree$1$ = -8					; size = 4
_uiCount$ = -4						; size = 4
?Clear@CSpeedTreeForest@@QAEXXZ PROC			; CSpeedTreeForest::Clear, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00008	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 40   : {

  0000b	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000c	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0000e	89 5d f4	 mov	 DWORD PTR _this$1$[ebp], ebx

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00011	8b 37		 mov	 esi, DWORD PTR [edi]
  00013	3b f7		 cmp	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 44   : 	while (itor != m_pMainTreeMap.end())

  00015	0f 84 94 00 00
	00		 je	 $LN3@Clear
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@Clear:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00020	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 286  :         _Tree_iterator _Tmp = *this;

  00023	8b c6		 mov	 eax, esi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 1d		 je	 SHORT $LN39@Clear

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0002b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00032	75 10		 jne	 SHORT $LN85@Clear
$LL37@Clear:
  00034	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00037	75 0b		 jne	 SHORT $LN85@Clear

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00039	8b f1		 mov	 esi, ecx
  0003b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	74 f0		 je	 SHORT $LL37@Clear
$LN85@Clear:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  00044	8b f1		 mov	 esi, ecx

; 59   :         } else {

  00046	eb 16		 jmp	 SHORT $LN44@Clear
$LN39@Clear:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00048	8b f1		 mov	 esi, ecx

; 451  :         while (!_Pnode->_Left->_Isnil) {

  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00050	75 0c		 jne	 SHORT $LN44@Clear
$LL43@Clear:
  00052	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 452  :             _Pnode = _Pnode->_Left;

  00054	8b f2		 mov	 esi, edx
  00056	8b d1		 mov	 edx, ecx
  00058	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005c	74 f4		 je	 SHORT $LL43@Clear
$LN44@Clear:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 46   : 		CSpeedTreeWrapper * pMainTree = (itor++)->second;

  0005e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 47   : 		CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  00061	8d 4d fc	 lea	 ecx, DWORD PTR _uiCount$[ebp]
  00064	51		 push	 ecx
  00065	8b c8		 mov	 ecx, eax
  00067	89 45 f8	 mov	 DWORD PTR _pMainTree$1$[ebp], eax
  0006a	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 48   : 
; 49   : 		for (UINT i = 0; i < uiCount; ++i)

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _uiCount$[ebp]
  00072	33 ff		 xor	 edi, edi
  00074	8b d8		 mov	 ebx, eax
  00076	85 d2		 test	 edx, edx
  00078	74 1b		 je	 SHORT $LN5@Clear
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Clear:

; 50   : 			delete ppInstances[i];

  00080	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00083	85 c9		 test	 ecx, ecx
  00085	74 09		 je	 SHORT $LN4@Clear
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	6a 01		 push	 1
  0008b	ff 10		 call	 DWORD PTR [eax]
  0008d	8b 55 fc	 mov	 edx, DWORD PTR _uiCount$[ebp]
$LN4@Clear:

; 48   : 
; 49   : 		for (UINT i = 0; i < uiCount; ++i)

  00090	47		 inc	 edi
  00091	3b fa		 cmp	 edi, edx
  00093	72 eb		 jb	 SHORT $LL6@Clear
$LN5@Clear:

; 51   : 
; 52   : 		delete pMainTree;

  00095	8b 4d f8	 mov	 ecx, DWORD PTR _pMainTree$1$[ebp]
  00098	85 c9		 test	 ecx, ecx
  0009a	74 06		 je	 SHORT $LN10@Clear
  0009c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009e	6a 01		 push	 1
  000a0	ff 10		 call	 DWORD PTR [eax]
$LN10@Clear:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000a2	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000a5	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  000a7	3b f7		 cmp	 esi, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 44   : 	while (itor != m_pMainTreeMap.end())

  000a9	0f 85 71 ff ff
	ff		 jne	 $LL2@Clear
$LN3@Clear:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000af	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000b2	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000b6	75 20		 jne	 SHORT $LN56@Clear
$LL55@Clear:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  000b8	ff 76 08	 push	 DWORD PTR [esi+8]
  000bb	8b cb		 mov	 ecx, ebx
  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000c3	8b c6		 mov	 eax, esi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  000c5	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  000c7	6a 18		 push	 24			; 00000018H
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cf	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000d2	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000d6	74 e0		 je	 SHORT $LL55@Clear
$LN56@Clear:

; 1449 :         _Head->_Parent  = _Head;

  000d8	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1450 :         _Head->_Left    = _Head;

  000db	89 3f		 mov	 DWORD PTR [edi], edi

; 1451 :         _Head->_Right   = _Head;

  000dd	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1452 :         _Scary->_Mysize = 0;

  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  000e9	5b		 pop	 ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 56   : }

  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
?Clear@CSpeedTreeForest@@QAEXXZ ENDP			; CSpeedTreeForest::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z
_TEXT	SEGMENT
_fCurrentTime$ = 8					; size = 4
?UpdateSystem@CSpeedTreeForest@@QAEXM@Z PROC		; CSpeedTreeForest::UpdateSystem, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	static float fLastTime = fCurrentTime;

  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA
  0001a	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00020	7f 3d		 jg	 SHORT $LN5@UpdateSyst
$LN2@UpdateSyst:

; 129  : 	float fElapsedTime = fCurrentTime - fLastTime;

  00022	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fCurrentTime$[ebp]
  00027	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?fLastTime@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4MA

; 130  : 	CSpeedTreeRT::SetTime(fElapsedTime);

  0002f	51		 push	 ecx
  00030	f3 0f 11 45 08	 movss	 DWORD PTR _fCurrentTime$[ebp], xmm0
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	e8 00 00 00 00	 call	 ?SetTime@CSpeedTreeRT@@SAXM@Z ; CSpeedTreeRT::SetTime

; 131  : 
; 132  : 	m_fAccumTime += fElapsedTime;

  0003f	f3 0f 10 46 68	 movss	 xmm0, DWORD PTR [esi+104]

; 133  : 	SetupWindMatrices(m_fAccumTime);

  00044	8b ce		 mov	 ecx, esi
  00046	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fCurrentTime$[ebp]
  0004b	f3 0f 11 46 68	 movss	 DWORD PTR [esi+104], xmm0
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?SetupWindMatrices@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::SetupWindMatrices
  0005a	5e		 pop	 esi

; 134  : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN5@UpdateSyst:

; 128  : 	static float fLastTime = fCurrentTime;

  0005f	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA
  00064	e8 00 00 00 00	 call	 __Init_thread_header
  00069	83 c4 04	 add	 esp, 4
  0006c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA, -1
  00073	75 ad		 jne	 SHORT $LN2@UpdateSyst
  00075	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fCurrentTime$[ebp]
  0007a	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4HA
  0007f	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?fLastTime@?1??UpdateSystem@CSpeedTreeForest@@QAEXM@Z@4MA, xmm1
  00087	e8 00 00 00 00	 call	 __Init_thread_footer
  0008c	83 c4 04	 add	 esp, 4
  0008f	eb 91		 jmp	 SHORT $LN2@UpdateSyst
?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ENDP		; CSpeedTreeForest::UpdateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z PROC ; CSpeedTreeForest::DeleteInstance, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	if (!pInstance)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pInstance$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 13		 je	 SHORT $LN1@DeleteInst

; 116  : 		return;
; 117  : 
; 118  : 	CSpeedTreeWrapper * pParentTree = pInstance->InstanceOf();

  0000a	8b 88 60 02 00
	00		 mov	 ecx, DWORD PTR [eax+608]

; 119  : 
; 120  : 	if (!pParentTree)

  00010	85 c9		 test	 ecx, ecx
  00012	74 09		 je	 SHORT $LN1@DeleteInst

; 121  : 		return;
; 122  : 
; 123  : 	pParentTree->DeleteInstance(pInstance);

  00014	89 45 08	 mov	 DWORD PTR _pInstance$[ebp], eax

; 124  : }

  00017	5d		 pop	 ebp

; 121  : 		return;
; 122  : 
; 123  : 	pParentTree->DeleteInstance(pInstance);

  00018	e9 00 00 00 00	 jmp	 ?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z ; CSpeedTreeWrapper::DeleteInstance
$LN1@DeleteInst:

; 124  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z ENDP ; CSpeedTreeForest::DeleteInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_dwTreeCRC$ = 20					; size = 4
_pMainTree$ = 24					; size = 4
_c_szTreeName$ = 24					; size = 4
?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z PROC ; CSpeedTreeForest::CreateInstance, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  : 	CSpeedTreeWrapper * pMainTree;
; 104  : 	if (!GetMainTree(dwTreeCRC, &pMainTree, c_szTreeName))

  00003	ff 75 18	 push	 DWORD PTR _c_szTreeName$[ebp]
  00006	8d 45 18	 lea	 eax, DWORD PTR _pMainTree$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 14	 push	 DWORD PTR _dwTreeCRC$[ebp]
  0000d	e8 00 00 00 00	 call	 ?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z ; CSpeedTreeForest::GetMainTree
  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $LN2@CreateInst

; 111  : }

  00016	5d		 pop	 ebp
  00017	c2 14 00	 ret	 20			; 00000014H
$LN2@CreateInst:

; 105  : 		return NULL;
; 106  : 
; 107  : 	CSpeedTreeWrapper* pTreeInst = pMainTree->MakeInstance();

  0001a	8b 4d 18	 mov	 ecx, DWORD PTR _pMainTree$[ebp]
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ ; CSpeedTreeWrapper::MakeInstance

; 108  : 	pTreeInst->SetPosition(x, y, z);

  00023	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00028	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0002b	8b f0		 mov	 esi, eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00035	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0003a	8b 16		 mov	 edx, DWORD PTR [esi]
  0003c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	ff 52 3c	 call	 DWORD PTR [edx+60]

; 109  : 	pTreeInst->RegisterBoundingSphere();

  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere

; 110  : 	return pTreeInst;

  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi

; 111  : }

  00059	5d		 pop	 ebp
  0005a	c2 14 00	 ret	 20			; 00000014H
?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z ENDP ; CSpeedTreeForest::CreateInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?GetMainTree@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@K@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwCRC$ = 8						; size = 4
?GetMainTree@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@K@Z PROC ; CSpeedTreeForest::GetMainTree, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  0000a	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 60   : 	TTreeMap::iterator itor = m_pMainTreeMap.find(dwCRC);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00020	75 16		 jne	 SHORT $LN38@GetMainTre
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _dwCRC$[ebp]
  00025	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0e		 jb	 SHORT $LN38@GetMainTre

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 06		 cmp	 eax, DWORD PTR [esi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 62   : 	if (itor == m_pMainTreeMap.end())

  0002c	74 0a		 je	 SHORT $LN38@GetMainTre

; 64   : 
; 65   : 	return itor->second;

  0002e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00031	5e		 pop	 esi

; 66   : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN38@GetMainTre:

; 63   : 		return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi

; 66   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetMainTree@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@K@Z ENDP ; CSpeedTreeForest::GetMainTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z
_TEXT	SEGMENT
$T2 = -384						; size = 12
__Loc$3 = -372						; size = 12
__Loc$4 = -372						; size = 12
_ppMainTree$GSCopy$1$ = -360				; size = 4
_c_pvData$5 = -356					; size = 4
$T6 = -352						; size = 8
$T7 = -352						; size = 8
$T8 = -348						; size = 4
_c_pszFileName$GSCopy$1$ = -344				; size = 4
__Myhead$9 = -344					; size = 4
_file$10 = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwCRC$ = 8						; size = 4
_ppMainTree$ = 12					; size = 4
_c_pszFileName$ = 16					; size = 4
?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z PROC ; CSpeedTreeForest::GetMainTree, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppMainTree$[ebp]

; 70   : 	TTreeMap::iterator itor = m_pMainTreeMap.find(dwCRC);

  00031	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  00034	89 85 98 fe ff
	ff		 mov	 DWORD PTR _ppMainTree$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0003a	8b cb		 mov	 ecx, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 69   : {

  0003c	8b 45 10	 mov	 eax, DWORD PTR _c_pszFileName$[ebp]
  0003f	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00045	8d 45 08	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  00048	50		 push	 eax
  00049	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR __Loc$4[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00055	8b bd 94 fe ff
	ff		 mov	 edi, DWORD PTR __Loc$4[ebp+8]
  0005b	8b 75 08	 mov	 esi, DWORD PTR _dwCRC$[ebp]
  0005e	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00062	75 05		 jne	 SHORT $LN17@GetMainTre
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00064	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00067	73 02		 jae	 SHORT $LN16@GetMainTre
$LN17@GetMainTre:

; 1463 :         return _Get_scary()->_Myhead;

  00069	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN16@GetMainTre:

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0006b	3b 3b		 cmp	 edi, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 74   : 	if (itor != m_pMainTreeMap.end())

  0006d	74 15		 je	 SHORT $LN2@GetMainTre

; 96   : 
; 97   : 	*ppMainTree = pTree;

  0006f	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _ppMainTree$GSCopy$1$[ebp]
  00075	8b 7f 14	 mov	 edi, DWORD PTR [edi+20]
  00078	89 38		 mov	 DWORD PTR [eax], edi

; 98   : 	return TRUE;

  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	e9 b1 00 00 00	 jmp	 $LN1@GetMainTre
$LN2@GetMainTre:

; 75   : 		pTree = itor->second;
; 76   : 	else
; 77   : 	{
; 78   : 		CMappedFile file;

  00084	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  0008a	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 79   : 		LPCVOID c_pvData;
; 80   : 
; 81   : 		if (!CEterPackManager::Instance().Get(file, c_pszFileName, &c_pvData))

  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00095	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$5[ebp]
  0009b	50		 push	 eax
  0009c	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  000a2	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$10[ebp]
  000a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  000b5	84 c0		 test	 al, al
  000b7	74 6f		 je	 SHORT $LN9@GetMainTre

; 82   : 			return FALSE;
; 83   : 
; 84   : 		pTree = new CSpeedTreeWrapper;

  000b9	68 e4 03 00 00	 push	 996			; 000003e4H
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c3	83 c4 04	 add	 esp, 4
  000c6	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  000cc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d0	85 c0		 test	 eax, eax
  000d2	74 0b		 je	 SHORT $LN7@GetMainTre
  000d4	8b c8		 mov	 ecx, eax
  000d6	e8 00 00 00 00	 call	 ??0CSpeedTreeWrapper@@QAE@XZ ; CSpeedTreeWrapper::CSpeedTreeWrapper
  000db	8b f8		 mov	 edi, eax
  000dd	eb 02		 jmp	 SHORT $LN8@GetMainTre
$LN7@GetMainTre:
  000df	33 ff		 xor	 edi, edi
$LN8@GetMainTre:

; 85   : 
; 86   : 		if (!pTree->LoadTree(c_pszFileName, (const BYTE *) c_pvData, file.Size()))

  000e1	83 ec 08	 sub	 esp, 8
  000e4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e8	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  000ee	c7 44 24 04 00
	00 80 bf	 mov	 DWORD PTR [esp+4], -1082130432 ; bf800000H
  000f6	c7 04 24 00 00
	80 bf		 mov	 DWORD PTR [esp], -1082130432 ; bf800000H
  000fd	6a 01		 push	 1
  000ff	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00104	50		 push	 eax
  00105	ff b5 9c fe ff
	ff		 push	 DWORD PTR _c_pvData$5[ebp]
  0010b	8b cf		 mov	 ecx, edi
  0010d	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  00113	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z ; CSpeedTreeWrapper::LoadTree
  00118	84 c0		 test	 al, al
  0011a	75 37		 jne	 SHORT $LN5@GetMainTre

; 87   : 		{
; 88   : 			delete pTree;

  0011c	85 ff		 test	 edi, edi
  0011e	74 08		 je	 SHORT $LN9@GetMainTre
  00120	8b 07		 mov	 eax, DWORD PTR [edi]
  00122	8b cf		 mov	 ecx, edi
  00124	6a 01		 push	 1
  00126	ff 10		 call	 DWORD PTR [eax]
$LN9@GetMainTre:

; 89   : 			return FALSE;

  00128	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  0012e	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00133	33 c0		 xor	 eax, eax
$LN1@GetMainTre:

; 99   : }

  00135	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetMainTre:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  00153	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00159	89 b5 a0 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  0015f	50		 push	 eax
  00160	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00166	89 bd a4 fe ff
	ff		 mov	 DWORD PTR $T7[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  0016c	50		 push	 eax
  0016d	8b cb		 mov	 ecx, ebx
  0016f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::_Find_lower_bound<unsigned long>
  00174	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00178	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0017b	66 0f d6 85 8c
	fe ff ff	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00183	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00187	75 09		 jne	 SHORT $LN59@GetMainTre
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00189	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0018c	0f 83 89 00 00
	00		 jae	 $LN105@GetMainTre
$LN59@GetMainTre:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00192	81 7b 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+4], 178956970 ; 0aaaaaaaH
  00199	0f 84 a4 00 00
	00		 je	 $LN122@GetMainTre

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0019f	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a1	89 85 a8 fe ff
	ff		 mov	 DWORD PTR __Myhead$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001a7	89 9d a0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ebx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001ad	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001af	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001b3	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  001bd	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  001c2	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 786  :     }

  001c4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001c8	8b 45 08	 mov	 eax, DWORD PTR _dwCRC$[ebp]
  001cb	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001ce	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR __Myhead$9[ebp]
  001d4	50		 push	 eax
  001d5	56		 push	 esi
  001d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  001d9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  001de	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR __Myhead$9[ebp]
  001e4	50		 push	 eax
  001e5	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  001ee	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR __Myhead$9[ebp]
  001f4	50		 push	 eax
  001f5	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * &>
  001fe	83 c4 1c	 add	 esp, 28			; 0000001cH

; 810  :         this->_Ptr->_Color = _Red;

  00201	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00207	8b cb		 mov	 ecx, ebx
  00209	56		 push	 esi
  0020a	ff b5 90 fe ff
	ff		 push	 DWORD PTR __Loc$3[ebp+4]
  00210	ff b5 8c fe ff
	ff		 push	 DWORD PTR __Loc$3[ebp]
  00216	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CSpeedTreeWrapper *> > >::_Insert_node
$LN105@GetMainTre:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 94   : 		file.Destroy();

  0021b	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  00221	e8 00 00 00 00	 call	 ?Destroy@CMappedFile@@QAEXXZ ; CMappedFile::Destroy

; 95   : 	}

  00226	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  0022c	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile

; 96   : 
; 97   : 	*ppMainTree = pTree;

  00231	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _ppMainTree$GSCopy$1$[ebp]
  00237	89 38		 mov	 DWORD PTR [eax], edi

; 98   : 	return TRUE;

  00239	b8 01 00 00 00	 mov	 eax, 1
  0023e	e9 f2 fe ff ff	 jmp	 $LN1@GetMainTre
$LN122@GetMainTre:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  00243	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN120@GetMainTre:
  00248	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$10[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$1:
  0000b	68 e4 03 00 00	 push	 996			; 000003e4H
  00010	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
  0001f	c3		 ret	 0
__unwindfunclet$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z$4:
  00020	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> > >
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
__ehhandler$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z:
  00030	90		 npad	 1
  00031	90		 npad	 1
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 8a 7c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-388]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetMainTree@CSpeedTreeForest@@QAEHKPAPAVCSpeedTreeWrapper@@PBD@Z ENDP ; CSpeedTreeForest::GetMainTree
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ??1CSpeedTreeForest@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSpeedTreeForest@@UAE@XZ PROC			; CSpeedTreeForest::~CSpeedTreeForest, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSpeedTreeForest@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeForest@@6B@

; 36   : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CSpeedTreeForest@@QAEXXZ ; CSpeedTreeForest::Clear

; 37   : }

  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CSpeedTreeWrapper *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSpeedTreeWrapper *> >,0> >
  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSpeedTreeForest@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSpeedTreeForest@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSpeedTreeForest@@UAE@XZ ENDP			; CSpeedTreeForest::~CSpeedTreeForest
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp
;	COMDAT ??0CSpeedTreeForest@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Pnode$2 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSpeedTreeForest@@QAE@XZ PROC			; CSpeedTreeForest::CSpeedTreeForest, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSpeedTreeForest@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00030	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CSpeedTreeForest@@6B@
  00036	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00039	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00041	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00048	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  0004d	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0004f	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  00052	50		 push	 eax
  00053	56		 push	 esi
  00054	89 75 f0	 mov	 DWORD PTR __Pnode$2[ebp], esi
  00057	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005c	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0005f	50		 push	 eax
  00060	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00069	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0006c	50		 push	 eax
  0006d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CSpeedTreeWrapper *>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  00076	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0007c	89 37		 mov	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeForest.cpp

; 24   : 	CSpeedTreeRT::SetNumWindMatrices(c_nNumWindMatrices);

  0007e	6a 04		 push	 4
  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00087	c7 43 64 00 00
	00 00		 mov	 DWORD PTR [ebx+100], 0
  0008e	e8 00 00 00 00	 call	 ?SetNumWindMatrices@CSpeedTreeRT@@SAXI@Z ; CSpeedTreeRT::SetNumWindMatrices
  00093	83 c4 20	 add	 esp, 32			; 00000020H

; 25   : 
; 26   : 	m_afForestExtents[0] = m_afForestExtents[1] = m_afForestExtents[2] = FLT_MAX;

  00096	c7 43 54 ff ff
	7f 7f		 mov	 DWORD PTR [ebx+84], 2139095039 ; 7f7fffffH
  0009d	c7 43 50 ff ff
	7f 7f		 mov	 DWORD PTR [ebx+80], 2139095039 ; 7f7fffffH

; 27   : 	m_afForestExtents[3] = m_afForestExtents[4] = m_afForestExtents[5] = -FLT_MAX;
; 28   : }

  000a4	8b c3		 mov	 eax, ebx
  000a6	c7 43 4c ff ff
	7f 7f		 mov	 DWORD PTR [ebx+76], 2139095039 ; 7f7fffffH
  000ad	c7 43 60 ff ff
	7f ff		 mov	 DWORD PTR [ebx+96], -8388609 ; ff7fffffH
  000b4	c7 43 5c ff ff
	7f ff		 mov	 DWORD PTR [ebx+92], -8388609 ; ff7fffffH
  000bb	c7 43 58 ff ff
	7f ff		 mov	 DWORD PTR [ebx+88], -8388609 ; ff7fffffH
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSpeedTreeForest@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCSpeedTreeWrapper@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSpeedTreeWrapper@@@std@@@3@@std@@QAE@XZ
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CSpeedTreeForest@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSpeedTreeForest@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSpeedTreeForest@@QAE@XZ ENDP			; CSpeedTreeForest::CSpeedTreeForest
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
