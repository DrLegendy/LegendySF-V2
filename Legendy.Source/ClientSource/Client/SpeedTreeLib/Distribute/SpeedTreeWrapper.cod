; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA	; CSpeedTreeWrapper::ms_bSelfShadowOn
PUBLIC	?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA	; CSpeedTreeWrapper::ms_dwBranchVertexShader
PUBLIC	?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA	; CSpeedTreeWrapper::ms_dwLeafVertexShader
_BSS	SEGMENT
?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA DD 01H DUP (?) ; CSpeedTreeWrapper::ms_dwBranchVertexShader
?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA DD 01H DUP (?) ; CSpeedTreeWrapper::ms_dwLeafVertexShader
_BSS	ENDS
_DATA	SEGMENT
?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA DB 01H	; CSpeedTreeWrapper::ms_bSelfShadowOn
_DATA	ENDS
CONST	SEGMENT
?g_achSimpleVertexProgram@@3QBDB DB 'vs.1.1', 0aH, 'mov', 09H, 09H, 'oT0.'
	DB	'xy,', 09H, 09H, 'v7', 0aH, 'mov', 09H, 09H, 'oT1.xy,', 09H, 09H
	DB	'v8', 0aH, 'mov', 09H, 09H, 'a0.x,', 09H, 'v9.x', 0aH, 'm4x4', 09H
	DB	09H, 'r1,', 09H, 09H, 09H, 'v0,', 09H, 09H, 09H, 'c[54+a0.x]', 0aH
	DB	'sub', 09H, 09H, 'r2,', 09H, 09H, 09H, 'r1,', 09H, 09H, 09H, 'v'
	DB	'0', 0aH, 'mov', 09H, 09H, 'r3.x,', 09H, 09H, 'v9.y', 0aH, 'ma'
	DB	'd', 09H, 09H, 'r1,', 09H, 09H, 09H, 'r2,', 09H, 09H, 09H, 'r3'
	DB	'.x,', 09H, 09H, 'v0', 0aH, 'add', 09H, 09H, 'r2,', 09H, 09H, 09H
	DB	'c[52],', 09H, 09H, 'r1', 0aH, 'm4x4', 09H, 09H, 'oPos,', 09H, 09H
	DB	'r2,', 09H, 09H, 09H, 'c[0]', 0aH, 'dp4', 09H, 09H, 'r1,', 09H
	DB	09H, 09H, 'r2,', 09H, 09H, 09H, 'c[2]', 0aH, 'sub', 09H, 09H, 'r'
	DB	'2.x,', 09H, 09H, 'c[85].y,', 09H, 'r1.z', 0aH, 'mul', 09H, 09H
	DB	'oFog,', 09H, 09H, 'r2.x,', 09H, 09H, 'c[85].z', 0aH, 'mov', 09H
	DB	09H, 'oD0,', 09H, 09H, 'v5', 0aH, 00H	; g_achSimpleVertexProgram
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0CSpeedTreeMaterial@@QAE@XZ			; CSpeedTreeMaterial::CSpeedTreeMaterial
PUBLIC	?Set@CSpeedTreeMaterial@@QAEXPBM@Z		; CSpeedTreeMaterial::Set
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?GetType@CSpeedTreeWrapper@@EBEHXZ		; CSpeedTreeWrapper::GetType
PUBLIC	?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CSpeedTreeWrapper::OnUpdateCollisionData
PUBLIC	?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ; CSpeedTreeWrapper::OnUpdateHeighInstance
PUBLIC	?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ; CSpeedTreeWrapper::OnGetObjectHeight
PUBLIC	?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ; CSpeedTreeWrapper::GetBoundingSphere
PUBLIC	?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z	; CSpeedTreeWrapper::SetPosition
PUBLIC	?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::CalculateBBox
PUBLIC	?OnRender@CSpeedTreeWrapper@@UAEXXZ		; CSpeedTreeWrapper::OnRender
PUBLIC	?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnBlendRender
PUBLIC	?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderToShadowMap
PUBLIC	?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderShadow
PUBLIC	?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderPCBlocker
PUBLIC	??0CSpeedTreeWrapper@@QAE@XZ			; CSpeedTreeWrapper::CSpeedTreeWrapper
PUBLIC	??1CSpeedTreeWrapper@@UAE@XZ			; CSpeedTreeWrapper::~CSpeedTreeWrapper
PUBLIC	?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ	; CSpeedTreeWrapper::GetPosition
PUBLIC	?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z	; CSpeedTreeWrapper::SetVertexShaders
PUBLIC	?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z	; CSpeedTreeWrapper::LoadTree
PUBLIC	?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z	; CSpeedTreeWrapper::GetTreeSize
PUBLIC	?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
PUBLIC	?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject
PUBLIC	?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType
PUBLIC	?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType
PUBLIC	?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::SetupLeafForTreeType
PUBLIC	?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::EndLeafForTreeType
PUBLIC	?RenderBranches@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBranches
PUBLIC	?RenderFronds@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderFronds
PUBLIC	?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderLeaves
PUBLIC	?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBillboards
PUBLIC	?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances
PUBLIC	?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ	; CSpeedTreeWrapper::MakeInstance
PUBLIC	?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z	; CSpeedTreeWrapper::DeleteInstance
PUBLIC	?Advance@CSpeedTreeWrapper@@QAEXXZ		; CSpeedTreeWrapper::Advance
PUBLIC	?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::CleanUpMemory
PUBLIC	?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ		; CSpeedTreeWrapper::SetupBuffers
PUBLIC	?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupBranchBuffers
PUBLIC	?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupFrondBuffers
PUBLIC	?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupLeafBuffers
PUBLIC	?PositionTree@CSpeedTreeWrapper@@ABEXXZ		; CSpeedTreeWrapper::PositionTree
PUBLIC	?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
PUBLIC	?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ; CSpeedTreeWrapper::SetShaderConstants
PUBLIC	??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
PUBLIC	?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
PUBLIC	??_GCSpeedTreeWrapper@@UAEPAXI@Z		; CSpeedTreeWrapper::`scalar deleting destructor'
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAXPAPAVCSpeedTreeWrapper@@QAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ; std::_Destroy_range<std::allocator<CSpeedTreeWrapper *> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ; std::_Uninitialized_move<CSpeedTreeWrapper * *,std::allocator<CSpeedTreeWrapper *> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@	; `string'
PUBLIC	??_C@_04LIKELABK@?4dds@				; `string'
PUBLIC	??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ ; `string'
PUBLIC	??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSpeedTreeWrapper@@@8			; CSpeedTreeWrapper `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeWrapper@@8		; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@41100000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::SGeometry
EXTRN	??1SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::~SGeometry
EXTRN	??0STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::STextures
EXTRN	??1STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::~STextures
EXTRN	??0CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::CSpeedTreeRT
EXTRN	??1CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::~CSpeedTreeRT
EXTRN	??2CSpeedTreeRT@@SAPAXI@Z:PROC			; CSpeedTreeRT::operator new
EXTRN	??3CSpeedTreeRT@@SAXPAX@Z:PROC			; CSpeedTreeRT::operator delete
EXTRN	?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z:PROC	; CSpeedTreeRT::Compute
EXTRN	?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ:PROC	; CSpeedTreeRT::MakeInstance
EXTRN	?DeleteTransientData@CSpeedTreeRT@@QAEXXZ:PROC	; CSpeedTreeRT::DeleteTransientData
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z:PROC		; CSpeedTreeRT::LoadTree
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z:PROC	; CSpeedTreeRT::LoadTree
EXTRN	?GetTreeSize@CSpeedTreeRT@@QBEXAAM0@Z:PROC	; CSpeedTreeRT::GetTreeSize
EXTRN	?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z:PROC	; CSpeedTreeRT::SetTreeSize
EXTRN	?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetTreePosition
EXTRN	?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z:PROC	; CSpeedTreeRT::SetTreePosition
EXTRN	?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchLightingMethod
EXTRN	?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafLightingMethod
EXTRN	?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondLightingMethod
EXTRN	?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ:PROC ; CSpeedTreeRT::GetLeafLightingAdjustment
EXTRN	?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetBranchMaterial
EXTRN	?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetLeafMaterial
EXTRN	?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetFrondMaterial
EXTRN	?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z:PROC ; CSpeedTreeRT::SetLeafRockingState
EXTRN	?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z:PROC ; CSpeedTreeRT::SetNumLeafRockingGroups
EXTRN	?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafWindMethod
EXTRN	?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchWindMethod
EXTRN	?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondWindMethod
EXTRN	?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z:PROC	; CSpeedTreeRT::SetWindStrength
EXTRN	?SetLocalMatrices@CSpeedTreeRT@@QAEXII@Z:PROC	; CSpeedTreeRT::SetLocalMatrices
EXTRN	?ComputeLodLevel@CSpeedTreeRT@@QAEXXZ:PROC	; CSpeedTreeRT::ComputeLodLevel
EXTRN	?SetLodLevel@CSpeedTreeRT@@QAEXM@Z:PROC		; CSpeedTreeRT::SetLodLevel
EXTRN	?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetDropToBillboard
EXTRN	?SetLodLimits@CSpeedTreeRT@@QAEXMM@Z:PROC	; CSpeedTreeRT::SetLodLimits
EXTRN	?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ:PROC ; CSpeedTreeRT::GetNumBranchLodLevels
EXTRN	?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumLeafLodLevels
EXTRN	?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumFrondLodLevels
EXTRN	?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z:PROC ; CSpeedTreeRT::GetGeometry
EXTRN	?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z:PROC ; CSpeedTreeRT::GetTextures
EXTRN	?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetTextureFlip
EXTRN	?GetCurrentError@CSpeedTreeRT@@SAPBDXZ:PROC	; CSpeedTreeRT::GetCurrentError
EXTRN	?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z:PROC	; CSpeedTreeRT::GetBoundingBox
EXTRN	?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ:PROC ; CSpeedTreeRT::GetCollisionObjectCount
EXTRN	?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z:PROC ; CSpeedTreeRT::GetCollisionObject
EXTRN	_D3DXVec4Transform@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CGraphicObjectInstance@@QAE@XZ:PROC		; CGraphicObjectInstance::CGraphicObjectInstance
EXTRN	??1CGraphicObjectInstance@@UAE@XZ:PROC		; CGraphicObjectInstance::~CGraphicObjectInstance
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
EXTRN	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ:PROC ; CGraphicObjectInstance::GetTransform
EXTRN	?OnInitialize@CGraphicObjectInstance@@UAEXXZ:PROC ; CGraphicObjectInstance::OnInitialize
EXTRN	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CGraphicObjectInstance::AddCollision
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ:PROC ; CGraphicImageInstance::GetGraphicImagePointer
EXTRN	??_ECSpeedTreeWrapper@@UAEPAXI@Z:PROC		; CSpeedTreeWrapper::`vector deleting destructor'
EXTRN	?UpdateSystem@CSpeedTreeForest@@QAEXM@Z:PROC	; CSpeedTreeForest::UpdateSystem
EXTRN	?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z:PROC ; CSpeedTreeForestDirectX8::UpdateCompundMatrix
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z:PROC ; CStateManager::SetVertexShaderConstant
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftoui3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matProj
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_faceCount@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_faceCount
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A DD 01H DUP (?) ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$r	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeWrapper@@8 DD FLAT:??_R0?AVCSpeedTreeWrapper@@@8 ; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R2CSpeedTreeWrapper@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeWrapper@@8 ; CSpeedTreeWrapper::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R3CSpeedTreeWrapper@@8 DD 00H			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeWrapper@@@8
data$r	SEGMENT
??_R0?AVCSpeedTreeWrapper@@@8 DD FLAT:??_7type_info@@6B@ ; CSpeedTreeWrapper `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeWrapper@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSpeedTreeWrapper@@6B@
rdata$r	SEGMENT
??_R4CSpeedTreeWrapper@@6B@ DD 00H			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeWrapper@@@8
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ DB 'SpeedTreeRT Error: '
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
CONST	SEGMENT
??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ DB 0aH, 'Fatal '
	DB	'Error, cannot compute tree [%s]', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIKELABK@?4dds@
CONST	SEGMENT
??_C@_04LIKELABK@?4dds@ DB '.dds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
CONST	SEGMENT
??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@ DB 'SpeedTreeRT Error: %s'
	DB	00H						; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+3
?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA DD 0242H		; D3DFVF_SPEEDTREE_BRANCH_VERTEX
?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA DD 0142H		; D3DFVF_SPEEDTREE_LEAF_VERTEX
_DATA	ENDS
;	COMDAT ??_7CSpeedTreeWrapper@@6B@
CONST	SEGMENT
??_7CSpeedTreeWrapper@@6B@ DD FLAT:??_R4CSpeedTreeWrapper@@6B@ ; CSpeedTreeWrapper::`vftable'
	DD	FLAT:??_ECSpeedTreeWrapper@@UAEPAXI@Z
	DD	FLAT:?GetType@CSpeedTreeWrapper@@EBEHXZ
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
	DD	FLAT:?OnRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
	DD	FLAT:?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
	DD	FLAT:?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
	DD	FLAT:?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
	DD	FLAT:?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0
__ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0
__ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$18
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$5
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z PROC ; std::_Uninitialized_move<CSpeedTreeWrapper * *,std::allocator<CSpeedTreeWrapper *> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>

; 1656 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ENDP ; std::_Uninitialized_move<CSpeedTreeWrapper * *,std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>, COMDAT

; 4113 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4115 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4116 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4117 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4118 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4119 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4120 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAXPAPAVCSpeedTreeWrapper@@QAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAXPAPAVCSpeedTreeWrapper@@QAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CSpeedTreeWrapper *> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAXPAPAVCSpeedTreeWrapper@@QAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv436 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv435 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 be 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00045	8b c7		 mov	 eax, edi
  00047	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004c	3b c7		 cmp	 eax, edi
  0004e	0f 42 c7	 cmovb	 eax, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	0f 87 8f 00 00
	00		 ja	 $LN40@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e0 02	 shl	 eax, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00060	89 45 f4	 mov	 DWORD PTR tv436[ebp], eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00063	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006d	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00073	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00076	89 45 fc	 mov	 DWORD PTR tv435[ebp], eax
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	3b da		 cmp	 ebx, edx
  00084	75 07		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00086	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00089	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0008b	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	53		 push	 ebx
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ; std::_Uninitialized_move<CSpeedTreeWrapper * *,std::allocator<CSpeedTreeWrapper *> >
  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009b	8b 5d fc	 mov	 ebx, DWORD PTR tv435[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000a4	56		 push	 esi
  000a5	50		 push	 eax
  000a6	52		 push	 edx
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@YAPAPAVCSpeedTreeWrapper@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCSpeedTreeWrapper@@@0@@Z ; std::_Uninitialized_move<CSpeedTreeWrapper * *,std::allocator<CSpeedTreeWrapper *> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 12		 je	 SHORT $LN33@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c5	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000cb	8b c3		 mov	 eax, ebx

; 1680 :         _Myfirst = _Newvec;

  000cd	89 3e		 mov	 DWORD PTR [esi], edi

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  000d2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR tv436[ebp]
  000d8	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000da	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000db	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 767  :     }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000e6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f0	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b c2		 mov	 eax, edx

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00008	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL22@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL22@operator

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b c6		 sub	 eax, esi

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	50		 push	 eax
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 4458 :     return _STD move(_Left.append(_Right));

  00026	5e		 pop	 esi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00027	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00045	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004c	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00053	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4458 :     return _STD move(_Left.append(_Right));

  00056	8b c1		 mov	 eax, ecx

; 4459 : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadLeafShader, COMDAT

; 277  : 	DWORD dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 278  : 
; 279  : 	#if defined WRAPPER_USE_GPU_LEAF_PLACEMENT || defined WRAPPER_USE_GPU_WIND
; 280  : 
; 281  : 		// leaf shader declaration
; 282  : 		DWORD pLeafShaderDecl[ ] =
; 283  : 		{
; 284  : 				D3DVSD_STREAM(0),
; 285  : 				D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 286  : 			#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 287  : 				D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 288  : 			#else
; 289  : 				D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 290  : 			#endif
; 291  : 				D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 292  : 				D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT4),
; 293  : 				D3DVSD_END( )
; 294  : 		};
; 295  : 
; 296  : 		// assemble shader
; 297  : 		LPD3DXBUFFER pCode, pError;
; 298  : 
; 299  : 		if (D3DXAssembleShader(g_achLeafVertexProgram, sizeof(g_achLeafVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 300  : 		{
; 301  : 			if (pDx->CreateVertexShader(pLeafShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 302  : 			{
; 303  : 				Tracef("Failed to create leaf vertex shader.");
; 304  : 				/*
; 305  : 				char szError[1024];
; 306  : 				sprintf(szError, "Failed to create leaf vertex shader.");
; 307  : 				MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 308  : 				*/
; 309  : 			}
; 310  : 		}
; 311  : 		else
; 312  : 		{
; 313  : 			Tracef("Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 314  : 			/*
; 315  : 			char szError[1024];
; 316  : 			sprintf(szError, "Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 317  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 318  : 			*/
; 319  : 		}
; 320  : 
; 321  : 		if (pCode)
; 322  :     		pCode->Release( );
; 323  : 
; 324  : 	#else
; 325  : 
; 326  : 		dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 327  : 
; 328  : 	#endif
; 329  : 
; 330  : 	return dwShader;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA

; 331  : }

  00005	c3		 ret	 0
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadLeafShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadBranchShader, COMDAT

; 131  : 	#ifndef WRAPPER_USE_GPU_WIND
; 132  : 		return D3DFVF_SPEEDTREE_BRANCH_VERTEX;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA

; 133  : 	#endif
; 134  : 
; 135  : 	// branch shader declaration
; 136  :     DWORD pBranchShaderDecl[] =
; 137  :     {
; 138  : 			D3DVSD_STREAM(0),
; 139  : 			D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 140  : 		#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 141  : 			D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 142  : 		#else
; 143  : 			D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 144  : 		#endif
; 145  : 			D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 146  : 		#ifdef WRAPPER_RENDER_SELF_SHADOWS
; 147  : 			D3DVSD_REG(D3DVSDE_TEXCOORD1,		D3DVSDT_FLOAT2),
; 148  : 		#endif
; 149  : 		#ifdef WRAPPER_USE_GPU_WIND
; 150  : 			D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT2),
; 151  : 		#endif
; 152  : 			D3DVSD_END( )
; 153  :     };
; 154  : 
; 155  :     // assemble shader
; 156  : 	DWORD dwShader;
; 157  : 	LPD3DXBUFFER pCode, pError;
; 158  : 
; 159  :     if (D3DXAssembleShader(g_achSimpleVertexProgram, sizeof(g_achSimpleVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 160  : 	{
; 161  : 		if (pDx->CreateVertexShader(pBranchShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 162  : 		{
; 163  : 			char szError[1024];
; 164  : 			sprintf(szError, "Failed to create branch vertex shader.");
; 165  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 166  : 		}
; 167  : 	}
; 168  : 	else
; 169  :     {
; 170  :         char szError[1024];
; 171  : 	    sprintf(szError, "Failed to assemble branch vertex shader.\nThe error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 172  : 	    MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 173  :     }
; 174  : 
; 175  : 	if (pCode)
; 176  :     	pCode->Release();
; 177  : 
; 178  : 	return dwShader;
; 179  : }

  00005	c3		 ret	 0
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadBranchShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Right_size$1$ = 12					; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2144 :         const value_type* _Result = _Bx._Buf;

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _str$[ebp]
  0000b	8b d7		 mov	 edx, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0000d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00011	72 02		 jb	 SHORT $LN81@NoExtensio

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00013	8b 17		 mov	 edx, DWORD PTR [edi]
$LN81@NoExtensio:

; 3997 :         return static_cast<size_type>(

  00015	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 604  :     if (_Hay_size != 0) { // room for match, look for it

  00018	85 c0		 test	 eax, eax
  0001a	74 59		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  0001c	83 c9 ff	 or	 ecx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001f	48		 dec	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00020	3b c1		 cmp	 eax, ecx
  00022	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00025	03 ca		 add	 ecx, edx

; 377  :         return _Left == _Right;

  00027	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 606  :             if (_Traits::eq(*_Match_try, _Ch)) {

  0002a	74 0e		 je	 SHORT $LN73@NoExtensio
  0002c	0f 1f 40 00	 npad	 4
$LL16@NoExtensio:

; 608  :             }
; 609  : 
; 610  :             if (_Match_try == _Haystack) {

  00030	3b ca		 cmp	 ecx, edx
  00032	74 41		 je	 SHORT $LN2@NoExtensio

; 605  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00034	49		 dec	 ecx

; 377  :         return _Left == _Right;

  00035	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 606  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00038	75 f6		 jne	 SHORT $LL16@NoExtensio
$LN73@NoExtensio:

; 607  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0003a	2b ca		 sub	 ecx, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 335  : 	if (string::npos != npos)

  0003c	83 f9 ff	 cmp	 ecx, -1
  0003f	74 34		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00041	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00052	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00055	39 4f 10	 cmp	 DWORD PTR [edi+16], ecx
  00058	0f 42 4f 10	 cmovb	 ecx, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0005c	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00060	72 02		 jb	 SHORT $LN44@NoExtensio

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00062	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN44@NoExtensio:

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00064	51		 push	 ecx
  00065	57		 push	 edi
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006d	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 336  : 		return std::string(str, 0, npos);

  0006e	8b c6		 mov	 eax, esi

; 339  : }

  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN2@NoExtensio:
  00075	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00076	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00079	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00080	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00087	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  0008b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0008e	89 45 0c	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00091	72 02		 jb	 SHORT $LN60@NoExtensio

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00093	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN60@NoExtensio:

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00095	83 f8 10	 cmp	 eax, 16			; 00000010H
  00098	73 1d		 jae	 SHORT $LN57@NoExtensio

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 338  : 	return str;

  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  000a0	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000a5	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 338  : 	return str;

  000a8	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  000ab	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000ae	8b c3		 mov	 eax, ebx
  000b0	5b		 pop	 ebx
  000b1	5f		 pop	 edi

; 339  : }

  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN57@NoExtensio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000b7	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  000ba	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000bf	3b c1		 cmp	 eax, ecx
  000c1	0f 47 c1	 cmova	 eax, ecx
  000c4	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000c7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000ce	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000d0	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  000d3	50		 push	 eax
  000d4	53		 push	 ebx
  000d5	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  000d8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000e0	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000e1	51		 push	 ecx
  000e2	57		 push	 edi
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 _memcpy
  000e9	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 338  : 	return str;

  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000f2	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  000f5	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f8	8b c3		 mov	 eax, ebx
  000fa	5b		 pop	 ebx
  000fb	5f		 pop	 edi

; 339  : }

  000fc	5e		 pop	 esi
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h
;	COMDAT ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1032				; size = 4
_szPath$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::GetPath, COMDAT

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	89 9d f8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], ebx

; 303  : 	char szPath[1024];
; 304  : 	szPath[0] = '\0';
; 305  : 
; 306  : 	size_t nLength = str.length();

  00020	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00023	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0

; 307  : 
; 308  : 	if (nLength > 0)

  0002a	85 c0		 test	 eax, eax
  0002c	74 2d		 je	 SHORT $LN3@GetPath

; 309  : 	{
; 310  : 		for (size_t i = nLength - 1; i > 0; i--)

  0002e	83 c0 ff	 add	 eax, -1
  00031	74 28		 je	 SHORT $LN3@GetPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00033	56		 push	 esi
  00034	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
$LL4@GetPath:

; 2135 :         value_type* _Result = _Bx._Buf;

  00037	8b d1		 mov	 edx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00039	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0003c	72 02		 jb	 SHORT $LN65@GetPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN65@GetPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 312  : 			if (str[i] == '/' || str[i] == '\\')

  00040	80 3c 02 2f	 cmp	 BYTE PTR [edx+eax], 47	; 0000002fH
  00044	74 58		 je	 SHORT $LN10@GetPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  00046	8b d1		 mov	 edx, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00048	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0004b	72 02		 jb	 SHORT $LN64@GetPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN64@GetPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 312  : 			if (str[i] == '/' || str[i] == '\\')

  0004f	80 3c 02 5c	 cmp	 BYTE PTR [edx+eax], 92	; 0000005cH
  00053	74 49		 je	 SHORT $LN10@GetPath

; 309  : 	{
; 310  : 		for (size_t i = nLength - 1; i > 0; i--)

  00055	83 e8 01	 sub	 eax, 1
  00058	75 dd		 jne	 SHORT $LL4@GetPath
$LN67@GetPath:
  0005a	5e		 pop	 esi
$LN3@GetPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0005b	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00061	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 03 00	 mov	 BYTE PTR [ebx], 0
$LL66@GetPath:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00075	8a 01		 mov	 al, BYTE PTR [ecx]
  00077	41		 inc	 ecx
  00078	84 c0		 test	 al, al
  0007a	75 f9		 jne	 SHORT $LL66@GetPath
  0007c	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007e	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 325  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	8b c3		 mov	 eax, ebx
  00092	33 cd		 xor	 ecx, ebp
  00094	5b		 pop	 ebx
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN10@GetPath:
  0009e	57		 push	 edi

; 313  : 			{
; 314  : 				for (size_t j = 0; j < i + 1; j++)

  0009f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000a2	33 d2		 xor	 edx, edx
  000a4	85 ff		 test	 edi, edi
  000a6	74 18		 je	 SHORT $LN6@GetPath
$LL7@GetPath:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2135 :         value_type* _Result = _Bx._Buf;

  000a8	8b c1		 mov	 eax, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  000aa	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000ad	72 02		 jb	 SHORT $LN36@GetPath

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN36@GetPath:
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Filename.h

; 315  : 					szPath[j] = str[j];

  000b1	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000b4	88 84 15 fc fb
	ff ff		 mov	 BYTE PTR _szPath$[ebp+edx], al
  000bb	42		 inc	 edx
  000bc	3b d7		 cmp	 edx, edi
  000be	72 e8		 jb	 SHORT $LL7@GetPath
$LN6@GetPath:

; 316  : 				szPath[i+1] = '\0';

  000c0	81 ff 00 04 00
	00		 cmp	 edi, 1024		; 00000400H
  000c6	73 0b		 jae	 SHORT $LN15@GetPath
  000c8	c6 84 3d fc fb
	ff ff 00	 mov	 BYTE PTR _szPath$[ebp+edi], 0
  000d0	5f		 pop	 edi

; 317  : 				break;

  000d1	eb 87		 jmp	 SHORT $LN67@GetPath
$LN15@GetPath:

; 316  : 				szPath[i+1] = '\0';

  000d3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN68@GetPath:
  000d8	cc		 int	 3
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::GetPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4432 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4433 : #if _ITERATOR_DEBUG_LEVEL == 2
; 4434 :     _STL_VERIFY(_STD addressof(_Left) != _STD addressof(_Right),
; 4435 :         "You cannot concatenate the same moved string to itself. See "
; 4436 :         "N4849 [res.on.arguments]/1.3: If a function argument binds to an rvalue reference "
; 4437 :         "parameter, the implementation may assume that this parameter is a unique reference "
; 4438 :         "to this argument");
; 4439 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 4440 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00003	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR $T1[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4441 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSpeedTreeWrapper@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z PROC			; CSpeedTreeWrapper::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSpeedTreeWrapper@@UAE@XZ ; CSpeedTreeWrapper::~CSpeedTreeWrapper
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 e4 03 00 00	 push	 996			; 000003e4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z ENDP			; CSpeedTreeWrapper::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z
_TEXT	SEGMENT
_afMaterial$ = -52					; size = 32
_afUsefulConstants$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_pMaterial$ = 8						; size = 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z PROC	; CSpeedTreeWrapper::SetShaderConstants, COMDAT
; _this$ = ecx

; 1311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1312 : 	const float afUsefulConstants[] =
; 1313 : 	{
; 1314 : 		m_pSpeedTree->GetLeafLightingAdjustment(), 0.0f, 0.0f, 0.0f,

  00010	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ ; CSpeedTreeRT::GetLeafLightingAdjustment

; 1315 : 	};
; 1316 : 
; 1317 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_LeafLightingAdjustment, afUsefulConstants, 1);

  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00025	8d 45 ec	 lea	 eax, DWORD PTR _afUsefulConstants$[ebp]
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	6a 46		 push	 70			; 00000046H
  0002d	d9 5d ec	 fstp	 DWORD PTR _afUsefulConstants$[ebp]
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+4], 0
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+8], 0
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+12], 0
  00045	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1318 : 
; 1319 : 	const float afMaterial[] =
; 1320 : 	{
; 1321 : 		pMaterial[0], pMaterial[1], pMaterial[2], 1.0f,

  0004a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 1322 : 			pMaterial[3], pMaterial[4], pMaterial[5], 1.0f
; 1323 : 	};
; 1324 : 
; 1325 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_Material, afMaterial, 2);

  0004e	8d 45 cc	 lea	 eax, DWORD PTR _afMaterial$[ebp]
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00057	f3 0f 11 45 cc	 movss	 DWORD PTR _afMaterial$[ebp], xmm0
  0005c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00061	f3 0f 11 45 d0	 movss	 DWORD PTR _afMaterial$[ebp+4], xmm0
  00066	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0006b	f3 0f 11 45 d4	 movss	 DWORD PTR _afMaterial$[ebp+8], xmm0
  00070	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00075	f3 0f 11 45 dc	 movss	 DWORD PTR _afMaterial$[ebp+16], xmm0
  0007a	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0007f	6a 02		 push	 2
  00081	f3 0f 11 45 e0	 movss	 DWORD PTR _afMaterial$[ebp+20], xmm0
  00086	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  0008b	50		 push	 eax
  0008c	6a 4a		 push	 74			; 0000004aH
  0008e	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+12], 1065353216 ; 3f800000H
  00095	f3 0f 11 45 e4	 movss	 DWORD PTR _afMaterial$[ebp+24], xmm0
  0009a	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+28], 1065353216 ; 3f800000H
  000a1	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1326 : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ENDP	; CSpeedTreeWrapper::SetShaderConstants
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pFilename$ = 8						; size = 4
_rImage$ = 12						; size = 4
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z PROC ; CSpeedTreeWrapper::LoadTexture, COMDAT

; 1295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1296 : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(pFilename);

  00003	ff 75 08	 push	 DWORD PTR _pFilename$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0000c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 1297 : 	rImage.SetImagePointer(static_cast<CGraphicImage *>(pResource));

  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 1298 : 
; 1299 : 	if (rImage.IsEmpty())

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  0001d	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00022	84 c0		 test	 al, al
  00024	0f 94 c0	 sete	 al

; 1300 : 		return false;
; 1301 : 
; 1302 : 	//TraceError("SpeedTreeWrapper::LoadTexture: %s", pFilename);
; 1303 : 	return true;
; 1304 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ENDP ; CSpeedTreeWrapper::LoadTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?PositionTree@CSpeedTreeWrapper@@ABEXXZ
_TEXT	SEGMENT
_vecConstant$ = -96					; size = 16
_vecPosition$$sroa$140$1$ = -80				; size = 4
_vecPosition$$sroa$304$1$ = -76				; size = 4
_vecPosition$$sroa$305$1$ = -72				; size = 4
_matTranslation$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?PositionTree@CSpeedTreeWrapper@@ABEXXZ PROC		; CSpeedTreeWrapper::PositionTree, COMDAT
; _this$ = ecx

; 1276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1277 : 	D3DXVECTOR3 vecPosition = m_pSpeedTree->GetTreePosition();

  00010	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]
  00016	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition

; 1280 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0001b	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 166  :     z = pf[2];

  0001e	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00023	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00028	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1280 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0002c	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0002f	f3 0f 11 5c 24
	08		 movss	 DWORD PTR [esp+8], xmm3
  00035	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  0003b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00040	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 164  :     x = pf[0];

  00041	f3 0f 11 4d b8	 movss	 DWORD PTR _vecPosition$$sroa$305$1$[ebp], xmm1

; 165  :     y = pf[1];

  00046	f3 0f 11 55 b4	 movss	 DWORD PTR _vecPosition$$sroa$304$1$[ebp], xmm2

; 166  :     z = pf[2];

  0004b	f3 0f 11 5d b0	 movss	 DWORD PTR _vecPosition$$sroa$140$1$[ebp], xmm3

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+56], 0
  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+52], 0
  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+48], 0
  00065	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+44], 0
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+36], 0
  00073	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+32], 0
  0007a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+28], 0
  00081	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+24], 0
  00088	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+16], 0
  0008f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+12], 0
  00096	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+8], 0
  0009d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000a4	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+60], 1065353216 ; 3f800000H
  000ab	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+40], 1065353216 ; 3f800000H
  000b2	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+20], 1065353216 ; 3f800000H
  000b9	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1280 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  000c0	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 1281 : 
; 1282 : 	// store translation for client-side transformation
; 1283 : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &matTranslation);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  000ce	50		 push	 eax
  000cf	68 00 01 00 00	 push	 256			; 00000100H
  000d4	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 321  :     x = fx;

  000d9	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$305$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1287 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000de	8d 45 a0	 lea	 eax, DWORD PTR _vecConstant$[ebp]
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 321  :     x = fx;

  000e7	f3 0f 11 45 a0	 movss	 DWORD PTR _vecConstant$[ebp], xmm0

; 322  :     y = fy;

  000ec	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$304$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1287 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000f1	6a 01		 push	 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 322  :     y = fy;

  000f3	f3 0f 11 45 a4	 movss	 DWORD PTR _vecConstant$[ebp+4], xmm0

; 323  :     z = fz;

  000f8	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$140$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1287 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000fd	50		 push	 eax
  000fe	6a 34		 push	 52			; 00000034H
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 323  :     z = fz;

  00100	f3 0f 11 45 a8	 movss	 DWORD PTR _vecConstant$[ebp+8], xmm0

; 324  :     w = fw;

  00105	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vecConstant$[ebp+12], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1287 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  0010c	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1288 : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?PositionTree@CSpeedTreeWrapper@@ABEXXZ ENDP		; CSpeedTreeWrapper::PositionTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_pVertexBuffer$1 = -16					; size = 4
_usLeafCount$1$ = -12					; size = 4
tv1233 = -8						; size = 4
_unLeaf$1$ = -4						; size = 4
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupLeafBuffers, COMDAT
; _this$ = ecx

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 656  : 	// set up constants
; 657  : 	const short anVertexIndices[6] = { 0, 1, 2, 0, 2, 3 };
; 658  : 	//const int nNumLeafMaps = m_pTextureInfo->m_uiLeafTextureCount;
; 659  : 
; 660  : 	// set up the leaf counts for each LOD
; 661  : 	m_usNumLeafLods = m_pSpeedTree->GetNumLeafLodLevels();

  0000a	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00010	e8 00 00 00 00	 call	 ?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumLeafLodLevels
  00015	66 89 86 88 02
	00 00		 mov	 WORD PTR [esi+648], ax

; 662  : 
; 663  : 	// create array of vertex buffers (one for each LOD)
; 664  : 	m_pLeafVertexBuffer = new LPDIRECT3DVERTEXBUFFER8[m_usNumLeafLods];

  0001c	33 c9		 xor	 ecx, ecx
  0001e	0f b7 c0	 movzx	 eax, ax
  00021	ba 04 00 00 00	 mov	 edx, 4
  00026	f7 e2		 mul	 edx
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00035	89 86 8c 02 00
	00		 mov	 DWORD PTR [esi+652], eax

; 665  : 
; 666  : 	// create array of bools for CPU updating (so we don't update for each instance)
; 667  : 	m_pLeavesUpdatedByCpu = new bool[m_usNumLeafLods];

  0003b	0f b7 86 88 02
	00 00		 movzx	 eax, WORD PTR [esi+648]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00048	89 86 90 02 00
	00		 mov	 DWORD PTR [esi+656], eax
  0004e	83 c4 08	 add	 esp, 8

; 668  : 
; 669  : 	// cycle through LODs
; 670  : 	for (UINT unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  00051	33 c0		 xor	 eax, eax
  00053	33 db		 xor	 ebx, ebx
  00055	66 3b 86 88 02
	00 00		 cmp	 ax, WORD PTR [esi+648]
  0005c	0f 83 60 02 00
	00		 jae	 $LN3@SetupLeafB
  00062	57		 push	 edi
$LL4@SetupLeafB:

; 671  : 	{
; 672  : 		m_pLeavesUpdatedByCpu[unLod] = false;

  00063	8b 86 90 02 00
	00		 mov	 eax, DWORD PTR [esi+656]

; 673  : 		m_pLeafVertexBuffer[unLod] = NULL;

  00069	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00070	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  00074	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  0007a	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], 0

; 674  : 
; 675  : 		// if this LOD has no leaves, skip it
; 676  : 		unsigned short usLeafCount = m_pGeometryCache->m_sLeaves0.m_usLeafCount;

  00081	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00087	0f b7 80 84 00
	00 00		 movzx	 eax, WORD PTR [eax+132]
  0008e	89 45 f4	 mov	 DWORD PTR _usLeafCount$1$[ebp], eax

; 677  : 
; 678  : 		if (usLeafCount < 1)

  00091	83 f8 01	 cmp	 eax, 1
  00094	0f 82 17 02 00
	00		 jb	 $LN2@SetupLeafB

; 679  : 			continue;
; 680  : 
; 681  : 		SFVFLeafVertex* pVertexBuffer = NULL;
; 682  : 		// create the vertex buffer for storing leaf vertices
; 683  : #ifndef WRAPPER_USE_CPU_LEAF_PLACEMENT
; 684  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_MANAGED, &m_pLeafVertexBuffer[unLod]);
; 685  : 		// fill the vertex buffer by interleaving SpeedTree data
; 686  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);
; 687  : #else
; 688  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod]);

  0009a	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000a6	03 c7		 add	 eax, edi
  000a8	8b 7d f4	 mov	 edi, DWORD PTR _usLeafCount$1$[ebp]
  000ab	50		 push	 eax
  000ac	6a 02		 push	 2
  000ae	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA
  000b4	0f b7 c7	 movzx	 eax, di
  000b7	68 00 02 00 00	 push	 512			; 00000200H
  000bc	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$1[ebp], 0
  000c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c5	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  000c8	c1 e0 04	 shl	 eax, 4
  000cb	50		 push	 eax
  000cc	51		 push	 ecx
  000cd	ff 52 5c	 call	 DWORD PTR [edx+92]

; 689  : 		// fill the vertex buffer by interleaving SpeedTree data
; 690  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  000d0	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  000d6	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  000dd	68 00 28 00 00	 push	 10240			; 00002800H
  000e2	8d 55 f0	 lea	 edx, DWORD PTR _pVertexBuffer$1[ebp]
  000e5	52		 push	 edx
  000e6	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	50		 push	 eax
  000ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f0	ff 51 2c	 call	 DWORD PTR [ecx+44]
  000f3	33 c9		 xor	 ecx, ecx
  000f5	89 4d fc	 mov	 DWORD PTR _unLeaf$1$[ebp], ecx

; 691  : #endif
; 692  : 		SFVFLeafVertex* pVertex = pVertexBuffer;
; 693  : 		for (UINT unLeaf = 0; unLeaf < usLeafCount; ++unLeaf)

  000f8	66 39 4d f4	 cmp	 WORD PTR _usLeafCount$1$[ebp], cx
  000fc	0f 84 a0 01 00
	00		 je	 $LN6@SetupLeafB

; 679  : 			continue;
; 680  : 
; 681  : 		SFVFLeafVertex* pVertexBuffer = NULL;
; 682  : 		// create the vertex buffer for storing leaf vertices
; 683  : #ifndef WRAPPER_USE_CPU_LEAF_PLACEMENT
; 684  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_MANAGED, &m_pLeafVertexBuffer[unLod]);
; 685  : 		// fill the vertex buffer by interleaving SpeedTree data
; 686  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);
; 687  : #else
; 688  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod]);

  00102	8b 7d f0	 mov	 edi, DWORD PTR _pVertexBuffer$1[ebp]
  00105	89 4d f8	 mov	 DWORD PTR tv1233[ebp], ecx
  00108	83 c7 10	 add	 edi, 16			; 00000010H
  0010b	0f 1f 44 00 00	 npad	 5
$LL7@SetupLeafB:

; 694  : 		{
; 695  : 			const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = &(m_pGeometryCache->m_sLeaves0);

  00110	8b 96 64 02 00
	00		 mov	 edx, DWORD PTR [esi+612]

; 696  : 			for (UINT unVert = 0; unVert < 6; ++unVert)  // 6 verts == 2 triangles
; 697  : 			{
; 698  : 				// position
; 699  : 				memcpy(pVertex->m_vPosition, &(pLeaf->m_pCenterCoords[unLeaf * 3]), 3 * sizeof(float));

  00116	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0011c	f3 0f 7e 04 08	 movq	 xmm0, QWORD PTR [eax+ecx]
  00121	66 0f d6 47 f0	 movq	 QWORD PTR [edi-16], xmm0
  00126	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]
  0012a	89 47 f8	 mov	 DWORD PTR [edi-8], eax

; 700  : 
; 701  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 702  : 				// normal
; 703  : 				memcpy(&pVertex->m_vNormal, &(pLeaf->m_pNormals[unLeaf * 3]), 3 * sizeof(float));
; 704  : #else
; 705  : 				// color
; 706  : 				pVertex->m_dwDiffuseColor = pLeaf->m_pColors[unLeaf];

  0012d	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00136	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00139	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 707  : #endif
; 708  : 
; 709  : 				// tex coord
; 710  : 				memcpy(pVertex->m_fTexCoords, &(pLeaf->m_pLeafMapTexCoords[unLeaf][anVertexIndices[unVert] * 2]), 2 * sizeof(float));

  0013c	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00142	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00145	8b 01		 mov	 eax, DWORD PTR [ecx]
  00147	89 07		 mov	 DWORD PTR [edi], eax
  00149	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0014c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0014f	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00155	03 45 f8	 add	 eax, DWORD PTR tv1233[ebp]
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  0015b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0015f	66 0f d6 47 08	 movq	 QWORD PTR [edi+8], xmm0
  00164	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00167	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0016a	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00170	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00173	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00176	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0017c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0017f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00182	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00185	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00188	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0018b	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00191	03 45 f8	 add	 eax, DWORD PTR tv1233[ebp]
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00197	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0019b	66 0f d6 47 20	 movq	 QWORD PTR [edi+32], xmm0
  001a0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001a3	89 47 28	 mov	 DWORD PTR [edi+40], eax
  001a6	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001ac	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001af	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  001b2	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001b8	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  001bb	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  001be	89 47 30	 mov	 DWORD PTR [edi+48], eax
  001c1	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001c4	89 47 34	 mov	 DWORD PTR [edi+52], eax
  001c7	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  001cd	03 45 f8	 add	 eax, DWORD PTR tv1233[ebp]
  001d0	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  001d3	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001d7	66 0f d6 47 38	 movq	 QWORD PTR [edi+56], xmm0
  001dc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001df	89 47 40	 mov	 DWORD PTR [edi+64], eax
  001e2	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001e8	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001eb	89 47 44	 mov	 DWORD PTR [edi+68], eax
  001ee	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001f4	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  001f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f9	89 47 48	 mov	 DWORD PTR [edi+72], eax
  001fc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00202	89 47 4c	 mov	 DWORD PTR [edi+76], eax
  00205	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0020b	03 45 f8	 add	 eax, DWORD PTR tv1233[ebp]
  0020e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00212	66 0f d6 47 50	 movq	 QWORD PTR [edi+80], xmm0
  00217	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0021a	89 47 58	 mov	 DWORD PTR [edi+88], eax
  0021d	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00223	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00226	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  00229	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0022f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00232	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00235	89 47 60	 mov	 DWORD PTR [edi+96], eax
  00238	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0023b	89 47 64	 mov	 DWORD PTR [edi+100], eax
  0023e	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00244	03 45 f8	 add	 eax, DWORD PTR tv1233[ebp]
  00247	8d bf 90 00 00
	00		 lea	 edi, DWORD PTR [edi+144]
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00250	83 45 f8 0c	 add	 DWORD PTR tv1233[ebp], 12 ; 0000000cH
  00254	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00258	66 0f d6 47 d8	 movq	 QWORD PTR [edi-40], xmm0
  0025d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00260	89 47 e0	 mov	 DWORD PTR [edi-32], eax
  00263	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00269	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0026c	89 47 e4	 mov	 DWORD PTR [edi-28], eax
  0026f	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00275	8b d1		 mov	 edx, ecx
  00277	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0027a	42		 inc	 edx
  0027b	89 55 fc	 mov	 DWORD PTR _unLeaf$1$[ebp], edx
  0027e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00281	89 47 e8	 mov	 DWORD PTR [edi-24], eax
  00284	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00287	8b 4d f4	 mov	 ecx, DWORD PTR _usLeafCount$1$[ebp]
  0028a	89 47 ec	 mov	 DWORD PTR [edi-20], eax
  0028d	0f b7 c1	 movzx	 eax, cx
  00290	8b 4d f8	 mov	 ecx, DWORD PTR tv1233[ebp]
  00293	3b d0		 cmp	 edx, eax
  00295	0f 82 75 fe ff
	ff		 jb	 $LL7@SetupLeafB
  0029b	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
$LN6@SetupLeafB:

; 711  : 
; 712  : 				// wind weights
; 713  : #ifdef WRAPPER_USE_GPU_WIND
; 714  : 				pVertex->m_fWindIndex = 4.0f * pLeaf->m_pWindMatrixIndices[unLeaf];
; 715  : 				pVertex->m_fWindWeight = pLeaf->m_pWindWeights[unLeaf];
; 716  : #endif
; 717  : 
; 718  : 				// GPU placement data
; 719  : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 720  : 				pVertex->m_fLeafPlacementIndex = c_nVertexShader_LeafTables + pLeaf->m_pLeafClusterIndices[unLeaf] * 4.0f + anVertexIndices[unVert];
; 721  : 				pVertex->m_fLeafScalarValue = m_pSpeedTree->GetLeafLodSizeAdjustments()[unLod];
; 722  : #endif
; 723  : 
; 724  : 				++pVertex;
; 725  : 			}
; 726  : 		}
; 727  : 		m_pLeafVertexBuffer[unLod]->Unlock();

  002a2	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  002a8	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  002ab	50		 push	 eax
  002ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ae	ff 51 30	 call	 DWORD PTR [ecx+48]
$LN2@SetupLeafB:

; 668  : 
; 669  : 	// cycle through LODs
; 670  : 	for (UINT unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  002b1	0f b7 86 88 02
	00 00		 movzx	 eax, WORD PTR [esi+648]
  002b8	43		 inc	 ebx
  002b9	3b d8		 cmp	 ebx, eax
  002bb	0f 82 a2 fd ff
	ff		 jb	 $LL4@SetupLeafB
  002c1	5f		 pop	 edi
$LN3@SetupLeafB:
  002c2	5e		 pop	 esi

; 728  : 	}
; 729  : }

  002c3	5b		 pop	 ebx
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_unNumLodLevels$1$ = -16				; size = 4
_pIndexBuffer$1 = -12					; size = 4
tv736 = -8						; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupFrondBuffers, COMDAT
; _this$ = ecx

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 571  : 	// reference to frond structure
; 572  : 	CSpeedTreeRT::SGeometry::SIndexed* pFronds = &(m_pGeometryCache->m_sFronds);

  0000a	8b 9f 64 02 00
	00		 mov	 ebx, DWORD PTR [edi+612]
  00010	89 5d f8	 mov	 DWORD PTR tv736[ebp], ebx

; 573  : 	m_unFrondVertexCount = pFronds->m_usVertexCount; // we asked for a contiguous strip

  00013	0f b7 53 4c	 movzx	 edx, WORD PTR [ebx+76]
  00017	89 97 7c 02 00
	00		 mov	 DWORD PTR [edi+636], edx

; 574  : 
; 575  : 	// check if tree has fronds
; 576  : 	if (m_unFrondVertexCount > 1)

  0001d	83 fa 01	 cmp	 edx, 1
  00020	0f 86 c1 01 00
	00		 jbe	 $LN8@SetupFrond

; 577  : 	{
; 578  : 		// create the vertex buffer for storing frond vertices
; 579  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 580  : #ifndef WRAPPER_USE_CPU_WIND
; 581  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pFrondVertexBuffer);

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002b	56		 push	 esi
  0002c	8d b7 78 02 00
	00		 lea	 esi, DWORD PTR [edi+632]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  00039	56		 push	 esi
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	6a 01		 push	 1
  0003e	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00044	c1 e2 05	 shl	 edx, 5
  00047	6a 08		 push	 8
  00049	52		 push	 edx
  0004a	50		 push	 eax
  0004b	ff 51 5c	 call	 DWORD PTR [ecx+92]

; 582  : 		// fill the vertex buffer by interleaving SpeedTree data
; 583  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00053	6a 00		 push	 0
  00055	52		 push	 edx
  00056	6a 00		 push	 0
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	6a 00		 push	 0
  0005c	50		 push	 eax
  0005d	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 584  : #else
; 585  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_SYSTEMMEM, &m_pFrondVertexBuffer);
; 586  : 		// fill the vertex buffer by interleaving SpeedTree data
; 587  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 588  : #endif
; 589  : 		for (UINT i = 0; i < m_unFrondVertexCount; ++i)

  00060	33 d2		 xor	 edx, edx
  00062	39 97 7c 02 00
	00		 cmp	 DWORD PTR [edi+636], edx
  00068	76 76		 jbe	 SHORT $LN3@SetupFrond

; 577  : 	{
; 578  : 		// create the vertex buffer for storing frond vertices
; 579  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 580  : #ifndef WRAPPER_USE_CPU_WIND
; 581  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pFrondVertexBuffer);

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0006d	33 f6		 xor	 esi, esi
  0006f	90		 npad	 1
$LL4@SetupFrond:

; 590  : 		{
; 591  : 			// position
; 592  : 			memcpy(&pVertexBuffer->m_vPosition, &(pFronds->m_pCoords[i * 3]), 3 * sizeof(float));

  00070	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]
  00073	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00076	f3 0f 7e 44 31
	f4		 movq	 xmm0, QWORD PTR [ecx+esi-12]
  0007c	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00080	8b 4c 31 fc	 mov	 ecx, DWORD PTR [ecx+esi-4]
  00084	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00087	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 593  : 
; 594  : 			// normal or color
; 595  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 596  : 			memcpy(&pVertexBuffer->m_vNormal, &(pFronds->m_pNormals[i * 3]), 3 * sizeof(float));
; 597  : #else
; 598  : 			pVertexBuffer->m_dwDiffuseColor = pFronds->m_pColors[i];

  0008a	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  0008d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00093	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 599  : #endif
; 600  : 
; 601  : 			// texcoords for layer 0
; 602  : 			pVertexBuffer->m_fTexCoords[0] = pFronds->m_pTexCoords0[i * 2];

  00096	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  00099	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0009f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 603  : 			pVertexBuffer->m_fTexCoords[1] = pFronds->m_pTexCoords0[i * 2 + 1];

  000a2	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  000a5	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000ac	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 604  : 
; 605  : 			// texcoords for layer 1 (if enabled)
; 606  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 607  : 			pVertexBuffer->m_fShadowCoords[0] = pFronds->m_pTexCoords1[i * 2];

  000af	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]
  000b2	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 608  : 			pVertexBuffer->m_fShadowCoords[1] = pFronds->m_pTexCoords1[i * 2 + 1];

  000bb	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]
  000be	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000c2	42		 inc	 edx
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000c6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 609  : #endif
; 610  : 
; 611  : 			// extra data for gpu wind
; 612  : #ifdef WRAPPER_USE_GPU_WIND
; 613  : 			pVertexBuffer->m_fWindIndex = 4.0f * pFronds->m_pWindMatrixIndices[i];
; 614  : 			pVertexBuffer->m_fWindWeight = pFronds->m_pWindWeights[i];
; 615  : #endif
; 616  : 
; 617  : 			++pVertexBuffer;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000cc	83 c0 20	 add	 eax, 32			; 00000020H
  000cf	89 45 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], eax
  000d2	3b 97 7c 02 00
	00		 cmp	 edx, DWORD PTR [edi+636]
  000d8	72 96		 jb	 SHORT $LL4@SetupFrond
  000da	8d b7 78 02 00
	00		 lea	 esi, DWORD PTR [edi+632]
$LN3@SetupFrond:

; 618  : 		}
; 619  : 		m_pFrondVertexBuffer->Unlock();

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	50		 push	 eax
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	ff 51 30	 call	 DWORD PTR [ecx+48]

; 620  : 
; 621  : 		// create and fill the index counts for each LOD
; 622  : 		UINT unNumLodLevels = m_pSpeedTree->GetNumFrondLodLevels();

  000e8	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000ee	e8 00 00 00 00	 call	 ?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumFrondLodLevels
  000f3	0f b7 f0	 movzx	 esi, ax

; 623  : 		m_pFrondIndexCounts = new unsigned short[unNumLodLevels];

  000f6	33 c9		 xor	 ecx, ecx
  000f8	8b c6		 mov	 eax, esi
  000fa	89 75 f0	 mov	 DWORD PTR _unNumLodLevels$1$[ebp], esi
  000fd	ba 02 00 00 00	 mov	 edx, 2
  00102	f7 e2		 mul	 edx
  00104	0f 90 c1	 seto	 cl
  00107	f7 d9		 neg	 ecx
  00109	0b c8		 or	 ecx, eax
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00111	83 c4 04	 add	 esp, 4
  00114	89 87 84 02 00
	00		 mov	 DWORD PTR [edi+644], eax
  0011a	33 db		 xor	 ebx, ebx

; 624  : 		for (WORD j = 0; j < unNumLodLevels; ++j)

  0011c	85 f6		 test	 esi, esi
  0011e	74 4b		 je	 SHORT $LN6@SetupFrond
  00120	33 f6		 xor	 esi, esi
$LL7@SetupFrond:

; 625  : 		{
; 626  : 			// force update for this LOD
; 627  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, j);

  00122	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00128	6a ff		 push	 -1
  0012a	53		 push	 ebx
  0012b	6a ff		 push	 -1
  0012d	6a 02		 push	 2
  0012f	ff b7 64 02 00
	00		 push	 DWORD PTR [edi+612]
  00135	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 628  : 
; 629  : 			// check if this LOD has fronds
; 630  : 			if (pFronds->m_usNumStrips > 0)

  0013a	8b 45 f8	 mov	 eax, DWORD PTR tv736[ebp]
  0013d	66 83 78 40 00	 cmp	 WORD PTR [eax+64], 0
  00142	76 12		 jbe	 SHORT $LN9@SetupFrond

; 631  : 				m_pFrondIndexCounts[j] = pFronds->m_pStripLengths[0];

  00144	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00147	8b 8f 84 02 00
	00		 mov	 ecx, DWORD PTR [edi+644]
  0014d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00150	66 89 04 71	 mov	 WORD PTR [ecx+esi*2], ax
  00154	eb 0c		 jmp	 SHORT $LN5@SetupFrond
$LN9@SetupFrond:

; 632  : 			else
; 633  : 				m_pFrondIndexCounts[j] = 0;

  00156	8b 87 84 02 00
	00		 mov	 eax, DWORD PTR [edi+644]
  0015c	33 c9		 xor	 ecx, ecx
  0015e	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
$LN5@SetupFrond:

; 624  : 		for (WORD j = 0; j < unNumLodLevels; ++j)

  00162	43		 inc	 ebx
  00163	0f b7 f3	 movzx	 esi, bx
  00166	3b 75 f0	 cmp	 esi, DWORD PTR _unNumLodLevels$1$[ebp]
  00169	72 b7		 jb	 SHORT $LL7@SetupFrond
$LN6@SetupFrond:

; 634  : 		}
; 635  : 		// go back to highest LOD
; 636  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, 0);

  0016b	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00171	6a ff		 push	 -1
  00173	6a 00		 push	 0
  00175	6a ff		 push	 -1
  00177	6a 02		 push	 2
  00179	ff b7 64 02 00
	00		 push	 DWORD PTR [edi+612]
  0017f	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 637  : 
; 638  : 		// the first LOD level contains the most indices of all the levels, so
; 639  : 		// we use its size to allocate the index buffer
; 640  : 		ms_lpd3dDevice->CreateIndexBuffer(m_pFrondIndexCounts[0] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pFrondIndexBuffer);

  00184	8b 87 84 02 00
	00		 mov	 eax, DWORD PTR [edi+644]
  0018a	8d b7 80 02 00
	00		 lea	 esi, DWORD PTR [edi+640]
  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00196	56		 push	 esi
  00197	6a 01		 push	 1
  00199	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0019c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019e	03 c0		 add	 eax, eax
  001a0	6a 65		 push	 101			; 00000065H
  001a2	6a 08		 push	 8
  001a4	50		 push	 eax
  001a5	51		 push	 ecx
  001a6	ff 52 60	 call	 DWORD PTR [edx+96]

; 641  : 
; 642  : 		// fill the index buffer
; 643  : 		unsigned short * pIndexBuffer = NULL;
; 644  : 		m_pFrondIndexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pIndexBuffer), 0);

  001a9	8b 06		 mov	 eax, DWORD PTR [esi]
  001ab	8d 55 f4	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  001ae	6a 00		 push	 0
  001b0	52		 push	 edx
  001b1	6a 00		 push	 0
  001b3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  001ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bc	6a 00		 push	 0
  001be	50		 push	 eax
  001bf	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 645  : 		memcpy(pIndexBuffer, pFronds->m_pStrips[0], pFronds->m_pStripLengths[0] * sizeof(unsigned short));

  001c2	8b 4d f8	 mov	 ecx, DWORD PTR tv736[ebp]
  001c5	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  001c8	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001cb	03 c0		 add	 eax, eax
  001cd	50		 push	 eax
  001ce	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  001d1	ff 30		 push	 DWORD PTR [eax]
  001d3	ff 75 f4	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  001d6	e8 00 00 00 00	 call	 _memcpy

; 646  : 		m_pFrondIndexBuffer->Unlock();

  001db	8b 06		 mov	 eax, DWORD PTR [esi]
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e2	50		 push	 eax
  001e3	ff 51 30	 call	 DWORD PTR [ecx+48]
  001e6	5e		 pop	 esi
$LN8@SetupFrond:

; 647  : 	}
; 648  : }

  001e7	5f		 pop	 edi
  001e8	5b		 pop	 ebx
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c3		 ret	 0
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_pIndexBuffer$1 = -12					; size = 4
_unNumLodLevels$1$ = -8					; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupBranchBuffers, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 483  : 	// reference to branch structure
; 484  : 	CSpeedTreeRT::SGeometry::SIndexed* pBranches = &(m_pGeometryCache->m_sBranches);

  0000a	8b 9f 64 02 00
	00		 mov	 ebx, DWORD PTR [edi+612]

; 485  : 	m_unBranchVertexCount = pBranches->m_usVertexCount; // we asked for a contiguous strip

  00010	0f b7 53 10	 movzx	 edx, WORD PTR [ebx+16]
  00014	89 97 6c 02 00
	00		 mov	 DWORD PTR [edi+620], edx

; 486  : 
; 487  : 	// check if this tree has branches
; 488  : 	if (m_unBranchVertexCount > 1)

  0001a	83 fa 01	 cmp	 edx, 1
  0001d	0f 86 b9 01 00
	00		 jbe	 $LN8@SetupBranc

; 489  : 	{
; 490  : 		// create the vertex buffer for storing branch vertices
; 491  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 492  : 
; 493  : #ifndef WRAPPER_USE_CPU_WIND
; 494  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00028	56		 push	 esi
  00029	8d b7 68 02 00
	00		 lea	 esi, DWORD PTR [edi+616]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  00036	56		 push	 esi
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	6a 01		 push	 1
  0003b	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00041	c1 e2 05	 shl	 edx, 5
  00044	6a 08		 push	 8
  00046	52		 push	 edx
  00047	50		 push	 eax
  00048	ff 51 5c	 call	 DWORD PTR [ecx+92]

; 495  : 		// fill the vertex buffer by interleaving SpeedTree data
; 496  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00050	6a 00		 push	 0
  00052	52		 push	 edx
  00053	6a 00		 push	 0
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 497  : #else
; 498  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_SYSTEMMEM, &m_pBranchVertexBuffer);
; 499  : 		// fill the vertex buffer by interleaving SpeedTree data
; 500  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 501  : #endif
; 502  : 		{
; 503  : 			for (UINT i = 0; i < m_unBranchVertexCount; ++i)

  0005d	33 d2		 xor	 edx, edx
  0005f	39 97 6c 02 00
	00		 cmp	 DWORD PTR [edi+620], edx
  00065	76 79		 jbe	 SHORT $LN3@SetupBranc

; 489  : 	{
; 490  : 		// create the vertex buffer for storing branch vertices
; 491  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 492  : 
; 493  : #ifndef WRAPPER_USE_CPU_WIND
; 494  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer);

  00067	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0006a	33 f6		 xor	 esi, esi
  0006c	0f 1f 40 00	 npad	 4
$LL4@SetupBranc:

; 504  : 			{
; 505  : 				// position
; 506  : 				memcpy(&pVertexBuffer->m_vPosition, &(pBranches->m_pCoords[i * 3]), 3 * sizeof(float));

  00070	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00073	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00076	f3 0f 7e 44 31
	f4		 movq	 xmm0, QWORD PTR [ecx+esi-12]
  0007c	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00080	8b 4c 31 fc	 mov	 ecx, DWORD PTR [ecx+esi-4]
  00084	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00087	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 507  : 
; 508  : 				// normal or color
; 509  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 510  : 				memcpy(&pVertexBuffer->m_vNormal, &(pBranches->m_pNormals[i * 3]), 3 * sizeof(float));
; 511  : #else
; 512  : 				pVertexBuffer->m_dwDiffuseColor = pBranches->m_pColors[i];

  0008a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0008d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00093	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 513  : #endif
; 514  : 
; 515  : 				// texcoords for layer 0
; 516  : 				pVertexBuffer->m_fTexCoords[0] = pBranches->m_pTexCoords0[i * 2];

  00096	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00099	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0009f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 517  : 				pVertexBuffer->m_fTexCoords[1] = pBranches->m_pTexCoords0[i * 2 + 1];

  000a2	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  000a5	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000ac	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 518  : 
; 519  : 				// texcoords for layer 1 (if enabled)
; 520  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 521  : 				pVertexBuffer->m_fShadowCoords[0] = pBranches->m_pTexCoords1[i * 2];

  000af	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000b2	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 522  : 				pVertexBuffer->m_fShadowCoords[1] = pBranches->m_pTexCoords1[i * 2 + 1];

  000bb	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000be	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000c2	42		 inc	 edx
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000c6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 523  : #endif
; 524  : 
; 525  : 				// extra data for gpu wind
; 526  : #ifdef WRAPPER_USE_GPU_WIND
; 527  : 				pVertexBuffer->m_fWindIndex = 4.0f * pBranches->m_pWindMatrixIndices[i];
; 528  : 				pVertexBuffer->m_fWindWeight = pBranches->m_pWindWeights[i];
; 529  : #endif
; 530  : 
; 531  : 				++pVertexBuffer;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000cc	83 c0 20	 add	 eax, 32			; 00000020H
  000cf	89 45 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], eax
  000d2	3b 97 6c 02 00
	00		 cmp	 edx, DWORD PTR [edi+620]
  000d8	72 96		 jb	 SHORT $LL4@SetupBranc
  000da	8d b7 68 02 00
	00		 lea	 esi, DWORD PTR [edi+616]
$LN3@SetupBranc:

; 532  : 			}
; 533  : 			m_pBranchVertexBuffer->Unlock();

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	50		 push	 eax
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	ff 51 30	 call	 DWORD PTR [ecx+48]

; 534  : 		}
; 535  : 
; 536  : 		// create and fill the index counts for each LOD
; 537  : 		UINT unNumLodLevels = m_pSpeedTree->GetNumBranchLodLevels();

  000e8	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000ee	e8 00 00 00 00	 call	 ?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumBranchLodLevels
  000f3	0f b7 c0	 movzx	 eax, ax

; 538  : 		m_pBranchIndexCounts = new unsigned short[unNumLodLevels];

  000f6	33 c9		 xor	 ecx, ecx
  000f8	89 45 f8	 mov	 DWORD PTR _unNumLodLevels$1$[ebp], eax
  000fb	ba 02 00 00 00	 mov	 edx, 2
  00100	f7 e2		 mul	 edx
  00102	0f 90 c1	 seto	 cl
  00105	f7 d9		 neg	 ecx
  00107	0b c8		 or	 ecx, eax
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 539  : 		for (UINT i = 0; i < unNumLodLevels; ++i)

  0010f	33 f6		 xor	 esi, esi
  00111	89 87 74 02 00
	00		 mov	 DWORD PTR [edi+628], eax
  00117	83 c4 04	 add	 esp, 4
  0011a	39 75 f8	 cmp	 DWORD PTR _unNumLodLevels$1$[ebp], esi
  0011d	76 44		 jbe	 SHORT $LN6@SetupBranc
  0011f	90		 npad	 1
$LL7@SetupBranc:

; 540  : 		{
; 541  : 			// force update for particular LOD
; 542  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, i);

  00120	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00126	6a ff		 push	 -1
  00128	6a ff		 push	 -1
  0012a	56		 push	 esi
  0012b	6a 01		 push	 1
  0012d	ff b7 64 02 00
	00		 push	 DWORD PTR [edi+612]
  00133	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 543  : 
; 544  : 			// check if this LOD has branches
; 545  : 			if (pBranches->m_usNumStrips > 0)

  00138	66 83 7b 04 00	 cmp	 WORD PTR [ebx+4], 0
  0013d	76 12		 jbe	 SHORT $LN9@SetupBranc

; 546  : 				m_pBranchIndexCounts[i] = pBranches->m_pStripLengths[0];

  0013f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00142	8b 8f 74 02 00
	00		 mov	 ecx, DWORD PTR [edi+628]
  00148	66 8b 00	 mov	 ax, WORD PTR [eax]
  0014b	66 89 04 71	 mov	 WORD PTR [ecx+esi*2], ax
  0014f	eb 0c		 jmp	 SHORT $LN5@SetupBranc
$LN9@SetupBranc:

; 547  : 			else
; 548  : 				m_pBranchIndexCounts[i] = 0;

  00151	8b 87 74 02 00
	00		 mov	 eax, DWORD PTR [edi+628]
  00157	33 c9		 xor	 ecx, ecx
  00159	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
$LN5@SetupBranc:

; 539  : 		for (UINT i = 0; i < unNumLodLevels; ++i)

  0015d	46		 inc	 esi
  0015e	3b 75 f8	 cmp	 esi, DWORD PTR _unNumLodLevels$1$[ebp]
  00161	72 bd		 jb	 SHORT $LL7@SetupBranc
$LN6@SetupBranc:

; 549  : 		}
; 550  : 		// set back to highest LOD
; 551  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, 0);

  00163	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00169	6a ff		 push	 -1
  0016b	6a ff		 push	 -1
  0016d	6a 00		 push	 0
  0016f	6a 01		 push	 1
  00171	ff b7 64 02 00
	00		 push	 DWORD PTR [edi+612]
  00177	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 552  : 
; 553  : 		// the first LOD level contains the most indices of all the levels, so
; 554  : 		// we use its size to allocate the index buffer
; 555  : 		ms_lpd3dDevice->CreateIndexBuffer(m_pBranchIndexCounts[0] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pBranchIndexBuffer);

  0017c	8b 87 74 02 00
	00		 mov	 eax, DWORD PTR [edi+628]
  00182	8d b7 70 02 00
	00		 lea	 esi, DWORD PTR [edi+624]
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0018e	56		 push	 esi
  0018f	6a 01		 push	 1
  00191	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	03 c0		 add	 eax, eax
  00198	6a 65		 push	 101			; 00000065H
  0019a	6a 08		 push	 8
  0019c	50		 push	 eax
  0019d	51		 push	 ecx
  0019e	ff 52 60	 call	 DWORD PTR [edx+96]

; 556  : 
; 557  : 		// fill the index buffer
; 558  : 		unsigned short* pIndexBuffer = NULL;
; 559  : 		m_pBranchIndexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pIndexBuffer), 0);

  001a1	8b 06		 mov	 eax, DWORD PTR [esi]
  001a3	8d 55 f4	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  001a6	6a 00		 push	 0
  001a8	52		 push	 edx
  001a9	6a 00		 push	 0
  001ab	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	6a 00		 push	 0
  001b6	50		 push	 eax
  001b7	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 560  : 		memcpy(pIndexBuffer, pBranches->m_pStrips[0], pBranches->m_pStripLengths[0] * sizeof(unsigned short));

  001ba	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001bd	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c0	03 c0		 add	 eax, eax
  001c2	50		 push	 eax
  001c3	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  001c6	ff 30		 push	 DWORD PTR [eax]
  001c8	ff 75 f4	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  001cb	e8 00 00 00 00	 call	 _memcpy

; 561  : 		m_pBranchIndexBuffer->Unlock();

  001d0	8b 06		 mov	 eax, DWORD PTR [esi]
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d7	50		 push	 eax
  001d8	ff 51 30	 call	 DWORD PTR [ecx+48]
  001db	5e		 pop	 esi
$LN8@SetupBranc:

; 562  : 	}
; 563  : }

  001dc	5f		 pop	 edi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ PROC		; CSpeedTreeWrapper::SetupBuffers, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 464  : 	// read all the geometry for highest LOD into the geometry cache (just a precaution, it's updated later)
; 465  : 	m_pSpeedTree->SetLodLevel(1.0f);

  00026	51		 push	 ecx
  00027	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  0002d	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00034	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 466  : 
; 467  : 	if (m_pGeometryCache == NULL)

  00039	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0003f	85 c0		 test	 eax, eax
  00041	75 33		 jne	 SHORT $LN2@SetupBuffe

; 468  : 		m_pGeometryCache = new CSpeedTreeRT::SGeometry;

  00043	68 20 01 00 00	 push	 288			; 00000120H
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN4@SetupBuffe
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ??0SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::SGeometry
  00065	eb 02		 jmp	 SHORT $LN5@SetupBuffe
$LN4@SetupBuffe:
  00067	33 c0		 xor	 eax, eax
$LN5@SetupBuffe:
  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	89 86 64 02 00
	00		 mov	 DWORD PTR [esi+612], eax
$LN2@SetupBuffe:

; 469  : 
; 470  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache);

  00076	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  0007c	6a ff		 push	 -1
  0007e	6a ff		 push	 -1
  00080	6a ff		 push	 -1
  00082	6a 0f		 push	 15			; 0000000fH
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 471  : 
; 472  : 	// setup the buffers for each part
; 473  : 	SetupBranchBuffers();

  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBranchBuffers

; 474  : 	SetupFrondBuffers();

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupFrondBuffers

; 475  : 	SetupLeafBuffers();

  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupLeafBuffers

; 476  : }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5e		 pop	 esi
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0:
  00000	68 20 01 00 00	 push	 288			; 00000120H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP		; CSpeedTreeWrapper::SetupBuffers
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ PROC		; CSpeedTreeWrapper::CleanUpMemory, COMDAT
; _this$ = ecx

; 1268 : 	if (!m_bIsInstance)

  00000	80 b9 50 02 00
	00 00		 cmp	 BYTE PTR [ecx+592], 0
  00007	75 0b		 jne	 SHORT $LN2@CleanUpMem

; 1269 : 		m_pSpeedTree->DeleteTransientData();

  00009	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]
  0000f	e9 00 00 00 00	 jmp	 ?DeleteTransientData@CSpeedTreeRT@@QAEXXZ ; CSpeedTreeRT::DeleteTransientData
$LN2@CleanUpMem:

; 1270 : }

  00014	c3		 ret	 0
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ ENDP		; CSpeedTreeWrapper::CleanUpMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?Advance@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?Advance@CSpeedTreeWrapper@@QAEXXZ PROC			; CSpeedTreeWrapper::Advance, COMDAT
; _this$ = ecx

; 736  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 737  : 	// compute LOD level (based on distance from camera)
; 738  : 	m_pSpeedTree->ComputeLodLevel();

  00003	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00009	e8 00 00 00 00	 call	 ?ComputeLodLevel@CSpeedTreeRT@@QAEXXZ ; CSpeedTreeRT::ComputeLodLevel

; 739  : 	m_pSpeedTree->SetLodLevel(1.0f);

  0000e	51		 push	 ecx
  0000f	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00015	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0001c	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel
  00021	5e		 pop	 esi

; 740  : 
; 741  : 	// compute wind
; 742  : #ifdef WRAPPER_USE_CPU_WIND
; 743  : 	m_pSpeedTree->ComputeWindEffects(true, true, true);
; 744  : #endif
; 745  : }

  00022	c3		 ret	 0
?Advance@CSpeedTreeWrapper@@QAEXXZ ENDP			; CSpeedTreeWrapper::Advance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z PROC	; CSpeedTreeWrapper::DeleteInstance, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 823  : 	while (itor != m_vInstances.end())

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pInstance$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b b7 54 02 00
	00		 mov	 esi, DWORD PTR [edi+596]
  00011	8b 87 58 02 00
	00		 mov	 eax, DWORD PTR [edi+600]
  00017	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 823  : 	while (itor != m_vInstances.end())

  00019	74 2c		 je	 SHORT $LN3@DeleteInst
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@DeleteInst:

; 824  : 	{
; 825  : 		if (*itor == pInstance)

  00020	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00023	39 1e		 cmp	 DWORD PTR [esi], ebx
  00025	75 1a		 jne	 SHORT $LN4@DeleteInst
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 4372 :             return _Copy_memmove(_First, _Last, _Dest);

  00027	56		 push	 esi
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1355 :         --_Mylast;

  00032	83 87 58 02 00
	00 fc		 add	 DWORD PTR [edi+600], -4	; fffffffcH
  00039	8b 87 58 02 00
	00		 mov	 eax, DWORD PTR [edi+600]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 828  : 		}

  0003f	eb 02		 jmp	 SHORT $LN5@DeleteInst
$LN4@DeleteInst:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 75   :         ++_Ptr;

  00041	8b f1		 mov	 esi, ecx
$LN5@DeleteInst:

; 149  :         return _Ptr == _Right._Ptr;

  00043	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 823  : 	while (itor != m_vInstances.end())

  00045	75 d9		 jne	 SHORT $LL2@DeleteInst
$LN3@DeleteInst:

; 829  : 		else
; 830  : 			++itor;
; 831  : 	}
; 832  : 	delete pInstance;

  00047	85 db		 test	 ebx, ebx
  00049	74 08		 je	 SHORT $LN7@DeleteInst
  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	8b cb		 mov	 ecx, ebx
  0004f	6a 01		 push	 1
  00051	ff 10		 call	 DWORD PTR [eax]
$LN7@DeleteInst:

; 833  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z ENDP	; CSpeedTreeWrapper::DeleteInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pInstance$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ PROC	; CSpeedTreeWrapper::MakeInstance, COMDAT
; _this$ = ecx

; 751  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 752  : 	CSpeedTreeWrapper * pInstance = new CSpeedTreeWrapper;

  00027	68 e4 03 00 00	 push	 996			; 000003e4H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	85 c0		 test	 eax, eax
  00040	74 0b		 je	 SHORT $LN6@MakeInstan
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ??0CSpeedTreeWrapper@@QAE@XZ ; CSpeedTreeWrapper::CSpeedTreeWrapper
  00049	8b f0		 mov	 esi, eax
  0004b	eb 02		 jmp	 SHORT $LN7@MakeInstan
$LN6@MakeInstan:
  0004d	33 f6		 xor	 esi, esi
$LN7@MakeInstan:

; 753  : 
; 754  : 	// make an instance of this object's SpeedTree
; 755  : 	pInstance->m_bIsInstance = true;

  0004f	c6 86 50 02 00
	00 01		 mov	 BYTE PTR [esi+592], 1

; 756  : 	pInstance->m_pSpeedTree = m_pSpeedTree->MakeInstance();

  00056	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	89 75 f0	 mov	 DWORD PTR _pInstance$[ebp], esi
  00066	e8 00 00 00 00	 call	 ?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ ; CSpeedTreeRT::MakeInstance
  0006b	89 86 48 02 00
	00		 mov	 DWORD PTR [esi+584], eax

; 757  : 
; 758  : 	if (pInstance->m_pSpeedTree)

  00071	85 c0		 test	 eax, eax
  00073	0f 84 42 02 00
	00		 je	 $LN2@MakeInstan

; 759  :     {
; 760  : 		// use the same materials
; 761  : 		pInstance->m_cBranchMaterial = m_cBranchMaterial;

  00079	0f 10 87 b8 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+696]

; 762  : 		pInstance->m_cLeafMaterial = m_cLeafMaterial;
; 763  : 		pInstance->m_cFrondMaterial = m_cFrondMaterial;
; 764  : 		pInstance->m_CompositeImageInstance.SetImagePointer(m_CompositeImageInstance.GetGraphicImagePointer());

  00080	8d 8f c4 03 00
	00		 lea	 ecx, DWORD PTR [edi+964]
  00086	0f 11 86 b8 02
	00 00		 movups	 XMMWORD PTR [esi+696], xmm0
  0008d	0f 10 87 c8 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+712]
  00094	0f 11 86 c8 02
	00 00		 movups	 XMMWORD PTR [esi+712], xmm0
  0009b	0f 10 87 d8 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+728]
  000a2	0f 11 86 d8 02
	00 00		 movups	 XMMWORD PTR [esi+728], xmm0
  000a9	0f 10 87 e8 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+744]
  000b0	0f 11 86 e8 02
	00 00		 movups	 XMMWORD PTR [esi+744], xmm0
  000b7	8b 87 f8 02 00
	00		 mov	 eax, DWORD PTR [edi+760]
  000bd	89 86 f8 02 00
	00		 mov	 DWORD PTR [esi+760], eax
  000c3	0f 10 87 fc 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+764]
  000ca	0f 11 86 fc 02
	00 00		 movups	 XMMWORD PTR [esi+764], xmm0
  000d1	0f 10 87 0c 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+780]
  000d8	0f 11 86 0c 03
	00 00		 movups	 XMMWORD PTR [esi+780], xmm0
  000df	0f 10 87 1c 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+796]
  000e6	0f 11 86 1c 03
	00 00		 movups	 XMMWORD PTR [esi+796], xmm0
  000ed	0f 10 87 2c 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+812]
  000f4	0f 11 86 2c 03
	00 00		 movups	 XMMWORD PTR [esi+812], xmm0
  000fb	8b 87 3c 03 00
	00		 mov	 eax, DWORD PTR [edi+828]
  00101	89 86 3c 03 00
	00		 mov	 DWORD PTR [esi+828], eax
  00107	0f 10 87 40 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+832]
  0010e	0f 11 86 40 03
	00 00		 movups	 XMMWORD PTR [esi+832], xmm0
  00115	0f 10 87 50 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+848]
  0011c	0f 11 86 50 03
	00 00		 movups	 XMMWORD PTR [esi+848], xmm0
  00123	0f 10 87 60 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+864]
  0012a	0f 11 86 60 03
	00 00		 movups	 XMMWORD PTR [esi+864], xmm0
  00131	0f 10 87 70 03
	00 00		 movups	 xmm0, XMMWORD PTR [edi+880]
  00138	0f 11 86 70 03
	00 00		 movups	 XMMWORD PTR [esi+880], xmm0
  0013f	8b 87 80 03 00
	00		 mov	 eax, DWORD PTR [edi+896]
  00145	89 86 80 03 00
	00		 mov	 DWORD PTR [esi+896], eax
  0014b	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00150	50		 push	 eax
  00151	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00157	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 765  : 		pInstance->m_BranchImageInstance.SetImagePointer(m_BranchImageInstance.GetGraphicImagePointer());

  0015c	8d 8f 84 03 00
	00		 lea	 ecx, DWORD PTR [edi+900]
  00162	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00167	50		 push	 eax
  00168	8d 8e 84 03 00
	00		 lea	 ecx, DWORD PTR [esi+900]
  0016e	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 766  : 
; 767  : 		if (!m_ShadowImageInstance.IsEmpty())

  00173	8d 8f a4 03 00
	00		 lea	 ecx, DWORD PTR [edi+932]
  00179	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0017e	84 c0		 test	 al, al
  00180	75 17		 jne	 SHORT $LN4@MakeInstan

; 768  : 			pInstance->m_ShadowImageInstance.SetImagePointer(m_ShadowImageInstance.GetGraphicImagePointer());

  00182	8d 8f a4 03 00
	00		 lea	 ecx, DWORD PTR [edi+932]
  00188	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  0018d	50		 push	 eax
  0018e	8d 8e a4 03 00
	00		 lea	 ecx, DWORD PTR [esi+932]
  00194	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN4@MakeInstan:

; 769  : 
; 770  : 		pInstance->m_pTextureInfo = m_pTextureInfo;

  00199	8b 87 4c 02 00
	00		 mov	 eax, DWORD PTR [edi+588]

; 771  : 
; 772  : 		// use the same geometry cache
; 773  : 		pInstance->m_pGeometryCache = m_pGeometryCache;
; 774  : 
; 775  : 		// use the same buffers
; 776  : 		pInstance->m_pBranchIndexBuffer = m_pBranchIndexBuffer;
; 777  : 		pInstance->m_pBranchIndexCounts = m_pBranchIndexCounts;
; 778  : 		pInstance->m_pBranchVertexBuffer = m_pBranchVertexBuffer;
; 779  : 		pInstance->m_unBranchVertexCount = m_unBranchVertexCount;
; 780  : 
; 781  : 		pInstance->m_pFrondIndexBuffer = m_pFrondIndexBuffer;
; 782  : 		pInstance->m_pFrondIndexCounts = m_pFrondIndexCounts;
; 783  : 		pInstance->m_pFrondVertexBuffer = m_pFrondVertexBuffer;
; 784  : 		pInstance->m_unFrondVertexCount = m_unFrondVertexCount;
; 785  : 
; 786  : 		pInstance->m_pLeafVertexBuffer = m_pLeafVertexBuffer;
; 787  : 		pInstance->m_usNumLeafLods = m_usNumLeafLods;
; 788  : 		pInstance->m_pLeavesUpdatedByCpu = m_pLeavesUpdatedByCpu;
; 789  : 
; 790  : 		// new stuff
; 791  : 		memcpy(pInstance->m_afPos, m_afPos, 3 * sizeof(float));
; 792  : 		memcpy(pInstance->m_afBoundingBox, m_afBoundingBox, 6 * sizeof(float));
; 793  : 		pInstance->m_pInstanceOf = this;
; 794  : 		m_vInstances.push_back(pInstance);

  0019f	8d 8f 54 02 00
	00		 lea	 ecx, DWORD PTR [edi+596]
  001a5	89 86 4c 02 00
	00		 mov	 DWORD PTR [esi+588], eax
  001ab	8b 87 64 02 00
	00		 mov	 eax, DWORD PTR [edi+612]
  001b1	89 86 64 02 00
	00		 mov	 DWORD PTR [esi+612], eax
  001b7	8b 87 70 02 00
	00		 mov	 eax, DWORD PTR [edi+624]
  001bd	89 86 70 02 00
	00		 mov	 DWORD PTR [esi+624], eax
  001c3	8b 87 74 02 00
	00		 mov	 eax, DWORD PTR [edi+628]
  001c9	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  001cf	8b 87 68 02 00
	00		 mov	 eax, DWORD PTR [edi+616]
  001d5	89 86 68 02 00
	00		 mov	 DWORD PTR [esi+616], eax
  001db	8b 87 6c 02 00
	00		 mov	 eax, DWORD PTR [edi+620]
  001e1	89 86 6c 02 00
	00		 mov	 DWORD PTR [esi+620], eax
  001e7	8b 87 80 02 00
	00		 mov	 eax, DWORD PTR [edi+640]
  001ed	89 86 80 02 00
	00		 mov	 DWORD PTR [esi+640], eax
  001f3	8b 87 84 02 00
	00		 mov	 eax, DWORD PTR [edi+644]
  001f9	89 86 84 02 00
	00		 mov	 DWORD PTR [esi+644], eax
  001ff	8b 87 78 02 00
	00		 mov	 eax, DWORD PTR [edi+632]
  00205	89 86 78 02 00
	00		 mov	 DWORD PTR [esi+632], eax
  0020b	8b 87 7c 02 00
	00		 mov	 eax, DWORD PTR [edi+636]
  00211	89 86 7c 02 00
	00		 mov	 DWORD PTR [esi+636], eax
  00217	8b 87 8c 02 00
	00		 mov	 eax, DWORD PTR [edi+652]
  0021d	89 86 8c 02 00
	00		 mov	 DWORD PTR [esi+652], eax
  00223	66 8b 87 88 02
	00 00		 mov	 ax, WORD PTR [edi+648]
  0022a	66 89 86 88 02
	00 00		 mov	 WORD PTR [esi+648], ax
  00231	8b 87 90 02 00
	00		 mov	 eax, DWORD PTR [edi+656]
  00237	89 86 90 02 00
	00		 mov	 DWORD PTR [esi+656], eax
  0023d	f3 0f 7e 87 94
	02 00 00	 movq	 xmm0, QWORD PTR [edi+660]
  00245	66 0f d6 86 94
	02 00 00	 movq	 QWORD PTR [esi+660], xmm0
  0024d	8b 87 9c 02 00
	00		 mov	 eax, DWORD PTR [edi+668]
  00253	89 86 9c 02 00
	00		 mov	 DWORD PTR [esi+668], eax
  00259	0f 10 87 a0 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+672]
  00260	0f 11 86 a0 02
	00 00		 movups	 XMMWORD PTR [esi+672], xmm0
  00267	f3 0f 7e 87 b0
	02 00 00	 movq	 xmm0, QWORD PTR [edi+688]
  0026f	66 0f d6 86 b0
	02 00 00	 movq	 QWORD PTR [esi+688], xmm0
  00277	89 be 60 02 00
	00		 mov	 DWORD PTR [esi+608], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0027d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00280	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00283	74 19		 je	 SHORT $LN14@MakeInstan

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00285	89 30		 mov	 DWORD PTR [eax], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 803  : 	return pInstance;

  00287	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00289	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 804  : }

  0028d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00290	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00297	59		 pop	 ecx
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c3		 ret	 0
$LN14@MakeInstan:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0029e	8d 55 f0	 lea	 edx, DWORD PTR _pInstance$[ebp]
  002a1	52		 push	 edx
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 803  : 	return pInstance;

  002a8	8b c6		 mov	 eax, esi

; 804  : }

  002aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b4	59		 pop	 ecx
  002b5	5f		 pop	 edi
  002b6	5e		 pop	 esi
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c3		 ret	 0
$LN2@MakeInstan:

; 795  :     }
; 796  :     else
; 797  : 	{
; 798  : 		fprintf(stderr, "SpeedTreeRT Error: %s\n", m_pSpeedTree->GetCurrentError());

  002bb	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
  002c6	6a 02		 push	 2
  002c8	e8 00 00 00 00	 call	 ___acrt_iob_func
  002cd	83 c4 04	 add	 esp, 4
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 _fprintf

; 799  :         delete pInstance;

  002d6	8b 06		 mov	 eax, DWORD PTR [esi]
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002db	8b ce		 mov	 ecx, esi
  002dd	6a 01		 push	 1
  002df	ff 10		 call	 DWORD PTR [eax]

; 803  : 	return pInstance;

  002e1	33 c0		 xor	 eax, eax

; 804  : }

  002e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ed	59		 pop	 ecx
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi
  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0:
  00000	68 e4 03 00 00	 push	 996			; 000003e4H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ ENDP	; CSpeedTreeWrapper::MakeInstance
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z
_TEXT	SEGMENT
_nCount$ = 8						; size = 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z PROC	; CSpeedTreeWrapper::GetInstances, COMDAT
; _this$ = ecx

; 811  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 91 58 02 00
	00		 mov	 edx, DWORD PTR [ecx+600]
  00009	2b 91 54 02 00
	00		 sub	 edx, DWORD PTR [ecx+596]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 812  : 	nCount = m_vInstances.size();

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nCount$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	c1 fa 02	 sar	 edx, 2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 812  : 	nCount = m_vInstances.size();

  00015	89 10		 mov	 DWORD PTR [eax], edx

; 813  : 	if (nCount)

  00017	85 d2		 test	 edx, edx
  00019	74 0a		 je	 SHORT $LN2@GetInstanc

; 814  : 		return &(m_vInstances[0]);

  0001b	8b 81 54 02 00
	00		 mov	 eax, DWORD PTR [ecx+596]

; 817  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@GetInstanc:

; 815  : 	else
; 816  : 		return NULL;

  00025	33 c0		 xor	 eax, eax

; 817  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ENDP	; CSpeedTreeWrapper::GetInstances
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
_sVertex$1 = -84					; size = 80
_sVertex$2 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::RenderBillboards, COMDAT
; _this$ = ecx

; 1187 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	57		 push	 edi

; 1188 : 	// render billboards in immediate mode (as close as DirectX comes to immediate mode)
; 1189 : #ifdef WRAPPER_BILLBOARD_MODE
; 1190 : 	if (!m_CompositeImageInstance.IsEmpty())

  00014	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  0001a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0001f	84 c0		 test	 al, al
  00021	75 20		 jne	 SHORT $LN2@RenderBill

; 1191 : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00023	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00029	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN2@RenderBill:

; 1192 : 
; 1193 : 	PositionTree();

  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 1194 : 
; 1195 : 	struct SBillboardVertex
; 1196 : 	{
; 1197 : 		float fX, fY, fZ;
; 1198 : 		float fU, fV;
; 1199 : 	};
; 1200 : 
; 1201 : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BillboardGeometry);

  0004a	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00050	6a ff		 push	 -1
  00052	6a ff		 push	 -1
  00054	6a ff		 push	 -1
  00056	6a 08		 push	 8
  00058	ff b6 64 02 00
	00		 push	 DWORD PTR [esi+612]
  0005e	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 1202 : 
; 1203 : 	if (m_pGeometryCache->m_sBillboard0.m_bIsActive)

  00063	8b 96 64 02 00
	00		 mov	 edx, DWORD PTR [esi+612]
  00069	80 ba f0 00 00
	00 00		 cmp	 BYTE PTR [edx+240], 0
  00070	0f 84 25 01 00
	00		 je	 $LN3@RenderBill

; 1204 : 	{
; 1205 : 		const float* pCoords = m_pGeometryCache->m_sBillboard0.m_pCoords;

  00076	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]

; 1206 : 		const float* pTexCoords = m_pGeometryCache->m_sBillboard0.m_pTexCoords;

  0007c	8b 8a f4 00 00
	00		 mov	 ecx, DWORD PTR [edx+244]

; 1207 : 		SBillboardVertex sVertex[4] =
; 1208 : 		{
; 1209 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },
; 1210 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },
; 1211 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },
; 1212 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },
; 1213 : 		};
; 1214 : 
; 1215 : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ | D3DFVF_TEX1);

  00082	68 02 01 00 00	 push	 258			; 00000102H
  00087	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008b	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$2[ebp], xmm0
  00090	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00095	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$2[ebp+4], xmm0
  0009a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0009f	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$2[ebp+8], xmm0
  000a4	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000a8	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$2[ebp+12], xmm0
  000ad	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000b2	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$2[ebp+16], xmm0
  000b7	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000bc	f3 0f 11 45 c0	 movss	 DWORD PTR _sVertex$2[ebp+20], xmm0
  000c1	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000c6	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$2[ebp+24], xmm0
  000cb	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000d0	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$2[ebp+28], xmm0
  000d5	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000da	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$2[ebp+32], xmm0
  000df	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000e4	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$2[ebp+36], xmm0
  000e9	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000ee	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$2[ebp+40], xmm0
  000f3	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000f8	f3 0f 11 45 d8	 movss	 DWORD PTR _sVertex$2[ebp+44], xmm0
  000fd	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00102	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$2[ebp+48], xmm0
  00107	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0010c	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$2[ebp+52], xmm0
  00111	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00116	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$2[ebp+56], xmm0
  0011b	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00120	f3 0f 11 45 e8	 movss	 DWORD PTR _sVertex$2[ebp+60], xmm0
  00125	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0012a	f3 0f 11 45 ec	 movss	 DWORD PTR _sVertex$2[ebp+64], xmm0
  0012f	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00134	f3 0f 11 45 f0	 movss	 DWORD PTR _sVertex$2[ebp+68], xmm0
  00139	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0013e	f3 0f 11 45 f4	 movss	 DWORD PTR _sVertex$2[ebp+72], xmm0
  00143	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00148	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014e	f3 0f 11 45 f8	 movss	 DWORD PTR _sVertex$2[ebp+76], xmm0
  00153	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 1216 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard0.m_fAlphaTestValue));

  00158	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0015e	f3 0f 10 80 fc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+252]
  00166	e8 00 00 00 00	 call	 __ftoui3
  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00171	50		 push	 eax
  00172	6a 18		 push	 24			; 00000018H
  00174	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1217 : 
; 1218 : 		ms_faceCount += 2;
; 1219 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  00179	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017f	8d 45 ac	 lea	 eax, DWORD PTR _sVertex$2[ebp]
  00182	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  00189	6a 14		 push	 20			; 00000014H
  0018b	50		 push	 eax
  0018c	6a 02		 push	 2
  0018e	6a 06		 push	 6
  00190	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
  00195	8b 96 64 02 00
	00		 mov	 edx, DWORD PTR [esi+612]
$LN3@RenderBill:

; 1220 : 	}
; 1221 : 
; 1222 : 	// if tree supports 360 degree billboards, render the second
; 1223 : 	if (m_pGeometryCache->m_sBillboard1.m_bIsActive)

  0019b	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	0f 84 09 01 00
	00		 je	 $LN4@RenderBill

; 1224 : 	{
; 1225 : 		const float* pCoords = m_pGeometryCache->m_sBillboard1.m_pCoords;

  001aa	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]

; 1226 : 		const float* pTexCoords = m_pGeometryCache->m_sBillboard1.m_pTexCoords;

  001b0	8b 8a 04 01 00
	00		 mov	 ecx, DWORD PTR [edx+260]

; 1227 : 		SBillboardVertex sVertex[4] =
; 1228 : 		{
; 1229 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },

  001b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ba	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$1[ebp], xmm0
  001bf	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001c4	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$1[ebp+4], xmm0
  001c9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001ce	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$1[ebp+8], xmm0
  001d3	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001d7	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$1[ebp+12], xmm0
  001dc	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  001e1	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$1[ebp+16], xmm0

; 1230 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },

  001e6	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001eb	f3 0f 11 45 c0	 movss	 DWORD PTR _sVertex$1[ebp+20], xmm0
  001f0	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  001f5	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$1[ebp+24], xmm0
  001fa	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001ff	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$1[ebp+28], xmm0
  00204	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00209	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$1[ebp+32], xmm0
  0020e	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00213	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$1[ebp+36], xmm0

; 1231 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },

  00218	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0021d	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$1[ebp+40], xmm0
  00222	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00227	f3 0f 11 45 d8	 movss	 DWORD PTR _sVertex$1[ebp+44], xmm0
  0022c	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00231	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$1[ebp+48], xmm0
  00236	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0023b	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$1[ebp+52], xmm0
  00240	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00245	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$1[ebp+56], xmm0

; 1232 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },

  0024a	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [eax+36]
  0024f	f3 0f 11 4d e8	 movss	 DWORD PTR _sVertex$1[ebp+60], xmm1
  00254	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  00259	f3 0f 11 4d ec	 movss	 DWORD PTR _sVertex$1[ebp+64], xmm1
  0025e	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00263	f3 0f 11 4d f0	 movss	 DWORD PTR _sVertex$1[ebp+68], xmm1
  00268	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0026d	f3 0f 11 4d f4	 movss	 DWORD PTR _sVertex$1[ebp+72], xmm1
  00272	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00277	f3 0f 11 4d f8	 movss	 DWORD PTR _sVertex$1[ebp+76], xmm1

; 1233 : 		};
; 1234 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard1.m_fAlphaTestValue));

  0027c	f3 0f 10 82 0c
	01 00 00	 movss	 xmm0, DWORD PTR [edx+268]
  00284	e8 00 00 00 00	 call	 __ftoui3
  00289	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028f	50		 push	 eax
  00290	6a 18		 push	 24			; 00000018H
  00292	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1235 : 
; 1236 : 		ms_faceCount += 2;
; 1237 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  00297	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029d	8d 45 ac	 lea	 eax, DWORD PTR _sVertex$1[ebp]
  002a0	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  002a7	6a 14		 push	 20			; 00000014H
  002a9	50		 push	 eax
  002aa	6a 02		 push	 2
  002ac	6a 06		 push	 6
  002ae	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN4@RenderBill:

; 1238 : 	}
; 1239 : 
; 1240 : #ifdef WRAPPER_RENDER_HORIZONTAL_BILLBOARD
; 1241 : 	// render horizontal billboard (if enabled)
; 1242 : 	if (m_pGeometryCache->m_sHorizontalBillboard.m_bIsActive)
; 1243 : 	{
; 1244 : 		const float* pCoords = m_pGeometryCache->m_sHorizontalBillboard.m_pCoords;
; 1245 : 		const float* pTexCoords = m_pGeometryCache->m_sHorizontalBillboard.m_pTexCoords;
; 1246 : 		SBillboardVertex sVertex[4] =
; 1247 : 		{
; 1248 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },
; 1249 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },
; 1250 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },
; 1251 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },
; 1252 : 		};
; 1253 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sHorizontalBillboard.m_fAlphaTestValue));
; 1254 : 
; 1255 : 		ms_faceCount += 2;
; 1256 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));
; 1257 : 	}
; 1258 : 
; 1259 : #endif
; 1260 : #endif
; 1261 : }

  002b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b6	33 cd		 xor	 ecx, ebp
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c3		 ret	 0
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::RenderBillboards
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
tv1404 = -98344						; size = 4
tv1356 = -98340						; size = 4
$T1 = -98336						; size = 4
_unLeaf$1$ = -98332					; size = 4
_center$1$ = -98328					; size = 4
_unLod$1$ = -98324					; size = 4
_pVertex$2 = -98320					; size = 4
_this$GSCopy$1$ = -98316				; size = 4
_i$1$ = -98312						; size = 4
_akPosition$3 = -98308					; size = 98304
__$ArrayPad$ = -4					; size = 4
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderLeaves, COMDAT
; _this$ = ecx

; 1031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 28 80 01 00	 mov	 eax, 98344		; 00018028H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 1032 : 	// update leaf geometry
; 1033 : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry);

  0001a	6a ff		 push	 -1
  0001c	6a ff		 push	 -1
  0001e	8b d9		 mov	 ebx, ecx
  00020	6a ff		 push	 -1
  00022	6a 04		 push	 4
  00024	89 9d f4 7f fe
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0002a	ff b3 64 02 00
	00		 push	 DWORD PTR [ebx+612]
  00030	8b 8b 48 02 00
	00		 mov	 ecx, DWORD PTR [ebx+584]
  00036	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 1034 : 
; 1035 : 	// update the LOD level vertex arrays we need
; 1036 : #if defined(WRAPPER_USE_GPU_LEAF_PLACEMENT) && defined(WRAPPER_USE_GPU_WIND)
; 1037 : 	// do nothing, needs no updates
; 1038 : #else
; 1039 : #if !defined WRAPPER_USE_NO_WIND || defined WRAPPER_USE_CPU_LEAF_PLACEMENT
; 1040 : 	// possibly need to update both leaf LOD's
; 1041 : 	for (UINT i = 0; i < 2; ++i)

  0003b	33 c0		 xor	 eax, eax
  0003d	bf b4 00 00 00	 mov	 edi, 180		; 000000b4H
  00042	89 85 f8 7f fe
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@RenderLeav:

; 1042 : 	{
; 1043 : 		// reference to leaf structure
; 1044 : 		const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (i == 0) ? &m_pGeometryCache->m_sLeaves0 : &m_pGeometryCache->m_sLeaves1;
; 1045 : 		int unLod = pLeaf->m_nDiscreteLodLevel;

  00050	85 c0		 test	 eax, eax
  00052	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  00057	0f 45 f7	 cmovne	 esi, edi
  0005a	03 b3 64 02 00
	00		 add	 esi, DWORD PTR [ebx+612]
  00060	89 b5 d8 7f fe
	ff		 mov	 DWORD PTR tv1404[ebp], esi

; 1046 : 
; 1047 : #if defined WRAPPER_USE_GPU_LEAF_PLACEMENT
; 1048 : 		if (pLeaf->m_bIsActive && !m_pLeavesUpdatedByCpu[unLod])
; 1049 : 		{
; 1050 : 			// update the centers
; 1051 : 			SFVFLeafVertex* pVertex = NULL;
; 1052 : 			m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 1053 : 			for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)
; 1054 : 			{
; 1055 : 				D3DXVECTOR3 vecCenter(&(pLeaf->m_pCenterCoords[unLeaf * 3]));
; 1056 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 0
; 1057 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 1
; 1058 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 2
; 1059 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 0
; 1060 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 2
; 1061 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 3
; 1062 : 			}
; 1063 : 			m_pLeafVertexBuffer[unLod]->Unlock();
; 1064 : 			m_pLeavesUpdatedByCpu[unLod] = true;
; 1065 : 		}
; 1066 : #else
; 1067 : 		if (pLeaf->m_bIsActive && m_pLeafVertexBuffer[unLod])

  00066	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00069	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006c	89 8d ec 7f fe
	ff		 mov	 DWORD PTR _unLod$1$[ebp], ecx
  00072	0f 84 eb 01 00
	00		 je	 $LN2@RenderLeav
  00078	8b 93 8c 02 00
	00		 mov	 edx, DWORD PTR [ebx+652]
  0007e	89 95 dc 7f fe
	ff		 mov	 DWORD PTR tv1356[ebp], edx
  00084	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00087	85 c9		 test	 ecx, ecx
  00089	0f 84 d4 01 00
	00		 je	 $LN2@RenderLeav

; 1068 : 		{
; 1069 : 			// update the vertex positions
; 1070 : 			SFVFLeafVertex * pVertex = NULL;
; 1071 : 
; 1072 : 			const UINT VERTEX_NUM = 8192;
; 1073 : 			if (pLeaf->m_usLeafCount*3>=VERTEX_NUM)

  0008f	0f b7 7e 0c	 movzx	 edi, WORD PTR [esi+12]
  00093	c7 85 f0 7f fe
	ff 00 00 00 00	 mov	 DWORD PTR _pVertex$2[ebp], 0
  0009d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a0	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000a5	0f 83 6d 02 00
	00		 jae	 $LN12@RenderLeav

; 1074 : 				return;
; 1075 : 
; 1076 : 			D3DXVECTOR3 akPosition[VERTEX_NUM];
; 1077 : 			D3DXVECTOR3*pkPosition=akPosition;
; 1078 : 			const float* center=pLeaf->m_pCenterCoords;

  000ab	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ae	89 85 e8 7f fe
	ff		 mov	 DWORD PTR _center$1$[ebp], eax
  000b4	c7 85 e4 7f fe
	ff 00 00 00 00	 mov	 DWORD PTR _unLeaf$1$[ebp], 0

; 1079 : 			for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)

  000be	85 ff		 test	 edi, edi
  000c0	0f 84 21 01 00
	00		 je	 $LN6@RenderLeav

; 1080 : 			{
; 1081 : 				pkPosition[0].x=pLeaf->m_pLeafMapCoords[unLeaf][0]+center[0];

  000c6	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000c9	8d 95 04 80 fe
	ff		 lea	 edx, DWORD PTR _akPosition$3[ebp+8]
  000cf	8b 9d e8 7f fe
	ff		 mov	 ebx, DWORD PTR _center$1$[ebp]
  000d5	8b b5 e4 7f fe
	ff		 mov	 esi, DWORD PTR _unLeaf$1$[ebp]
  000db	89 85 e0 7f fe
	ff		 mov	 DWORD PTR $T1[ebp], eax
$LL7@RenderLeav:
  000e1	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  000e4	46		 inc	 esi
  000e5	f3 0f 10 1b	 movss	 xmm3, DWORD PTR [ebx]

; 1082 : 				pkPosition[0].y=pLeaf->m_pLeafMapCoords[unLeaf][1]+center[1];

  000e9	f3 0f 10 53 04	 movss	 xmm2, DWORD PTR [ebx+4]

; 1083 : 				pkPosition[0].z=pLeaf->m_pLeafMapCoords[unLeaf][2]+center[2];

  000ee	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]

; 1084 : 				pkPosition[1].x=pLeaf->m_pLeafMapCoords[unLeaf][4]+center[0];
; 1085 : 				pkPosition[1].y=pLeaf->m_pLeafMapCoords[unLeaf][5]+center[1];
; 1086 : 				pkPosition[1].z=pLeaf->m_pLeafMapCoords[unLeaf][6]+center[2];
; 1087 : 				pkPosition[2].x=pLeaf->m_pLeafMapCoords[unLeaf][8]+center[0];
; 1088 : 				pkPosition[2].y=pLeaf->m_pLeafMapCoords[unLeaf][9]+center[1];
; 1089 : 				pkPosition[2].z=pLeaf->m_pLeafMapCoords[unLeaf][10]+center[2];
; 1090 : 				pkPosition[3]=pkPosition[0];
; 1091 : 				pkPosition[4]=pkPosition[2];
; 1092 : 				pkPosition[5].x=pLeaf->m_pLeafMapCoords[unLeaf][12]+center[0];
; 1093 : 				pkPosition[5].y=pLeaf->m_pLeafMapCoords[unLeaf][13]+center[1];
; 1094 : 				pkPosition[5].z=pLeaf->m_pLeafMapCoords[unLeaf][14]+center[2];
; 1095 : 				pkPosition+=6;
; 1096 : 				center+=3;

  000f3	83 c3 0c	 add	 ebx, 12			; 0000000cH
  000f6	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000fa	f3 0f 58 c3	 addss	 xmm0, xmm3
  000fe	f3 0f 11 42 f8	 movss	 DWORD PTR [edx-8], xmm0
  00103	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00108	f3 0f 58 c2	 addss	 xmm0, xmm2
  0010c	f3 0f 11 42 fc	 movss	 DWORD PTR [edx-4], xmm0
  00111	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00116	f3 0f 58 c1	 addss	 xmm0, xmm1
  0011a	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  0011e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00123	f3 0f 58 c3	 addss	 xmm0, xmm3
  00127	8b 02		 mov	 eax, DWORD PTR [edx]
  00129	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0
  0012e	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00133	f3 0f 58 c2	 addss	 xmm0, xmm2
  00137	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
  0013c	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00141	f3 0f 58 c1	 addss	 xmm0, xmm1
  00145	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0
  0014a	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  0014f	f3 0f 58 c3	 addss	 xmm0, xmm3
  00153	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0
  00158	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  0015d	f3 0f 58 c2	 addss	 xmm0, xmm2
  00161	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
  00166	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  0016b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0016f	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0
  00174	f3 0f 7e 42 f8	 movq	 xmm0, QWORD PTR [edx-8]
  00179	66 0f d6 42 1c	 movq	 QWORD PTR [edx+28], xmm0
  0017e	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00183	66 0f d6 42 28	 movq	 QWORD PTR [edx+40], xmm0
  00188	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  0018d	f3 0f 58 c3	 addss	 xmm0, xmm3
  00191	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00194	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00197	89 42 30	 mov	 DWORD PTR [edx+48], eax
  0019a	8b 85 e0 7f fe
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  001a0	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0
  001a5	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
  001aa	f3 0f 58 c2	 addss	 xmm0, xmm2
  001ae	f3 0f 11 42 38	 movss	 DWORD PTR [edx+56], xmm0
  001b3	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  001b8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001bc	f3 0f 11 42 3c	 movss	 DWORD PTR [edx+60], xmm0
  001c1	83 c2 48	 add	 edx, 72			; 00000048H
  001c4	3b f7		 cmp	 esi, edi
  001c6	0f 82 15 ff ff
	ff		 jb	 $LL7@RenderLeav
  001cc	8b 85 ec 7f fe
	ff		 mov	 eax, DWORD PTR _unLod$1$[ebp]
  001d2	8b 8d dc 7f fe
	ff		 mov	 ecx, DWORD PTR tv1356[ebp]
  001d8	8b b5 d8 7f fe
	ff		 mov	 esi, DWORD PTR tv1404[ebp]
  001de	8b 9d f4 7f fe
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  001e4	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
$LN6@RenderLeav:

; 1097 : 			}
; 1098 : 
; 1099 : 			if (SUCCEEDED(

  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	8d 95 f0 7f fe
	ff		 lea	 edx, DWORD PTR _pVertex$2[ebp]
  001ef	68 00 28 00 00	 push	 10240			; 00002800H
  001f4	52		 push	 edx
  001f5	6a 00		 push	 0
  001f7	6a 00		 push	 0
  001f9	51		 push	 ecx
  001fa	ff 50 2c	 call	 DWORD PTR [eax+44]
  001fd	85 c0		 test	 eax, eax
  001ff	78 57		 js	 SHORT $LN49@RenderLeav

; 1100 : 				m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK)
; 1101 : 			))
; 1102 : 			{
; 1103 : 				UINT uVtxCount=pLeaf->m_usLeafCount*6;

  00201	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  00205	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  00208	03 ff		 add	 edi, edi

; 1104 : 				for (UINT i = 0; i<uVtxCount; ++i)

  0020a	74 37		 je	 SHORT $LN9@RenderLeav

; 1100 : 				m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK)
; 1101 : 			))
; 1102 : 			{
; 1103 : 				UINT uVtxCount=pLeaf->m_usLeafCount*6;

  0020c	33 d2		 xor	 edx, edx
  0020e	8d b5 fc 7f fe
	ff		 lea	 esi, DWORD PTR _akPosition$3[ebp]
  00214	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL10@RenderLeav:

; 1105 : 					pVertex[i].m_vPosition=akPosition[i];

  00220	8b 8d f0 7f fe
	ff		 mov	 ecx, DWORD PTR _pVertex$2[ebp]
  00226	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00229	f3 0f 7e 46 f4	 movq	 xmm0, QWORD PTR [esi-12]
  0022e	8d 52 18	 lea	 edx, DWORD PTR [edx+24]
  00231	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00234	66 0f d6 44 0a
	e8		 movq	 QWORD PTR [edx+ecx-24], xmm0
  0023a	89 44 0a f0	 mov	 DWORD PTR [edx+ecx-16], eax
  0023e	83 ef 01	 sub	 edi, 1
  00241	75 dd		 jne	 SHORT $LL10@RenderLeav
$LN9@RenderLeav:

; 1106 : 
; 1107 : 					/*
; 1108 : 					memcpy(vec0, pLeaf->m_pLeafMapCoords[unLeaf]+0, sizeof(D3DXVECTOR3));
; 1109 : 					memcpy(vec1, pLeaf->m_pLeafMapCoords[unLeaf]+4, sizeof(D3DXVECTOR3));
; 1110 : 					memcpy(vec2, pLeaf->m_pLeafMapCoords[unLeaf]+8, sizeof(D3DXVECTOR3));
; 1111 : 					memcpy(vec3, pLeaf->m_pLeafMapCoords[unLeaf]+12, sizeof(D3DXVECTOR3));
; 1112 : 					memcpy(vecCenter, pLeaf->m_pCenterCoords + unLeaf * 3, sizeof(D3DXVECTOR3));
; 1113 : 					vec0 += vecCenter;
; 1114 : 					vec1 += vecCenter;
; 1115 : 					vec2 += vecCenter;
; 1116 : 					vec3 += vecCenter;
; 1117 : 
; 1118 : 					pVertex[0].m_vPosition = vec0;
; 1119 : 					pVertex[3].m_vPosition = vec0;
; 1120 : 					pVertex[1].m_vPosition = vec1;
; 1121 : 					pVertex[4].m_vPosition = vec2;
; 1122 : 					pVertex[2].m_vPosition = vec2;
; 1123 : 					pVertex[5].m_vPosition = vec3;
; 1124 : 					*/
; 1125 : 				/*
; 1126 : 				for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)
; 1127 : 				{
; 1128 : 					D3DXVECTOR3 vecCenter(&(pLeaf->m_pCenterCoords[unLeaf * 3]));
; 1129 : 					D3DXVECTOR3 vec0(&pLeaf->m_pLeafMapCoords[unLeaf][0]);
; 1130 : 					D3DXVECTOR3 vec1(&pLeaf->m_pLeafMapCoords[unLeaf][4]);
; 1131 : 					D3DXVECTOR3 vec2(&pLeaf->m_pLeafMapCoords[unLeaf][8]);
; 1132 : 					D3DXVECTOR3 vec3(&pLeaf->m_pLeafMapCoords[unLeaf][12]);
; 1133 : 
; 1134 : 					(pVertex++)->m_vPosition = vecCenter + vec0;		// vertex 0
; 1135 : 					(pVertex++)->m_vPosition = vecCenter + vec1;		// vertex 1
; 1136 : 					(pVertex++)->m_vPosition = vecCenter + vec2;		// vertex 2
; 1137 : 					(pVertex++)->m_vPosition = vecCenter + vec0;		// vertex 0
; 1138 : 					(pVertex++)->m_vPosition = vecCenter + vec2;		// vertex 2
; 1139 : 					(pVertex++)->m_vPosition = vecCenter + vec3;		// vertex 3
; 1140 : 				}
; 1141 : 				*/
; 1142 : 				m_pLeafVertexBuffer[unLod]->Unlock();

  00243	8b 83 8c 02 00
	00		 mov	 eax, DWORD PTR [ebx+652]
  00249	8b 8d ec 7f fe
	ff		 mov	 ecx, DWORD PTR _unLod$1$[ebp]
  0024f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00252	50		 push	 eax
  00253	8b 08		 mov	 ecx, DWORD PTR [eax]
  00255	ff 51 30	 call	 DWORD PTR [ecx+48]
$LN49@RenderLeav:

; 1034 : 
; 1035 : 	// update the LOD level vertex arrays we need
; 1036 : #if defined(WRAPPER_USE_GPU_LEAF_PLACEMENT) && defined(WRAPPER_USE_GPU_WIND)
; 1037 : 	// do nothing, needs no updates
; 1038 : #else
; 1039 : #if !defined WRAPPER_USE_NO_WIND || defined WRAPPER_USE_CPU_LEAF_PLACEMENT
; 1040 : 	// possibly need to update both leaf LOD's
; 1041 : 	for (UINT i = 0; i < 2; ++i)

  00258	8b 85 f8 7f fe
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  0025e	bf b4 00 00 00	 mov	 edi, 180		; 000000b4H
$LN2@RenderLeav:
  00263	40		 inc	 eax
  00264	89 85 f8 7f fe
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  0026a	83 f8 02	 cmp	 eax, 2
  0026d	0f 82 dd fd ff
	ff		 jb	 $LL4@RenderLeav

; 1143 : 			}
; 1144 : 		}
; 1145 : #endif
; 1146 : 	}
; 1147 : #endif
; 1148 : #endif
; 1149 : 
; 1150 : 	PositionTree();

  00273	8b cb		 mov	 ecx, ebx
  00275	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree
  0027a	8b 85 f4 7f fe
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00280	33 db		 xor	 ebx, ebx
$LL13@RenderLeav:

; 1154 : 	{
; 1155 : 		const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (unLeafLevel == 0) ?
; 1156 : 			&m_pGeometryCache->m_sLeaves0 : &m_pGeometryCache->m_sLeaves1;
; 1157 : 
; 1158 : 		int unLod = pLeaf->m_nDiscreteLodLevel;

  00282	85 db		 test	 ebx, ebx
  00284	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  00289	0f 45 f7	 cmovne	 esi, edi
  0028c	8b b8 64 02 00
	00		 mov	 edi, DWORD PTR [eax+612]
  00292	8b 4c 3e 08	 mov	 ecx, DWORD PTR [esi+edi+8]

; 1159 : 
; 1160 : 		if (unLod > -1 && pLeaf->m_bIsActive && pLeaf->m_usLeafCount > 0)

  00296	83 f9 ff	 cmp	 ecx, -1
  00299	7e 6e		 jle	 SHORT $LN11@RenderLeav
  0029b	80 3c 3e 00	 cmp	 BYTE PTR [esi+edi], 0
  0029f	74 68		 je	 SHORT $LN11@RenderLeav
  002a1	66 83 7c 3e 0c
	00		 cmp	 WORD PTR [esi+edi+12], 0
  002a7	76 60		 jbe	 SHORT $LN11@RenderLeav

; 1161 : 		{
; 1162 : 			STATEMANAGER.SetStreamSource(0, m_pLeafVertexBuffer[unLod], sizeof(SFVFLeafVertex));

  002a9	8b 80 8c 02 00
	00		 mov	 eax, DWORD PTR [eax+652]
  002af	6a 18		 push	 24			; 00000018H
  002b1	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  002b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ba	6a 00		 push	 0
  002bc	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 1163 : 			STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(pLeaf->m_fAlphaTestValue));

  002c1	f3 0f 10 44 3e
	04		 movss	 xmm0, DWORD PTR [esi+edi+4]
  002c7	e8 00 00 00 00	 call	 __ftoui3
  002cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d2	50		 push	 eax
  002d3	6a 18		 push	 24			; 00000018H
  002d5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1164 : 
; 1165 : 			ms_faceCount += pLeaf->m_usLeafCount * 2;

  002da	0f b7 4c 3e 0c	 movzx	 ecx, WORD PTR [esi+edi+12]
  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  002e4	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 1166 : 			STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLELIST, 0, pLeaf->m_usLeafCount * 2);

  002e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ed	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount
  002f2	0f b7 44 3e 0c	 movzx	 eax, WORD PTR [esi+edi+12]
  002f7	03 c0		 add	 eax, eax
  002f9	50		 push	 eax
  002fa	6a 00		 push	 0
  002fc	6a 04		 push	 4
  002fe	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
  00303	8b 85 f4 7f fe
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
$LN11@RenderLeav:

; 1151 : 
; 1152 : 	// render LODs, if needed
; 1153 : 	for (UINT unLeafLevel = 0; unLeafLevel < 2; ++unLeafLevel)

  00309	43		 inc	 ebx
  0030a	bf b4 00 00 00	 mov	 edi, 180		; 000000b4H
  0030f	83 fb 02	 cmp	 ebx, 2
  00312	0f 82 6a ff ff
	ff		 jb	 $LL13@RenderLeav
$LN12@RenderLeav:

; 1167 : 		}
; 1168 : 	}
; 1169 : }

  00318	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	5f		 pop	 edi
  0031c	5e		 pop	 esi
  0031d	33 cd		 xor	 ecx, ebp
  0031f	5b		 pop	 ebx
  00320	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00325	8b e5		 mov	 esp, ebp
  00327	5d		 pop	 ebp
  00328	c3		 ret	 0
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderLeaves
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderFronds, COMDAT
; _this$ = ecx

; 964  : {

  00000	56		 push	 esi

; 965  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 02		 push	 2
  0000b	ff b6 64 02 00
	00		 push	 DWORD PTR [esi+612]
  00011	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 966  : 
; 967  : 	if (m_pGeometryCache->m_fFrondAlphaTestValue > 0.0f)

  0001c	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00022	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00027	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0002e	76 7f		 jbe	 SHORT $LN3@RenderFron

; 968  : 	{
; 969  : 		PositionTree();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 970  : 
; 971  : 		// set alpha test value
; 972  : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fFrondAlphaTestValue));

  00037	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0003d	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00042	e8 00 00 00 00	 call	 __ftoui3
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004d	50		 push	 eax
  0004e	6a 18		 push	 24			; 00000018H
  00050	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 973  : 
; 974  : 		// render if this LOD has fronds
; 975  : 		if (m_pFrondIndexCounts &&

  00055	8b 8e 84 02 00
	00		 mov	 ecx, DWORD PTR [esi+644]
  0005b	85 c9		 test	 ecx, ecx
  0005d	74 50		 je	 SHORT $LN3@RenderFron
  0005f	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00065	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00068	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0006c	66 85 c0	 test	 ax, ax
  0006f	74 3e		 je	 SHORT $LN3@RenderFron

; 976  : 			m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] > 0)
; 977  : 		{
; 978  : 			ms_faceCount += m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2;

  00071	8b c8		 mov	 ecx, eax
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  00078	83 c0 fe	 add	 eax, -2			; fffffffeH
  0007b	03 c1		 add	 eax, ecx
  0007d	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 979  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sFronds.m_usVertexCount, 0, m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2);

  00082	8b 96 64 02 00
	00		 mov	 edx, DWORD PTR [esi+612]
  00088	8b 86 84 02 00
	00		 mov	 eax, DWORD PTR [esi+644]
  0008e	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00091	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009b	83 e8 02	 sub	 eax, 2
  0009e	50		 push	 eax
  0009f	0f b7 42 4c	 movzx	 eax, WORD PTR [edx+76]
  000a3	6a 00		 push	 0
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	6a 05		 push	 5
  000aa	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderFron:

; 980  : 		}
; 981  : 	}
; 982  : }

  000af	5e		 pop	 esi
  000b0	c3		 ret	 0
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderFronds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderBranches, COMDAT
; _this$ = ecx

; 891  : {

  00000	56		 push	 esi

; 892  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 01		 push	 1
  0000b	ff b6 64 02 00
	00		 push	 DWORD PTR [esi+612]
  00011	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 893  : 
; 894  : 	if (m_pGeometryCache->m_fBranchAlphaTestValue)

  0001c	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00022	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00027	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0002e	9f		 lahf
  0002f	f6 c4 44	 test	 ah, 68			; 00000044H
  00032	7b 7d		 jnp	 SHORT $LN3@RenderBran

; 895  : 	{
; 896  : 		PositionTree();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 897  : 
; 898  : 		// set alpha test value
; 899  : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fBranchAlphaTestValue));

  0003b	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00041	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00046	e8 00 00 00 00	 call	 __ftoui3
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	50		 push	 eax
  00052	6a 18		 push	 24			; 00000018H
  00054	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 900  : 
; 901  : 		// render if this LOD has branches
; 902  : 		if (m_pBranchIndexCounts &&

  00059	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 4e		 je	 SHORT $LN3@RenderBran
  00063	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0006f	66 85 c0	 test	 ax, ax
  00072	74 3d		 je	 SHORT $LN3@RenderBran

; 903  : 			m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] > 0)
; 904  : 		{
; 905  : 			ms_faceCount += m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2;

  00074	8b c8		 mov	 ecx, eax
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  0007b	83 c0 fe	 add	 eax, -2			; fffffffeH
  0007e	03 c1		 add	 eax, ecx
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 906  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sBranches.m_usVertexCount, 0, m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2);

  00085	8b 96 64 02 00
	00		 mov	 edx, DWORD PTR [esi+612]
  0008b	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00091	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00093	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009d	83 e8 02	 sub	 eax, 2
  000a0	50		 push	 eax
  000a1	0f b7 42 10	 movzx	 eax, WORD PTR [edx+16]
  000a5	6a 00		 push	 0
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	6a 05		 push	 5
  000ac	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderBran:

; 907  : 		}
; 908  : 	}
; 909  : }

  000b1	5e		 pop	 esi
  000b2	c3		 ret	 0
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderBranches
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ PROC	; CSpeedTreeWrapper::EndLeafForTreeType, COMDAT
; _this$ = ecx

; 1176 : {

  00000	8b d1		 mov	 edx, ecx

; 1177 : 	// reset copy flags for CPU wind
; 1178 : 	for (UINT i = 0; i < m_usNumLeafLods; ++i)

  00002	33 c0		 xor	 eax, eax
  00004	33 c9		 xor	 ecx, ecx
  00006	66 3b 8a 88 02
	00 00		 cmp	 cx, WORD PTR [edx+648]
  0000d	73 17		 jae	 SHORT $LN3@EndLeafFor
  0000f	90		 npad	 1
$LL4@EndLeafFor:

; 1179 : 		m_pLeavesUpdatedByCpu[i] = false;

  00010	8b 8a 90 02 00
	00		 mov	 ecx, DWORD PTR [edx+656]
  00016	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  0001a	40		 inc	 eax
  0001b	0f b7 8a 88 02
	00 00		 movzx	 ecx, WORD PTR [edx+648]
  00022	3b c1		 cmp	 eax, ecx
  00024	72 ea		 jb	 SHORT $LL4@EndLeafFor
$LN3@EndLeafFor:

; 1180 : }

  00026	c3		 ret	 0
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ENDP	; CSpeedTreeWrapper::EndLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupLeafForTreeType, COMDAT
; _this$ = ecx

; 989  : {

  00000	56		 push	 esi

; 990  : #ifdef SPEEDTREE_LIGHTING_DYNAMIC
; 991  : 	// set lighting material
; 992  : 	STATEMANAGER.SetMaterial(m_cLeafMaterial.Get());
; 993  : 	SetShaderConstants(m_pSpeedTree->GetLeafMaterial());
; 994  : #endif
; 995  : 
; 996  : 	// pass leaf tables to shader
; 997  : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 998  : 	UploadLeafTables(c_nVertexShader_LeafTables);
; 999  : #endif
; 1000 : 
; 1001 : 	if (!m_CompositeImageInstance.IsEmpty())

  00001	8d b1 c4 03 00
	00		 lea	 esi, DWORD PTR [ecx+964]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000e	84 c0		 test	 al, al
  00010	75 1c		 jne	 SHORT $LN2@SetupLeafF

; 1002 : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN2@SetupLeafF:

; 1003 : 
; 1004 : 	// bind shadow texture
; 1005 : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 1006 : 	STATEMANAGER.SetTexture(1, NULL);

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00034	6a 00		 push	 0
  00036	6a 01		 push	 1
  00038	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  0003d	5e		 pop	 esi

; 1007 : #endif
; 1008 : }

  0003e	c3		 ret	 0
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupFrondForTreeType, COMDAT
; _this$ = ecx

; 916  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 917  : #ifdef SPEEDTREE_LIGHTING_DYNAMIC
; 918  : 	// set lighting material
; 919  : 	STATEMANAGER.SetMaterial(m_cFrondMaterial.Get());
; 920  : 	SetShaderConstants(m_pSpeedTree->GetFrondMaterial());
; 921  : #endif
; 922  : 
; 923  : 	// update the frond geometry for CPU wind
; 924  : #ifdef WRAPPER_USE_CPU_WIND
; 925  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);
; 926  : 	if (m_pGeometryCache->m_sFronds.m_usNumStrips > 0)
; 927  : 	{
; 928  : 		// update the vertex array
; 929  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 930  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 931  : 		for (UINT i = 0; i < m_unFrondVertexCount; ++i)
; 932  : 		{
; 933  : 			memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sFronds.m_pCoords[i * 3]), 3 * sizeof(float));
; 934  : 		}
; 935  : 		m_pFrondVertexBuffer->Unlock();
; 936  : 	}
; 937  : #endif
; 938  : 
; 939  : 	if (!m_CompositeImageInstance.IsEmpty())

  00004	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  0000a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000f	84 c0		 test	 al, al
  00011	75 20		 jne	 SHORT $LN2@SetupFrond

; 940  : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00013	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00019	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN2@SetupFrond:

; 941  : 
; 942  : 	// bind shadow texture
; 943  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 944  : 	LPDIRECT3DTEXTURE8 lpd3dTexture;
; 945  : 
; 946  : 	if ((lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00033	8d 8e a4 03 00
	00		 lea	 ecx, DWORD PTR [esi+932]
  00039	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00045	85 c0		 test	 eax, eax
  00047	74 0e		 je	 SHORT $LN3@SetupFrond

; 947  : 		STATEMANAGER.SetTexture(1, lpd3dTexture);

  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004f	50		 push	 eax
  00050	6a 01		 push	 1
  00052	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN3@SetupFrond:

; 948  : #endif
; 949  : 
; 950  : 	if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0)

  00057	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0005d	66 83 78 4c 00	 cmp	 WORD PTR [eax+76], 0
  00062	76 28		 jbe	 SHORT $LN4@SetupFrond

; 951  : 	{
; 952  : 		// activate the frond vertex buffer
; 953  : 		STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006a	6a 20		 push	 32			; 00000020H
  0006c	ff b6 78 02 00
	00		 push	 DWORD PTR [esi+632]
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 954  : 		// set the index buffer
; 955  : 		STATEMANAGER.SetIndices(m_pFrondIndexBuffer, 0);

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007f	6a 00		 push	 0
  00081	ff b6 80 02 00
	00		 push	 DWORD PTR [esi+640]
  00087	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN4@SetupFrond:

; 956  : 	}
; 957  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupBranchForTreeType, COMDAT
; _this$ = ecx

; 839  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 840  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 841  : 	// set lighting material
; 842  : 	STATEMANAGER.SetMaterial(m_cBranchMaterial.Get());
; 843  : 	SetShaderConstants(m_pSpeedTree->GetBranchMaterial());
; 844  : #endif
; 845  : 
; 846  : 	// update the branch geometry for CPU wind
; 847  : #ifdef WRAPPER_USE_CPU_WIND
; 848  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);
; 849  : 
; 850  : 	if (m_pGeometryCache->m_sBranches.m_usNumStrips > 0)
; 851  : 	{
; 852  : 		// update the vertex array
; 853  : 		SFVFBranchVertex* pVertexBuffer = NULL;
; 854  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 855  : 		for (UINT i = 0; i < m_unBranchVertexCount; ++i)
; 856  : 		{
; 857  : 			memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sBranches.m_pCoords[i * 3]), 3 * sizeof(float));
; 858  : 		}
; 859  : 		m_pBranchVertexBuffer->Unlock();
; 860  : 	}
; 861  : #endif
; 862  : 
; 863  : 	LPDIRECT3DTEXTURE8 lpd3dTexture;
; 864  : 
; 865  :     // set texture map
; 866  :     if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  00003	8d 8e 84 03 00
	00		 lea	 ecx, DWORD PTR [esi+900]
  00009	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00015	85 c0		 test	 eax, eax
  00017	74 0e		 je	 SHORT $LN2@SetupBranc

; 867  :         STATEMANAGER.SetTexture(0, lpd3dTexture);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN2@SetupBranc:

; 868  : 
; 869  : 	// bind shadow texture
; 870  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 871  : 	if (ms_bSelfShadowOn && (lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00027	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA, 0 ; CSpeedTreeWrapper::ms_bSelfShadowOn
  0002e	74 19		 je	 SHORT $LN3@SetupBranc
  00030	8d 8e a4 03 00
	00		 lea	 ecx, DWORD PTR [esi+932]
  00036	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00042	85 c0		 test	 eax, eax
  00044	74 03		 je	 SHORT $LN3@SetupBranc

; 872  : 		STATEMANAGER.SetTexture(1, lpd3dTexture);

  00046	50		 push	 eax
  00047	eb 02		 jmp	 SHORT $LN7@SetupBranc
$LN3@SetupBranc:

; 873  : 	else
; 874  : 		STATEMANAGER.SetTexture(1, NULL);

  00049	6a 00		 push	 0
$LN7@SetupBranc:

; 875  : #endif
; 876  : 
; 877  : 	if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	6a 01		 push	 1
  00053	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00058	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0005e	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  00063	76 28		 jbe	 SHORT $LN5@SetupBranc

; 878  : 	{
; 879  : 		// activate the branch vertex buffer
; 880  : 		STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006b	6a 20		 push	 32			; 00000020H
  0006d	ff b6 68 02 00
	00		 push	 DWORD PTR [esi+616]
  00073	6a 00		 push	 0
  00075	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 881  : 		// set the index buffer
; 882  : 		STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00080	6a 00		 push	 0
  00082	ff b6 70 02 00
	00		 push	 DWORD PTR [esi+624]
  00088	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN5@SetupBranc:

; 883  : 	}
; 884  : }

  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_eType$ = 12						; size = 4
_pPosition$ = 16					; size = 4
_pDimensions$ = 20					; size = 4
?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z PROC ; CSpeedTreeWrapper::GetCollisionObject, COMDAT
; _this$ = ecx

; 1422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1423 : 	assert(m_pSpeedTree);
; 1424 : 	m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  00003	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]

; 1425 : }

  00009	5d		 pop	 ebp

; 1423 : 	assert(m_pSpeedTree);
; 1424 : 	m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  0000a	e9 00 00 00 00	 jmp	 ?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z ; CSpeedTreeRT::GetCollisionObject
?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ENDP ; CSpeedTreeWrapper::GetCollisionObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ
_TEXT	SEGMENT
?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ PROC	; CSpeedTreeWrapper::GetCollisionObjectCount, COMDAT
; _this$ = ecx

; 1417 : 	assert(m_pSpeedTree);
; 1418 : 	return m_pSpeedTree->GetCollisionObjectCount();

  00000	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]
  00006	e9 00 00 00 00	 jmp	 ?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ ; CSpeedTreeRT::GetCollisionObjectCount
?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ENDP	; CSpeedTreeWrapper::GetCollisionObjectCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z
_TEXT	SEGMENT
_r_fSize$ = 8						; size = 4
_r_fVariance$ = 12					; size = 4
?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z PROC		; CSpeedTreeWrapper::GetTreeSize, COMDAT
; _this$ = ecx

; 1434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1435 : 	m_pSpeedTree->GetTreeSize(r_fSize, r_fVariance);

  00003	8b 89 48 02 00
	00		 mov	 ecx, DWORD PTR [ecx+584]

; 1436 : }

  00009	5d		 pop	 ebp

; 1435 : 	m_pSpeedTree->GetTreeSize(r_fSize, r_fVariance);

  0000a	e9 00 00 00 00	 jmp	 ?GetTreeSize@CSpeedTreeRT@@QBEXAAM0@Z ; CSpeedTreeRT::GetTreeSize
?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z ENDP		; CSpeedTreeWrapper::GetTreeSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
_TEXT	SEGMENT
_pszSptFile$GSCopy$1$ = -284				; size = 4
$T2 = -284						; size = 4
$T3 = -280						; size = 24
$T4 = -256						; size = 24
$T5 = -232						; size = 24
$T6 = -208						; size = 24
$T7 = -184						; size = 24
$T8 = -160						; size = 24
$T9 = -160						; size = 24
$T10 = -136						; size = 24
$T11 = -136						; size = 24
$T12 = -112						; size = 24
$T13 = -112						; size = 24
$T14 = -88						; size = 24
$T15 = -88						; size = 24
$T16 = -64						; size = 24
$T17 = -64						; size = 24
$T18 = -40						; size = 24
$T19 = -40						; size = 24
$T20 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszSptFile$ = 8					; size = 4
_c_pbBlock$ = 12					; size = 4
_uiBlockSize$ = 16					; size = 4
_nSeed$ = 20						; size = 4
_fSize$ = 24						; size = 4
_fSizeVariance$ = 28					; size = 4
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z PROC	; CSpeedTreeWrapper::LoadTree, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 45 08	 mov	 eax, DWORD PTR _pszSptFile$[ebp]

; 356  :     bool bSuccess = false;

  00033	32 db		 xor	 bl, bl
  00035	8b 75 0c	 mov	 esi, DWORD PTR _c_pbBlock$[ebp]

; 357  : 
; 358  : 	// directx, so allow for flipping of the texture coordinate
; 359  : #ifdef WRAPPER_FLIP_T_TEXCOORD
; 360  : 	m_pSpeedTree->SetTextureFlip(true);

  00038	6a 01		 push	 1
  0003a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _pszSptFile$GSCopy$1$[ebp], eax
  00040	e8 00 00 00 00	 call	 ?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetTextureFlip

; 361  : #endif
; 362  : 
; 363  : 	// load the tree file
; 364  : 	if (!m_pSpeedTree->LoadTree(c_pbBlock, uiBlockSize))

  00045	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0004b	83 c4 04	 add	 esp, 4
  0004e	ff 75 10	 push	 DWORD PTR _uiBlockSize$[ebp]
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z ; CSpeedTreeRT::LoadTree
  00057	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  0005d	84 c0		 test	 al, al
  0005f	75 2a		 jne	 SHORT $LN3@LoadTree

; 365  : 	{
; 366  : 		if (!m_pSpeedTree->LoadTree(pszSptFile))

  00061	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z ; CSpeedTreeRT::LoadTree
  0006d	84 c0		 test	 al, al
  0006f	75 1a		 jne	 SHORT $LN3@LoadTree

; 367  : 		{
; 368  : 			TraceError("SpeedTreeRT Error: %s", CSpeedTreeRT::GetCurrentError());

  00071	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
  0007c	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00081	83 c4 08	 add	 esp, 8

; 369  : 			return false;

  00084	32 c0		 xor	 al, al
  00086	e9 3b 07 00 00	 jmp	 $LN1@LoadTree
$LN3@LoadTree:

; 370  : 		}
; 371  : 	}
; 372  : 
; 373  : 	// override the lighting method stored in the spt file
; 374  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 375  : 	m_pSpeedTree->SetBranchLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 376  : 	m_pSpeedTree->SetLeafLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 377  : 	m_pSpeedTree->SetFrondLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 378  : #else
; 379  : 	m_pSpeedTree->SetBranchLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  0008b	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00091	6a 01		 push	 1
  00093	e8 00 00 00 00	 call	 ?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetBranchLightingMethod

; 380  : 	m_pSpeedTree->SetLeafLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  00098	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0009e	6a 01		 push	 1
  000a0	e8 00 00 00 00	 call	 ?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetLeafLightingMethod

; 381  : 	m_pSpeedTree->SetFrondLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  000a5	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000ab	6a 01		 push	 1
  000ad	e8 00 00 00 00	 call	 ?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetFrondLightingMethod

; 382  : #endif
; 383  : 
; 384  : 	// set the wind method
; 385  : #ifdef WRAPPER_USE_GPU_WIND
; 386  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_GPU);
; 387  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_GPU);
; 388  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_GPU);
; 389  : #endif
; 390  : #ifdef WRAPPER_USE_CPU_WIND
; 391  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_CPU);
; 392  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_CPU);
; 393  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_CPU);
; 394  : #endif
; 395  : #ifdef WRAPPER_USE_NO_WIND
; 396  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_NONE);

  000b2	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000b8	6a 02		 push	 2
  000ba	e8 00 00 00 00	 call	 ?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetBranchWindMethod

; 397  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_NONE);

  000bf	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000c5	6a 02		 push	 2
  000c7	e8 00 00 00 00	 call	 ?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetLeafWindMethod

; 398  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_NONE);

  000cc	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000d2	6a 02		 push	 2
  000d4	e8 00 00 00 00	 call	 ?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetFrondWindMethod

; 399  : #endif
; 400  : 
; 401  : 	m_pSpeedTree->SetNumLeafRockingGroups(1);

  000d9	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  000df	6a 01		 push	 1
  000e1	e8 00 00 00 00	 call	 ?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z ; CSpeedTreeRT::SetNumLeafRockingGroups

; 402  : 
; 403  : 	// override the size, if necessary
; 404  : 	if (fSize >= 0.0f && fSizeVariance >= 0.0f)

  000e6	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _fSize$[ebp]
  000eb	0f 57 c9	 xorps	 xmm1, xmm1
  000ee	0f 2f d1	 comiss	 xmm2, xmm1
  000f1	72 23		 jb	 SHORT $LN4@LoadTree
  000f3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fSizeVariance$[ebp]
  000f8	0f 2f c1	 comiss	 xmm0, xmm1
  000fb	72 19		 jb	 SHORT $LN4@LoadTree

; 405  : 		m_pSpeedTree->SetTreeSize(fSize, fSizeVariance);

  000fd	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00103	83 ec 08	 sub	 esp, 8
  00106	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0010c	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00111	e8 00 00 00 00	 call	 ?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z ; CSpeedTreeRT::SetTreeSize
$LN4@LoadTree:

; 406  : 
; 407  : 	// generate tree geometry
; 408  : 	if (m_pSpeedTree->Compute(NULL, nSeed))

  00116	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0011c	6a 01		 push	 1
  0011e	ff 75 14	 push	 DWORD PTR _nSeed$[ebp]
  00121	6a 00		 push	 0
  00123	e8 00 00 00 00	 call	 ?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z ; CSpeedTreeRT::Compute
  00128	84 c0		 test	 al, al
  0012a	0f 84 76 06 00
	00		 je	 $LN5@LoadTree

; 409  : 	{
; 410  : 		// get the dimensions
; 411  : 		m_pSpeedTree->GetBoundingBox(m_afBoundingBox);

  00130	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00136	8d 87 a0 02 00
	00		 lea	 eax, DWORD PTR [edi+672]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z ; CSpeedTreeRT::GetBoundingBox

; 412  : 
; 413  : 		// make the leaves rock in the wind
; 414  : 		m_pSpeedTree->SetLeafRockingState(true);

  00142	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00148	6a 01		 push	 1
  0014a	e8 00 00 00 00	 call	 ?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z ; CSpeedTreeRT::SetLeafRockingState

; 415  : 
; 416  : 		// billboard setup
; 417  : #ifdef WRAPPER_NO_BILLBOARD_MODE
; 418  : 		CSpeedTreeRT::SetDropToBillboard(false);
; 419  : #else
; 420  : 		CSpeedTreeRT::SetDropToBillboard(true);

  0014f	6a 01		 push	 1
  00151	e8 00 00 00 00	 call	 ?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetDropToBillboard

; 421  : #endif
; 422  : 
; 423  : 		// query & set materials
; 424  : 		m_cBranchMaterial.Set(m_pSpeedTree->GetBranchMaterial());

  00156	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0015c	83 c4 04	 add	 esp, 4
  0015f	e8 00 00 00 00	 call	 ?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetBranchMaterial
  00164	50		 push	 eax
  00165	8d 8f b8 02 00
	00		 lea	 ecx, DWORD PTR [edi+696]
  0016b	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 425  : 		m_cFrondMaterial.Set(m_pSpeedTree->GetFrondMaterial());

  00170	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00176	e8 00 00 00 00	 call	 ?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetFrondMaterial
  0017b	50		 push	 eax
  0017c	8d 8f 40 03 00
	00		 lea	 ecx, DWORD PTR [edi+832]
  00182	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 426  : 		m_cLeafMaterial.Set(m_pSpeedTree->GetLeafMaterial());

  00187	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  0018d	e8 00 00 00 00	 call	 ?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetLeafMaterial
  00192	50		 push	 eax
  00193	8d 8f fc 02 00
	00		 lea	 ecx, DWORD PTR [edi+764]
  00199	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 427  : 
; 428  : 		// adjust lod distances
; 429  : 		float fHeight = m_afBoundingBox[5] - m_afBoundingBox[2];

  0019e	f3 0f 10 8f b4
	02 00 00	 movss	 xmm1, DWORD PTR [edi+692]

; 430  : 		m_pSpeedTree->SetLodLimits(fHeight * c_fNearLodFactor, fHeight * c_fFarLodFactor);

  001a6	83 ec 08	 sub	 esp, 8
  001a9	f3 0f 5c 8f a8
	02 00 00	 subss	 xmm1, DWORD PTR [edi+680]
  001b1	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  001b7	0f 28 c1	 movaps	 xmm0, xmm1
  001ba	f3 0f 58 c9	 addss	 xmm1, xmm1
  001be	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41100000
  001c6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001cc	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001d1	e8 00 00 00 00	 call	 ?SetLodLimits@CSpeedTreeRT@@QAEXMM@Z ; CSpeedTreeRT::SetLodLimits

; 431  : 
; 432  : 		// query textures
; 433  : 		m_pTextureInfo = new CSpeedTreeRT::STextures;

  001d6	6a 1c		 push	 28			; 0000001cH
  001d8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001dd	83 c4 04	 add	 esp, 4
  001e0	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  001e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001ed	85 c0		 test	 eax, eax
  001ef	74 09		 je	 SHORT $LN10@LoadTree
  001f1	8b c8		 mov	 ecx, eax
  001f3	e8 00 00 00 00	 call	 ??0STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::STextures
  001f8	eb 02		 jmp	 SHORT $LN11@LoadTree
$LN10@LoadTree:
  001fa	33 c0		 xor	 eax, eax
$LN11@LoadTree:

; 434  : 		m_pSpeedTree->GetTextures(*m_pTextureInfo);

  001fc	8b 8f 48 02 00
	00		 mov	 ecx, DWORD PTR [edi+584]
  00202	50		 push	 eax
  00203	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020a	89 87 4c 02 00
	00		 mov	 DWORD PTR [edi+588], eax
  00210	e8 00 00 00 00	 call	 ?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z ; CSpeedTreeRT::GetTextures

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00215	8b 87 4c 02 00
	00		 mov	 eax, DWORD PTR [edi+588]
  0021b	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0021d	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0021f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00226	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0022d	c6 45 a8 00	 mov	 BYTE PTR $T15[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00231	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL304@LoadTree:
  00234	8a 01		 mov	 al, BYTE PTR [ecx]
  00236	41		 inc	 ecx
  00237	84 c0		 test	 al, al
  00239	75 f9		 jne	 SHORT $LL304@LoadTree
  0023b	2b cb		 sub	 ecx, ebx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0023d	51		 push	 ecx
  0023e	52		 push	 edx
  0023f	8d 4d a8	 lea	 ecx, DWORD PTR $T15[ebp]
  00242	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00247	8d 45 a8	 lea	 eax, DWORD PTR $T15[ebp]
  0024a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00251	50		 push	 eax
  00252	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0025e	83 c4 08	 add	 esp, 8
  00261	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00263	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00265	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00269	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00270	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00277	c6 45 c0 00	 mov	 BYTE PTR $T17[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0027b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0027e	66 90		 npad	 2
$LL305@LoadTree:
  00280	8a 01		 mov	 al, BYTE PTR [ecx]
  00282	41		 inc	 ecx
  00283	84 c0		 test	 al, al
  00285	75 f9		 jne	 SHORT $LL305@LoadTree
  00287	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00289	51		 push	 ecx
  0028a	56		 push	 esi
  0028b	8d 4d c0	 lea	 ecx, DWORD PTR $T17[ebp]
  0028e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00293	8d 45 c0	 lea	 eax, DWORD PTR $T17[ebp]
  00296	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0029a	50		 push	 eax
  0029b	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  002a7	53		 push	 ebx
  002a8	50		 push	 eax
  002a9	8d 45 90	 lea	 eax, DWORD PTR $T13[ebp]
  002ac	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  002bb	50		 push	 eax
  002bc	8d 45 d8	 lea	 eax, DWORD PTR $T20[ebp]
  002bf	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002c9	83 c4 20	 add	 esp, 32			; 00000020H
  002cc	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002ce	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002d2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002d6	72 02		 jb	 SHORT $LN58@LoadTree

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  002d8	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN58@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002da	8d 87 84 03 00
	00		 lea	 eax, DWORD PTR [edi+900]
  002e0	50		 push	 eax
  002e1	51		 push	 ecx
  002e2	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002e7	8b 45 ec	 mov	 eax, DWORD PTR $T20[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002ea	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ed	83 f8 10	 cmp	 eax, 16			; 00000010H
  002f0	72 0d		 jb	 SHORT $LN66@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002f2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f3	50		 push	 eax
  002f4	ff 75 d8	 push	 DWORD PTR $T20[ebp]
  002f7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002fc	83 c4 08	 add	 esp, 8
$LN66@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ff	8b 45 a4	 mov	 eax, DWORD PTR $T13[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00302	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00309	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00310	c6 45 d8 00	 mov	 BYTE PTR $T20[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00314	83 f8 10	 cmp	 eax, 16			; 00000010H
  00317	72 0d		 jb	 SHORT $LN76@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00319	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031a	50		 push	 eax
  0031b	ff 75 90	 push	 DWORD PTR $T13[ebp]
  0031e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00323	83 c4 08	 add	 esp, 8
$LN76@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00326	8b 45 8c	 mov	 eax, DWORD PTR $T11[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00329	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00330	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00337	c6 45 90 00	 mov	 BYTE PTR $T13[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0033b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0033e	72 10		 jb	 SHORT $LN86@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00340	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00341	50		 push	 eax
  00342	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T11[ebp]
  00348	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0034d	83 c4 08	 add	 esp, 8
$LN86@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00350	8b 45 d4	 mov	 eax, DWORD PTR $T17[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00353	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0035a	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00361	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00368	83 f8 10	 cmp	 eax, 16			; 00000010H
  0036b	72 0d		 jb	 SHORT $LN96@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0036d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0036e	50		 push	 eax
  0036f	ff 75 c0	 push	 DWORD PTR $T17[ebp]
  00372	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00377	83 c4 08	 add	 esp, 8
$LN96@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0037a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T9[ebp+20]
  00380	83 f8 10	 cmp	 eax, 16			; 00000010H
  00383	72 10		 jb	 SHORT $LN106@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00385	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00386	50		 push	 eax
  00387	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T9[ebp]
  0038d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00392	83 c4 08	 add	 esp, 8
$LN106@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00395	8b 45 bc	 mov	 eax, DWORD PTR $T15[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00398	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  003a2	c7 85 74 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  003ac	c6 85 60 ff ff
	ff 00		 mov	 BYTE PTR $T9[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 437  : 		LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  003b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003ba	83 f8 10	 cmp	 eax, 16			; 00000010H
  003bd	72 0d		 jb	 SHORT $LN116@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003bf	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003c0	50		 push	 eax
  003c1	ff 75 a8	 push	 DWORD PTR $T15[ebp]
  003c4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003c9	83 c4 08	 add	 esp, 8
$LN116@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 440  : 		if (m_pTextureInfo->m_pSelfShadowFilename != NULL)

  003cc	8b 87 4c 02 00
	00		 mov	 eax, DWORD PTR [edi+588]
  003d2	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  003d5	85 d2		 test	 edx, edx
  003d7	0f 84 c7 01 00
	00		 je	 $LN208@LoadTree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003dd	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  003df	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  003e6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  003ed	c6 45 d8 00	 mov	 BYTE PTR $T19[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003f1	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL306@LoadTree:
  003f4	8a 01		 mov	 al, BYTE PTR [ecx]
  003f6	41		 inc	 ecx
  003f7	84 c0		 test	 al, al
  003f9	75 f9		 jne	 SHORT $LL306@LoadTree
  003fb	2b cb		 sub	 ecx, ebx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003fd	51		 push	 ecx
  003fe	52		 push	 edx
  003ff	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  00402	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00407	8d 45 d8	 lea	 eax, DWORD PTR $T19[ebp]
  0040a	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  00411	50		 push	 eax
  00412	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00418	50		 push	 eax
  00419	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0041e	83 c4 08	 add	 esp, 8
  00421	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00423	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00425	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00429	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00430	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00437	c6 45 a8 00	 mov	 BYTE PTR $T14[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0043b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0043e	66 90		 npad	 2
$LL307@LoadTree:
  00440	8a 01		 mov	 al, BYTE PTR [ecx]
  00442	41		 inc	 ecx
  00443	84 c0		 test	 al, al
  00445	75 f9		 jne	 SHORT $LL307@LoadTree
  00447	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00449	51		 push	 ecx
  0044a	56		 push	 esi
  0044b	8d 4d a8	 lea	 ecx, DWORD PTR $T14[ebp]
  0044e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00453	8d 45 a8	 lea	 eax, DWORD PTR $T14[ebp]
  00456	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0045a	50		 push	 eax
  0045b	8d 45 90	 lea	 eax, DWORD PTR $T12[ebp]
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00464	53		 push	 ebx
  00465	50		 push	 eax
  00466	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0046c	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00476	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  0047b	50		 push	 eax
  0047c	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00482	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0048c	83 c4 20	 add	 esp, 32			; 00000020H
  0048f	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00491	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00495	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00499	72 02		 jb	 SHORT $LN149@LoadTree

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0049b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN149@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  0049d	8d 87 a4 03 00
	00		 lea	 eax, DWORD PTR [edi+932]
  004a3	50		 push	 eax
  004a4	51		 push	 ecx
  004a5	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004aa	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  004b0	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004b3	83 f8 10	 cmp	 eax, 16			; 00000010H
  004b6	72 10		 jb	 SHORT $LN157@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004b8	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b9	50		 push	 eax
  004ba	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T8[ebp]
  004c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004c5	83 c4 08	 add	 esp, 8
$LN157@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004c8	8b 45 8c	 mov	 eax, DWORD PTR $T10[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  004cb	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  004d5	c7 85 74 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  004df	c6 85 60 ff ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004e6	83 f8 10	 cmp	 eax, 16			; 00000010H
  004e9	72 10		 jb	 SHORT $LN167@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004eb	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004ec	50		 push	 eax
  004ed	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T10[ebp]
  004f3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004f8	83 c4 08	 add	 esp, 8
$LN167@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004fb	8b 45 a4	 mov	 eax, DWORD PTR $T12[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  004fe	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00505	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0050c	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00513	83 f8 10	 cmp	 eax, 16			; 00000010H
  00516	72 0d		 jb	 SHORT $LN177@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00518	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00519	50		 push	 eax
  0051a	ff 75 90	 push	 DWORD PTR $T12[ebp]
  0051d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00522	83 c4 08	 add	 esp, 8
$LN177@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00525	8b 45 bc	 mov	 eax, DWORD PTR $T14[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00528	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0052f	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00536	c6 45 90 00	 mov	 BYTE PTR $T12[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0053a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0053d	72 0d		 jb	 SHORT $LN187@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0053f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00540	50		 push	 eax
  00541	ff 75 a8	 push	 DWORD PTR $T14[ebp]
  00544	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00549	83 c4 08	 add	 esp, 8
$LN187@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0054c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+20]
  00552	83 f8 10	 cmp	 eax, 16			; 00000010H
  00555	72 10		 jb	 SHORT $LN197@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00557	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00558	50		 push	 eax
  00559	ff b5 48 ff ff
	ff		 push	 DWORD PTR $T7[ebp]
  0055f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00564	83 c4 08	 add	 esp, 8
$LN197@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00567	8b 45 ec	 mov	 eax, DWORD PTR $T19[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0056a	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00574	c7 85 5c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0057e	c6 85 48 ff ff
	ff 00		 mov	 BYTE PTR $T7[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 441  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00585	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0058c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0058f	72 0d		 jb	 SHORT $LN207@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00591	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00592	50		 push	 eax
  00593	ff 75 d8	 push	 DWORD PTR $T19[ebp]
  00596	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0059b	83 c4 08	 add	 esp, 8
$LN207@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0059e	8b 87 4c 02 00
	00		 mov	 eax, DWORD PTR [edi+588]
$LN208@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 443  : 		if (m_pTextureInfo->m_pCompositeFilename)

  005a4	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  005a7	85 d2		 test	 edx, edx
  005a9	0f 84 ec 01 00
	00		 je	 $LN299@LoadTree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005af	8b ca		 mov	 ecx, edx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  005b1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  005b8	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  005bf	c6 45 c0 00	 mov	 BYTE PTR $T16[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005c3	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL308@LoadTree:
  005c6	8a 01		 mov	 al, BYTE PTR [ecx]
  005c8	41		 inc	 ecx
  005c9	84 c0		 test	 al, al
  005cb	75 f9		 jne	 SHORT $LL308@LoadTree
  005cd	2b cb		 sub	 ecx, ebx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005cf	51		 push	 ecx
  005d0	52		 push	 edx
  005d1	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
  005d4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  005d9	8d 45 c0	 lea	 eax, DWORD PTR $T16[ebp]
  005dc	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  005e3	50		 push	 eax
  005e4	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  005ea	50		 push	 eax
  005eb	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  005f0	83 c4 08	 add	 esp, 8
  005f3	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005f5	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  005f7	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  005fb	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00602	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00609	c6 45 d8 00	 mov	 BYTE PTR $T18[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0060d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL309@LoadTree:
  00610	8a 01		 mov	 al, BYTE PTR [ecx]
  00612	41		 inc	 ecx
  00613	84 c0		 test	 al, al
  00615	75 f9		 jne	 SHORT $LL309@LoadTree
  00617	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00619	51		 push	 ecx
  0061a	56		 push	 esi
  0061b	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  0061e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00623	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  00626	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0062a	50		 push	 eax
  0062b	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00631	50		 push	 eax
  00632	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00637	53		 push	 ebx
  00638	50		 push	 eax
  00639	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0063f	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00643	50		 push	 eax
  00644	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00649	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  0064e	50		 push	 eax
  0064f	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00655	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00659	50		 push	 eax
  0065a	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0065f	83 c4 20	 add	 esp, 32			; 00000020H
  00662	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00664	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00668	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0066c	72 02		 jb	 SHORT $LN240@LoadTree

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0066e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN240@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00670	8d 87 c4 03 00
	00		 lea	 eax, DWORD PTR [edi+964]
  00676	50		 push	 eax
  00677	51		 push	 ecx
  00678	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0067d	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00683	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00686	83 f8 10	 cmp	 eax, 16			; 00000010H
  00689	72 10		 jb	 SHORT $LN248@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0068b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0068c	50		 push	 eax
  0068d	ff b5 30 ff ff
	ff		 push	 DWORD PTR $T6[ebp]
  00693	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00698	83 c4 08	 add	 esp, 8
$LN248@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0069b	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  006a1	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  006ab	c7 85 44 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  006b5	c6 85 30 ff ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006bc	83 f8 10	 cmp	 eax, 16			; 00000010H
  006bf	72 10		 jb	 SHORT $LN258@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  006c1	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006c2	50		 push	 eax
  006c3	ff b5 18 ff ff
	ff		 push	 DWORD PTR $T5[ebp]
  006c9	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  006ce	83 c4 08	 add	 esp, 8
$LN258@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006d1	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  006d7	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  006e1	c7 85 2c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  006eb	c6 85 18 ff ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006f2	83 f8 10	 cmp	 eax, 16			; 00000010H
  006f5	72 10		 jb	 SHORT $LN268@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  006f7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006f8	50		 push	 eax
  006f9	ff b5 00 ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  006ff	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00704	83 c4 08	 add	 esp, 8
$LN268@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00707	8b 45 ec	 mov	 eax, DWORD PTR $T18[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0070a	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00714	c7 85 14 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0071e	c6 85 00 ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00725	83 f8 10	 cmp	 eax, 16			; 00000010H
  00728	72 0d		 jb	 SHORT $LN278@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0072a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0072b	50		 push	 eax
  0072c	ff 75 d8	 push	 DWORD PTR $T18[ebp]
  0072f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00734	83 c4 08	 add	 esp, 8
$LN278@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00737	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  0073d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00740	72 10		 jb	 SHORT $LN288@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00742	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00743	50		 push	 eax
  00744	ff b5 e8 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  0074a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0074f	83 c4 08	 add	 esp, 8
$LN288@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00752	8b 45 d4	 mov	 eax, DWORD PTR $T16[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00755	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0075f	c7 85 fc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00769	c6 85 e8 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 444  : 			LoadTexture((CFileNameHelper::GetPath(string(pszSptFile)) + CFileNameHelper::NoExtension(string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00770	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00777	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0077a	72 0d		 jb	 SHORT $LN298@LoadTree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0077c	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0077d	50		 push	 eax
  0077e	ff 75 c0	 push	 DWORD PTR $T16[ebp]
  00781	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00786	83 c4 08	 add	 esp, 8
$LN298@LoadTree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00789	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00790	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00797	c6 45 c0 00	 mov	 BYTE PTR $T16[ebp], 0
$LN299@LoadTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 447  : 		SetupBuffers();

  0079b	8b cf		 mov	 ecx, edi
  0079d	e8 00 00 00 00	 call	 ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBuffers

; 448  : 
; 449  : 		// everything appeared to go well
; 450  : 		bSuccess = true;

  007a2	b3 01		 mov	 bl, 1

; 451  : 	}

  007a4	eb 1e		 jmp	 SHORT $LN6@LoadTree
$LN5@LoadTree:

; 452  : 	else // tree failed to compute
; 453  : 		fprintf(stderr, "\nFatal Error, cannot compute tree [%s]\n\n", CSpeedTreeRT::GetCurrentError());

  007a6	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  007ab	50		 push	 eax
  007ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
  007b1	6a 02		 push	 2
  007b3	e8 00 00 00 00	 call	 ___acrt_iob_func
  007b8	83 c4 04	 add	 esp, 4
  007bb	50		 push	 eax
  007bc	e8 00 00 00 00	 call	 _fprintf
  007c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@LoadTree:

; 454  : 
; 455  :     return bSuccess;

  007c4	8a c3		 mov	 al, bl
$LN1@LoadTree:

; 456  : }

  007c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007d0	59		 pop	 ecx
  007d1	5f		 pop	 edi
  007d2	5e		 pop	 esi
  007d3	5b		 pop	 ebx
  007d4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007d7	33 cd		 xor	 ecx, ebp
  007d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007de	8b e5		 mov	 esp, ebp
  007e0	5d		 pop	 ebp
  007e1	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1:
  00012	8d 4d a8	 lea	 ecx, DWORD PTR $T15[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2:
  0001a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00020	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3:
  00025	8d 4d c0	 lea	 ecx, DWORD PTR $T17[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4:
  0002d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5:
  00038	8d 4d 90	 lea	 ecx, DWORD PTR $T13[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6:
  00040	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7:
  00048	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8:
  00050	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9:
  0005b	8d 4d a8	 lea	 ecx, DWORD PTR $T14[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10:
  00063	8d 4d 90	 lea	 ecx, DWORD PTR $T12[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11:
  0006b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12:
  00076	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13:
  00081	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
  00084	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14:
  00089	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0008f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15:
  00094	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  00097	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16:
  0009c	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$17:
  000a7	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  000ad	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$18:
  000b2	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  000b8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000bd	cc		 int	 3
  000be	cc		 int	 3
  000bf	cc		 int	 3
  000c0	cc		 int	 3
  000c1	cc		 int	 3
__ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z:
  000c2	90		 npad	 1
  000c3	90		 npad	 1
  000c4	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c8	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000cb	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  000d1	33 c8		 xor	 ecx, eax
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000db	33 c8		 xor	 ecx, eax
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z ENDP	; CSpeedTreeWrapper::LoadTree
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z
_TEXT	SEGMENT
_dwBranchVertexShader$ = 8				; size = 4
_dwLeafVertexShader$ = 12				; size = 4
?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z PROC	; CSpeedTreeWrapper::SetVertexShaders, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	ms_dwBranchVertexShader = dwBranchVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwBranchVertexShader$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader

; 87   : 	ms_dwLeafVertexShader = dwLeafVertexShader;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _dwLeafVertexShader$[ebp]
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader

; 88   : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z ENDP	; CSpeedTreeWrapper::SetVertexShaders
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ
_TEXT	SEGMENT
?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ PROC		; CSpeedTreeWrapper::GetPosition, COMDAT
; _this$ = ecx

; 1430 : 	return m_afPos;

  00000	8d 81 94 02 00
	00		 lea	 eax, DWORD PTR [ecx+660]

; 1431 : }

  00006	c3		 ret	 0
?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ ENDP		; CSpeedTreeWrapper::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??1CSpeedTreeWrapper@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSpeedTreeWrapper@@UAE@XZ PROC			; CSpeedTreeWrapper::~CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSpeedTreeWrapper@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 312  : 	// if this is not an instance, clean up
; 313  : 	if (!m_bIsInstance)

  00027	80 be 50 02 00
	00 00		 cmp	 BYTE PTR [esi+592], 0
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00034	0f 85 a6 01 00
	00		 jne	 $LN19@CSpeedTree

; 314  : 	{
; 315  : 		if (m_unBranchVertexCount > 0)

  0003a	83 be 6c 02 00
	00 00		 cmp	 DWORD PTR [esi+620], 0
  00041	76 51		 jbe	 SHORT $LN9@CSpeedTree

; 316  : 		{
; 317  : 			SAFE_RELEASE(m_pBranchVertexBuffer);

  00043	8b 8e 68 02 00
	00		 mov	 ecx, DWORD PTR [esi+616]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 10		 je	 SHORT $LN7@CSpeedTree
  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	51		 push	 ecx
  00050	ff 50 08	 call	 DWORD PTR [eax+8]
  00053	c7 86 68 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+616], 0
$LN7@CSpeedTree:

; 318  : 			SAFE_RELEASE(m_pBranchIndexBuffer);

  0005d	8b 8e 70 02 00
	00		 mov	 ecx, DWORD PTR [esi+624]
  00063	85 c9		 test	 ecx, ecx
  00065	74 10		 je	 SHORT $LN8@CSpeedTree
  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	51		 push	 ecx
  0006a	ff 50 08	 call	 DWORD PTR [eax+8]
  0006d	c7 86 70 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+624], 0
$LN8@CSpeedTree:

; 319  : 			SAFE_DELETE_ARRAY(m_pBranchIndexCounts);

  00077	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  0007d	85 c0		 test	 eax, eax
  0007f	74 13		 je	 SHORT $LN9@CSpeedTree
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00087	83 c4 04	 add	 esp, 4
  0008a	c7 86 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+628], 0
$LN9@CSpeedTree:

; 320  : 		}
; 321  : 
; 322  : 		if (m_unFrondVertexCount > 0)

  00094	83 be 7c 02 00
	00 00		 cmp	 DWORD PTR [esi+636], 0
  0009b	76 51		 jbe	 SHORT $LN13@CSpeedTree

; 323  : 		{
; 324  : 			SAFE_RELEASE(m_pFrondVertexBuffer);

  0009d	8b 8e 78 02 00
	00		 mov	 ecx, DWORD PTR [esi+632]
  000a3	85 c9		 test	 ecx, ecx
  000a5	74 10		 je	 SHORT $LN11@CSpeedTree
  000a7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a9	51		 push	 ecx
  000aa	ff 50 08	 call	 DWORD PTR [eax+8]
  000ad	c7 86 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+632], 0
$LN11@CSpeedTree:

; 325  : 			SAFE_RELEASE(m_pFrondIndexBuffer);

  000b7	8b 8e 80 02 00
	00		 mov	 ecx, DWORD PTR [esi+640]
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 10		 je	 SHORT $LN12@CSpeedTree
  000c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c3	51		 push	 ecx
  000c4	ff 50 08	 call	 DWORD PTR [eax+8]
  000c7	c7 86 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+640], 0
$LN12@CSpeedTree:

; 326  : 			SAFE_DELETE_ARRAY(m_pFrondIndexCounts);

  000d1	8b 86 84 02 00
	00		 mov	 eax, DWORD PTR [esi+644]
  000d7	85 c0		 test	 eax, eax
  000d9	74 13		 je	 SHORT $LN13@CSpeedTree
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000e1	83 c4 04	 add	 esp, 4
  000e4	c7 86 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+644], 0
$LN13@CSpeedTree:

; 327  : 		}
; 328  : 
; 329  : 		for (short i = 0; i < m_usNumLeafLods; ++i)

  000ee	33 c0		 xor	 eax, eax
  000f0	33 ff		 xor	 edi, edi
  000f2	66 3b 86 88 02
	00 00		 cmp	 ax, WORD PTR [esi+648]
  000f9	73 5c		 jae	 SHORT $LN3@CSpeedTree
  000fb	33 db		 xor	 ebx, ebx
  000fd	0f 1f 00	 npad	 3
$LL4@CSpeedTree:

; 330  : 		{
; 331  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry, -1, -1, i);

  00100	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00106	57		 push	 edi
  00107	6a ff		 push	 -1
  00109	6a ff		 push	 -1
  0010b	6a 04		 push	 4
  0010d	ff b6 64 02 00
	00		 push	 DWORD PTR [esi+612]
  00113	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 332  : 
; 333  : 			if (m_pGeometryCache->m_sLeaves0.m_usLeafCount > 0)

  00118	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  0011e	66 83 b8 84 00
	00 00 00	 cmp	 WORD PTR [eax+132], 0
  00126	76 20		 jbe	 SHORT $LN2@CSpeedTree

; 334  : 				SAFE_RELEASE(m_pLeafVertexBuffer[i]);

  00128	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  0012e	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  00131	85 c9		 test	 ecx, ecx
  00133	74 13		 je	 SHORT $LN2@CSpeedTree
  00135	8b 01		 mov	 eax, DWORD PTR [ecx]
  00137	51		 push	 ecx
  00138	ff 50 08	 call	 DWORD PTR [eax+8]
  0013b	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  00141	c7 04 98 00 00
	00 00		 mov	 DWORD PTR [eax+ebx*4], 0
$LN2@CSpeedTree:

; 327  : 		}
; 328  : 
; 329  : 		for (short i = 0; i < m_usNumLeafLods; ++i)

  00148	0f b7 86 88 02
	00 00		 movzx	 eax, WORD PTR [esi+648]
  0014f	47		 inc	 edi
  00150	0f bf df	 movsx	 ebx, di
  00153	3b d8		 cmp	 ebx, eax
  00155	7c a9		 jl	 SHORT $LL4@CSpeedTree
$LN3@CSpeedTree:

; 335  : 		}
; 336  : 
; 337  : 		SAFE_DELETE_ARRAY(m_pLeavesUpdatedByCpu);

  00157	8b 86 90 02 00
	00		 mov	 eax, DWORD PTR [esi+656]
  0015d	85 c0		 test	 eax, eax
  0015f	74 13		 je	 SHORT $LN16@CSpeedTree
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00167	83 c4 04	 add	 esp, 4
  0016a	c7 86 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+656], 0
$LN16@CSpeedTree:

; 338  : 		SAFE_DELETE_ARRAY(m_pLeafVertexBuffer);

  00174	8b 86 8c 02 00
	00		 mov	 eax, DWORD PTR [esi+652]
  0017a	85 c0		 test	 eax, eax
  0017c	74 13		 je	 SHORT $LN17@CSpeedTree
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00184	83 c4 04	 add	 esp, 4
  00187	c7 86 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+652], 0
$LN17@CSpeedTree:

; 339  : 
; 340  : 		SAFE_DELETE(m_pTextureInfo);

  00191	8b be 4c 02 00
	00		 mov	 edi, DWORD PTR [esi+588]
  00197	85 ff		 test	 edi, edi
  00199	74 1c		 je	 SHORT $LN18@CSpeedTree
  0019b	8b cf		 mov	 ecx, edi
  0019d	e8 00 00 00 00	 call	 ??1STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::~STextures
  001a2	6a 1c		 push	 28			; 0000001cH
  001a4	57		 push	 edi
  001a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001aa	83 c4 08	 add	 esp, 8
  001ad	c7 86 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+588], 0
$LN18@CSpeedTree:

; 341  : 
; 342  : 		SAFE_DELETE(m_pGeometryCache);

  001b7	8b be 64 02 00
	00		 mov	 edi, DWORD PTR [esi+612]
  001bd	85 ff		 test	 edi, edi
  001bf	74 1f		 je	 SHORT $LN19@CSpeedTree
  001c1	8b cf		 mov	 ecx, edi
  001c3	e8 00 00 00 00	 call	 ??1SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::~SGeometry
  001c8	68 20 01 00 00	 push	 288			; 00000120H
  001cd	57		 push	 edi
  001ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d3	83 c4 08	 add	 esp, 8
  001d6	c7 86 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+612], 0
$LN19@CSpeedTree:

; 343  : 	}
; 344  : 
; 345  : 	// always delete the speedtree
; 346  : 	SAFE_DELETE(m_pSpeedTree);

  001e0	8b be 48 02 00
	00		 mov	 edi, DWORD PTR [esi+584]
  001e6	85 ff		 test	 edi, edi
  001e8	74 1a		 je	 SHORT $LN20@CSpeedTree
  001ea	8b cf		 mov	 ecx, edi
  001ec	e8 00 00 00 00	 call	 ??1CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::~CSpeedTreeRT
  001f1	57		 push	 edi
  001f2	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  001f7	83 c4 04	 add	 esp, 4
  001fa	c7 86 48 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+584], 0
$LN20@CSpeedTree:

; 347  : 
; 348  : 	Clear();

  00204	8b ce		 mov	 ecx, esi
  00206	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 349  : }

  0020b	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00211	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00216	8d 8e a4 03 00
	00		 lea	 ecx, DWORD PTR [esi+932]
  0021c	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00221	8d 8e 84 03 00
	00		 lea	 ecx, DWORD PTR [esi+900]
  00227	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0022c	8b 8e 54 02 00
	00		 mov	 ecx, DWORD PTR [esi+596]
  00232	85 c9		 test	 ecx, ecx
  00234	74 33		 je	 SHORT $LN43@CSpeedTree

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00236	8b 86 5c 02 00
	00		 mov	 eax, DWORD PTR [esi+604]
  0023c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00241	50		 push	 eax
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00248	c7 86 54 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+596], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00252	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00255	c7 86 58 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+600], 0

; 1699 :             _Myend   = pointer();

  0025f	c7 86 5c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+604], 0
$LN43@CSpeedTree:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 349  : }

  00269	8b ce		 mov	 ecx, esi
  0026b	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  00270	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00273	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0027a	59		 pop	 ecx
  0027b	5f		 pop	 edi
  0027c	5e		 pop	 esi
  0027d	5b		 pop	 ebx
  0027e	8b e5		 mov	 esp, ebp
  00280	5d		 pop	 ebp
  00281	c3		 ret	 0
  00282	cc		 int	 3
  00283	cc		 int	 3
  00284	cc		 int	 3
  00285	cc		 int	 3
  00286	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSpeedTreeWrapper@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSpeedTreeWrapper@@UAE@XZ ENDP			; CSpeedTreeWrapper::~CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??0CSpeedTreeWrapper@@QAE@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSpeedTreeWrapper@@QAE@XZ PROC			; CSpeedTreeWrapper::CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSpeedTreeWrapper@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	e8 00 00 00 00	 call	 ??0CGraphicObjectInstance@@QAE@XZ ; CGraphicObjectInstance::CGraphicObjectInstance

; 60   : m_pSpeedTree(new CSpeedTreeRT),

  00030	68 9c 00 00 00	 push	 156			; 0000009cH
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00042	e8 00 00 00 00	 call	 ??2CSpeedTreeRT@@SAPAXI@Z ; CSpeedTreeRT::operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00051	85 c0		 test	 eax, eax
  00053	74 09		 je	 SHORT $LN3@CSpeedTree
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ??0CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::CSpeedTreeRT
  0005c	eb 02		 jmp	 SHORT $LN4@CSpeedTree
$LN3@CSpeedTree:
  0005e	33 c0		 xor	 eax, eax
$LN4@CSpeedTree:
  00060	89 86 48 02 00
	00		 mov	 DWORD PTR [esi+584], eax

; 65   : m_pBranchIndexCounts(NULL),
; 66   : m_pBranchIndexBuffer(NULL),
; 67   : m_pBranchVertexBuffer(NULL),
; 68   : m_pFrondIndexCounts(NULL),
; 69   : m_pFrondIndexBuffer(NULL),
; 70   : m_pFrondVertexBuffer(NULL),
; 71   : m_pLeafVertexBuffer(NULL),
; 72   : m_pLeavesUpdatedByCpu(NULL),
; 73   : m_unBranchVertexCount(0),
; 74   : m_unFrondVertexCount(0),
; 75   : m_pTextureInfo(NULL)

  00066	c7 86 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+588], 0

; 61   : m_bIsInstance(false),

  00070	c6 86 50 02 00
	00 00		 mov	 BYTE PTR [esi+592], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00077	c7 86 54 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+596], 0
  00081	c7 86 58 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+600], 0
  0008b	c7 86 5c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+604], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 64   : m_usNumLeafLods(0),

  00095	33 c0		 xor	 eax, eax
  00097	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 76   : {

  0009b	8d 8e b8 02 00
	00		 lea	 ecx, DWORD PTR [esi+696]
  000a1	c7 86 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+608], 0
  000ab	c7 86 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+612], 0
  000b5	c7 86 68 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+616], 0
  000bf	c7 86 6c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+620], 0
  000c9	c7 86 70 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+624], 0
  000d3	c7 86 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+628], 0
  000dd	c7 86 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+632], 0
  000e7	c7 86 7c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+636], 0
  000f1	c7 86 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+640], 0
  000fb	c7 86 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+644], 0
  00105	66 89 86 88 02
	00 00		 mov	 WORD PTR [esi+648], ax
  0010c	89 86 8c 02 00
	00		 mov	 DWORD PTR [esi+652], eax
  00112	89 86 90 02 00
	00		 mov	 DWORD PTR [esi+656], eax
  00118	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  0011d	8d 8e fc 02 00
	00		 lea	 ecx, DWORD PTR [esi+764]
  00123	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00128	8d 8e 40 03 00
	00		 lea	 ecx, DWORD PTR [esi+832]
  0012e	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00133	8d 8e 84 03 00
	00		 lea	 ecx, DWORD PTR [esi+900]
  00139	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0013e	8d 8e a4 03 00
	00		 lea	 ecx, DWORD PTR [esi+932]
  00144	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00148	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0014d	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00153	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00157	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 77   : 	// set initial position
; 78   : 	m_afPos[0] = m_afPos[1] = m_afPos[2] = 0.0f;
; 79   : 
; 80   : 	m_pSpeedTree->SetWindStrength(1.0f);

  0015c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0015f	c7 86 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+668], 0
  00169	c7 86 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+664], 0
  00173	c7 86 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+660], 0
  0017d	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00183	c7 44 24 08 00
	00 80 bf	 mov	 DWORD PTR [esp+8], -1082130432 ; bf800000H
  0018b	c7 44 24 04 00
	00 80 bf	 mov	 DWORD PTR [esp+4], -1082130432 ; bf800000H
  00193	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00197	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0019e	e8 00 00 00 00	 call	 ?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z ; CSpeedTreeRT::SetWindStrength

; 81   : 	m_pSpeedTree->SetLocalMatrices(0, 4);

  001a3	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  001a9	dd d8		 fstp	 ST(0)
  001ab	6a 04		 push	 4
  001ad	6a 00		 push	 0
  001af	e8 00 00 00 00	 call	 ?SetLocalMatrices@CSpeedTreeRT@@QAEXII@Z ; CSpeedTreeRT::SetLocalMatrices

; 82   : }

  001b4	8b c6		 mov	 eax, esi
  001b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c0	59		 pop	 ecx
  001c1	5e		 pop	 esi
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 54 02 00
	00		 add	 ecx, 596		; 00000254H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 84 03 00
	00		 add	 ecx, 900		; 00000384H
  0002a	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4:
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 a4 03 00
	00		 add	 ecx, 932		; 000003a4H
  00038	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$5:
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 c1 c4 03 00
	00		 add	 ecx, 964		; 000003c4H
  00046	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
__ehhandler$??0CSpeedTreeWrapper@@QAE@XZ:
  00050	90		 npad	 1
  00051	90		 npad	 1
  00052	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00056	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00059	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ
  00068	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSpeedTreeWrapper@@QAE@XZ ENDP			; CSpeedTreeWrapper::CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
_dwFogEnable$1$ = -8					; size = 4
_dwAlphaBlendEnable$1$ = -4				; size = 4
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderPCBlocker, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 92   : 	if (ms_dwBranchVertexShader == 0)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b f1		 mov	 esi, ecx
  00012	75 13		 jne	 SHORT $LN2@OnRenderPC

; 93   : 	{
; 94   : 		ms_dwBranchVertexShader = LoadBranchShader(ms_lpd3dDevice);

  00014	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0001a	e8 00 00 00 00	 call	 ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadBranchShader
  0001f	83 c4 04	 add	 esp, 4
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader
$LN2@OnRenderPC:

; 95   : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 96   : 	}
; 97   : 
; 98   : 	if (ms_dwLeafVertexShader == 0)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  0002e	75 13		 jne	 SHORT $LN3@OnRenderPC

; 99   : 	{
; 100  : 		ms_dwLeafVertexShader = LoadLeafShader(ms_lpd3dDevice);

  00030	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00036	e8 00 00 00 00	 call	 ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadLeafShader
  0003b	83 c4 04	 add	 esp, 4
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader
$LN3@OnRenderPC:

; 101  : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 102  : 	}
; 103  : 
; 104  : 	CSpeedTreeForestDirectX8::Instance().UpdateSystem(ELTimer_GetMSec() / 1000.0f);

  00043	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00048	51		 push	 ecx
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  0004f	66 0f 6e c0	 movd	 xmm0, eax
  00053	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00057	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00063	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00067	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0006f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00074	e8 00 00 00 00	 call	 ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::UpdateSystem

; 105  : 
; 106  : 	m_pSpeedTree->SetLodLevel(1.0f);

  00079	51		 push	 ecx
  0007a	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00080	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00087	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 107  : 	//Advance();
; 108  : 
; 109  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00092	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00097	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0009c	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  000a7	83 c0 30	 add	 eax, 48			; 00000030H
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix

; 110  : 
; 111  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b6	6a 02		 push	 2
  000b8	6a 02		 push	 2
  000ba	6a 00		 push	 0
  000bc	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 112  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c7	6a 00		 push	 0
  000c9	6a 03		 push	 3
  000cb	6a 00		 push	 0
  000cd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 113  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d8	6a 04		 push	 4
  000da	6a 01		 push	 1
  000dc	6a 00		 push	 0
  000de	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 114  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e9	6a 02		 push	 2
  000eb	6a 05		 push	 5
  000ed	6a 00		 push	 0
  000ef	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 115  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000fa	6a 00		 push	 0
  000fc	6a 06		 push	 6
  000fe	6a 00		 push	 0
  00100	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 116  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0010b	6a 04		 push	 4
  0010d	6a 04		 push	 4
  0010f	6a 00		 push	 0
  00111	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 117  : 
; 118  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011c	6a 02		 push	 2
  0011e	6a 05		 push	 5
  00120	6a 01		 push	 1
  00122	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 119  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012d	6a 01		 push	 1
  0012f	6a 06		 push	 6
  00131	6a 01		 push	 1
  00133	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 120  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013e	6a 04		 push	 4
  00140	6a 04		 push	 4
  00142	6a 01		 push	 1
  00144	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 121  : 
; 122  : 	DWORD dwLighting = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014f	68 89 00 00 00	 push	 137			; 00000089H
  00154	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 123  : 	DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015f	8b d8		 mov	 ebx, eax
  00161	6a 1c		 push	 28			; 0000001cH
  00163	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 124  : 	DWORD dwAlphaBlendEnable = STATEMANAGER.GetRenderState(D3DRS_ALPHABLENDENABLE);

  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016e	6a 1b		 push	 27			; 0000001bH
  00170	89 45 f8	 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  00173	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
  00178	89 45 fc	 mov	 DWORD PTR _dwAlphaBlendEnable$1$[ebp], eax

; 125  :  	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0017b	6a 00		 push	 0
  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00183	68 89 00 00 00	 push	 137			; 00000089H
  00188	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 126  : 	STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  0018d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00193	6a 01		 push	 1
  00195	68 8d 00 00 00	 push	 141			; 0000008dH
  0019a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 127  :     STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  0019f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a5	6a 01		 push	 1
  001a7	6a 1b		 push	 27			; 0000001bH
  001a9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 128  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  001ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b4	6a 01		 push	 1
  001b6	6a 0f		 push	 15			; 0000000fH
  001b8	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 129  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  001bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c3	6a 05		 push	 5
  001c5	6a 19		 push	 25			; 00000019H
  001c7	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 130  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  001cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d2	6a 02		 push	 2
  001d4	6a 16		 push	 22			; 00000016H
  001d6	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 131  :  	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  001db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e1	6a 00		 push	 0
  001e3	6a 1c		 push	 28			; 0000001cH
  001e5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 132  : 
; 133  : 	// choose fixed function pipeline or custom shader for fronds and branches
; 134  : 	STATEMANAGER.SetVertexShader(ms_dwBranchVertexShader);

  001ea	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f6	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 135  : 
; 136  : // 	SetupBranchForTreeType();
; 137  : 	{
; 138  : 		// update the branch geometry for CPU wind
; 139  : #ifdef WRAPPER_USE_CPU_WIND
; 140  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);
; 141  : 
; 142  : 		if (m_pGeometryCache->m_sBranches.m_usNumStrips > 0)
; 143  : 		{
; 144  : 			// update the vertex array
; 145  : 			SFVFBranchVertex* pVertexBuffer = NULL;
; 146  : 			m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 147  : 			for (UINT i = 0; i < m_unBranchVertexCount; ++i)
; 148  : 			{
; 149  : 				memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sBranches.m_pCoords[i * 3]), 3 * sizeof(float));
; 150  : 			}
; 151  : 			m_pBranchVertexBuffer->Unlock();
; 152  : 		}
; 153  : #endif
; 154  : 
; 155  : 		LPDIRECT3DTEXTURE8 lpd3dTexture;
; 156  : 
; 157  : 		// set texture map
; 158  : 		if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  001fb	8d 8e 84 03 00
	00		 lea	 ecx, DWORD PTR [esi+900]
  00201	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00206	8b c8		 mov	 ecx, eax
  00208	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0020d	85 c0		 test	 eax, eax
  0020f	74 0e		 je	 SHORT $LN4@OnRenderPC

; 159  : 			STATEMANAGER.SetTexture(0, lpd3dTexture);

  00211	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00217	50		 push	 eax
  00218	6a 00		 push	 0
  0021a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN4@OnRenderPC:

; 160  : 
; 161  : 		if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  0021f	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  00225	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  0022a	76 28		 jbe	 SHORT $LN5@OnRenderPC

; 162  : 		{
; 163  : 			// activate the branch vertex buffer
; 164  : 			STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  0022c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00232	6a 20		 push	 32			; 00000020H
  00234	ff b6 68 02 00
	00		 push	 DWORD PTR [esi+616]
  0023a	6a 00		 push	 0
  0023c	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 165  : 			// set the index buffer
; 166  : 			STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00247	6a 00		 push	 0
  00249	ff b6 70 02 00
	00		 push	 DWORD PTR [esi+624]
  0024f	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN5@OnRenderPC:

; 167  : 		}
; 168  : 	}
; 169  : 
; 170  : 	RenderBranches();

  00254	8b ce		 mov	 ecx, esi
  00256	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches

; 171  : 
; 172  : 	STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  0025b	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00261	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00266	8b c8		 mov	 ecx, eax
  00268	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0026d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00273	50		 push	 eax
  00274	6a 00		 push	 0
  00276	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 173  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  0027b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00281	6a 01		 push	 1
  00283	6a 16		 push	 22			; 00000016H
  00285	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 174  : 
; 175  : // 	SetupFrondForTreeType();
; 176  : 	{
; 177  : 		// update the frond geometry for CPU wind
; 178  : #ifdef WRAPPER_USE_CPU_WIND
; 179  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);
; 180  : 		if (m_pGeometryCache->m_sFronds.m_usNumStrips > 0)
; 181  : 		{
; 182  : 			// update the vertex array
; 183  : 			SFVFBranchVertex * pVertexBuffer = NULL;
; 184  : 			m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 185  : 			for (UINT i = 0; i < m_unFrondVertexCount; ++i)
; 186  : 			{
; 187  : 				memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sFronds.m_pCoords[i * 3]), 3 * sizeof(float));
; 188  : 			}
; 189  : 			m_pFrondVertexBuffer->Unlock();
; 190  : 		}
; 191  : #endif
; 192  : 
; 193  : 		if (!m_CompositeImageInstance.IsEmpty())

  0028a	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00290	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00295	84 c0		 test	 al, al
  00297	75 20		 jne	 SHORT $LN6@OnRenderPC

; 194  : 			STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00299	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  0029f	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  002a4	8b c8		 mov	 ecx, eax
  002a6	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  002ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b1	50		 push	 eax
  002b2	6a 00		 push	 0
  002b4	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN6@OnRenderPC:

; 195  : 
; 196  : 		if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0)

  002b9	8b 86 64 02 00
	00		 mov	 eax, DWORD PTR [esi+612]
  002bf	66 83 78 4c 00	 cmp	 WORD PTR [eax+76], 0
  002c4	76 28		 jbe	 SHORT $LN7@OnRenderPC

; 197  : 		{
; 198  : 			// activate the frond vertex buffer
; 199  : 			STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  002c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002cc	6a 20		 push	 32			; 00000020H
  002ce	ff b6 78 02 00
	00		 push	 DWORD PTR [esi+632]
  002d4	6a 00		 push	 0
  002d6	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 200  : 			// set the index buffer
; 201  : 			STATEMANAGER.SetIndices(m_pFrondIndexBuffer, 0);

  002db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e1	6a 00		 push	 0
  002e3	ff b6 80 02 00
	00		 push	 DWORD PTR [esi+640]
  002e9	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN7@OnRenderPC:

; 202  : 		}
; 203  : 	}
; 204  : 	RenderFronds();

  002ee	8b ce		 mov	 ecx, esi
  002f0	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds

; 205  : 
; 206  : 	STATEMANAGER.SetVertexShader(ms_dwLeafVertexShader);

  002f5	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  002fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00301	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 207  : 
; 208  : // 	SetupLeafForTreeType();
; 209  : 	{
; 210  : 		// pass leaf tables to shader
; 211  : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 212  : 		UploadLeafTables(c_nVertexShader_LeafTables);
; 213  : #endif
; 214  : 
; 215  : 		if (!m_CompositeImageInstance.IsEmpty())

  00306	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  0030c	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00311	84 c0		 test	 al, al
  00313	75 20		 jne	 SHORT $LN8@OnRenderPC

; 216  : 			STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00315	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  0031b	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00320	8b c8		 mov	 ecx, eax
  00322	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00327	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0032d	50		 push	 eax
  0032e	6a 00		 push	 0
  00330	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN8@OnRenderPC:

; 217  : 	}
; 218  : 	RenderLeaves();

  00335	8b ce		 mov	 ecx, esi
  00337	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 219  : 	EndLeafForTreeType();

  0033c	8b ce		 mov	 ecx, esi
  0033e	e8 00 00 00 00	 call	 ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ; CSpeedTreeWrapper::EndLeafForTreeType

; 220  : 
; 221  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00343	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00349	6a 00		 push	 0
  0034b	68 89 00 00 00	 push	 137			; 00000089H
  00350	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00355	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0035b	6a 00		 push	 0
  0035d	68 8d 00 00 00	 push	 141			; 0000008dH
  00362	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	RenderBillboards();

  00367	8b ce		 mov	 ecx, esi
  00369	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 224  : 
; 225  : 	STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  0036e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00374	68 8d 00 00 00	 push	 141			; 0000008dH
  00379	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 226  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00384	6a 16		 push	 22			; 00000016H
  00386	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 227  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  0038b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00391	6a 0f		 push	 15			; 0000000fH
  00393	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 228  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00398	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039e	6a 19		 push	 25			; 00000019H
  003a0	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 229  : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlendEnable);

  003a5	ff 75 fc	 push	 DWORD PTR _dwAlphaBlendEnable$1$[ebp]
  003a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003ae	6a 1b		 push	 27			; 0000001bH
  003b0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 230  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLighting);

  003b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003bb	53		 push	 ebx
  003bc	68 89 00 00 00	 push	 137			; 00000089H
  003c1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 231  :  	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  003c6	ff 75 f8	 push	 DWORD PTR _dwFogEnable$1$[ebp]
  003c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003cf	6a 1c		 push	 28			; 0000001cH
  003d1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 232  : 
; 233  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  003d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003dc	6a 02		 push	 2
  003de	6a 04		 push	 4
  003e0	6a 01		 push	 1
  003e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  003e7	5f		 pop	 edi
  003e8	5e		 pop	 esi
  003e9	5b		 pop	 ebx

; 234  : }

  003ea	8b e5		 mov	 esp, ebp
  003ec	5d		 pop	 ebp
  003ed	c3		 ret	 0
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRenderShadow, COMDAT
; _this$ = ecx

; 93   : 	virtual void				OnRenderShadow() {}

  00000	c2 00 00	 ret	 0
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderToShadowMap, COMDAT
; _this$ = ecx

; 92   : 	virtual void				OnRenderToShadowMap() {}

  00000	c2 00 00	 ret	 0
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnBlendRender, COMDAT
; _this$ = ecx

; 91   : 	virtual void				OnBlendRender() {}

  00000	c2 00 00	 ret	 0
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnBlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRender, COMDAT
; _this$ = ecx

; 238  : 	if (ms_dwBranchVertexShader == 0)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	75 13		 jne	 SHORT $LN2@OnRender

; 239  : 	{
; 240  : 		ms_dwBranchVertexShader = LoadBranchShader(ms_lpd3dDevice);

  0000c	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00012	e8 00 00 00 00	 call	 ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadBranchShader
  00017	83 c4 04	 add	 esp, 4
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader
$LN2@OnRender:

; 241  : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 242  : 	}
; 243  : 
; 244  : 	if (ms_dwLeafVertexShader == 0)

  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  00026	75 13		 jne	 SHORT $LN3@OnRender

; 245  : 	{
; 246  : 		ms_dwLeafVertexShader = LoadLeafShader(ms_lpd3dDevice);

  00028	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002e	e8 00 00 00 00	 call	 ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadLeafShader
  00033	83 c4 04	 add	 esp, 4
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader
$LN3@OnRender:

; 247  : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 248  : 	}
; 249  : 
; 250  : 	CSpeedTreeForestDirectX8::Instance().UpdateSystem(ELTimer_GetMSec() / 1000.0f);

  0003b	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00040	51		 push	 ecx
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  00047	66 0f 6e c0	 movd	 xmm0, eax
  0004b	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0004f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00052	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0005b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0005f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	e8 00 00 00 00	 call	 ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::UpdateSystem

; 251  : 
; 252  : 	m_pSpeedTree->SetLodLevel(1.0f);

  00071	51		 push	 ecx
  00072	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  00078	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0007f	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 253  : 	//Advance();
; 254  : 
; 255  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0008a	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  0008f	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  00094	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  0009f	83 c0 30	 add	 eax, 48			; 00000030H
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix

; 256  : 
; 257  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ae	6a 02		 push	 2
  000b0	6a 02		 push	 2
  000b2	6a 00		 push	 0
  000b4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000bf	6a 00		 push	 0
  000c1	6a 03		 push	 3
  000c3	6a 00		 push	 0
  000c5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 259  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d0	6a 04		 push	 4
  000d2	6a 01		 push	 1
  000d4	6a 00		 push	 0
  000d6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 260  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e1	6a 02		 push	 2
  000e3	6a 05		 push	 5
  000e5	6a 00		 push	 0
  000e7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 261  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f2	6a 00		 push	 0
  000f4	6a 06		 push	 6
  000f6	6a 00		 push	 0
  000f8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  000fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00103	6a 04		 push	 4
  00105	6a 04		 push	 4
  00107	6a 00		 push	 0
  00109	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 
; 264  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_MODULATE);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00114	6a 04		 push	 4
  00116	6a 01		 push	 1
  00118	6a 01		 push	 1
  0011a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00125	6a 02		 push	 2
  00127	6a 02		 push	 2
  00129	6a 01		 push	 1
  0012b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 266  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00136	6a 01		 push	 1
  00138	6a 03		 push	 3
  0013a	6a 01		 push	 1
  0013c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 267  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00147	6a 01		 push	 1
  00149	6a 0d		 push	 13			; 0000000dH
  0014b	6a 01		 push	 1
  0014d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00152	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00158	6a 01		 push	 1
  0015a	6a 0e		 push	 14			; 0000000eH
  0015c	6a 01		 push	 1
  0015e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 
; 270  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00169	6a 00		 push	 0
  0016b	68 89 00 00 00	 push	 137			; 00000089H
  00170	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 271  : 	STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017b	6a 01		 push	 1
  0017d	68 8d 00 00 00	 push	 141			; 0000008dH
  00182	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 272  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  00187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0018d	6a 01		 push	 1
  0018f	6a 0f		 push	 15			; 0000000fH
  00191	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 273  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  00196	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019c	6a 05		 push	 5
  0019e	6a 19		 push	 25			; 00000019H
  001a0	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 274  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  001a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ab	6a 02		 push	 2
  001ad	6a 16		 push	 22			; 00000016H
  001af	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 275  : 	STATEMANAGER.SaveRenderState(D3DRS_FOGENABLE, FALSE);

  001b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ba	6a 00		 push	 0
  001bc	6a 1c		 push	 28			; 0000001cH
  001be	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 276  : 
; 277  : 	// choose fixed function pipeline or custom shader for fronds and branches
; 278  : 	STATEMANAGER.SetVertexShader(ms_dwBranchVertexShader);

  001c3	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  001c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001cf	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 279  : 
; 280  : 	SetupBranchForTreeType();

  001d4	8b ce		 mov	 ecx, esi
  001d6	e8 00 00 00 00	 call	 ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType

; 281  : 	RenderBranches();

  001db	8b ce		 mov	 ecx, esi
  001dd	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches

; 282  : 
; 283  : 	STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  001e2	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  001e8	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  001ed	8b c8		 mov	 ecx, eax
  001ef	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  001f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001fa	50		 push	 eax
  001fb	6a 00		 push	 0
  001fd	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 284  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00202	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00208	6a 01		 push	 1
  0020a	6a 16		 push	 22			; 00000016H
  0020c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 285  : 
; 286  : 	SetupFrondForTreeType();

  00211	8b ce		 mov	 ecx, esi
  00213	e8 00 00 00 00	 call	 ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType

; 287  : 	RenderFronds();

  00218	8b ce		 mov	 ecx, esi
  0021a	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds

; 288  : 
; 289  : 	STATEMANAGER.SetVertexShader(ms_dwLeafVertexShader);

  0021f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  00225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0022b	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 290  : 
; 291  : 	SetupLeafForTreeType();

  00230	8b ce		 mov	 ecx, esi
  00232	e8 00 00 00 00	 call	 ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupLeafForTreeType

; 292  : 	RenderLeaves();

  00237	8b ce		 mov	 ecx, esi
  00239	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 293  : 	EndLeafForTreeType();

  0023e	8b ce		 mov	 ecx, esi
  00240	e8 00 00 00 00	 call	 ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ; CSpeedTreeWrapper::EndLeafForTreeType

; 294  : 
; 295  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00245	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0024b	6a 00		 push	 0
  0024d	68 89 00 00 00	 push	 137			; 00000089H
  00252	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 296  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0025d	6a 00		 push	 0
  0025f	68 8d 00 00 00	 push	 141			; 0000008dH
  00264	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 297  : 	RenderBillboards();

  00269	8b ce		 mov	 ecx, esi
  0026b	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 298  : 
; 299  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00270	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00276	68 89 00 00 00	 push	 137			; 00000089H
  0027b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 300  : 	STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  00280	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00286	68 8d 00 00 00	 push	 141			; 0000008dH
  0028b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 301  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00296	6a 0f		 push	 15			; 0000000fH
  00298	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 302  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  0029d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a3	6a 19		 push	 25			; 00000019H
  002a5	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 303  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  002aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b0	6a 16		 push	 22			; 00000016H
  002b2	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 304  : 	STATEMANAGER.RestoreRenderState(D3DRS_FOGENABLE);

  002b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002bd	6a 1c		 push	 28			; 0000001cH
  002bf	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
  002c4	5e		 pop	 esi

; 305  : }

  002c5	c3		 ret	 0
?OnRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 16
$T2 = -28						; size = 16
$T3 = -28						; size = 16
$T4 = -28						; size = 16
$T5 = -28						; size = 16
$T6 = -28						; size = 16
$T7 = -28						; size = 16
$T8 = -28						; size = 16
_c_rmatTransform$1$ = -12				; size = 4
tv1195 = -8						; size = 4
_i$1$ = -4						; size = 4
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::CalculateBBox, COMDAT
; _this$ = ecx

; 1359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1364 : 	fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 1365 : 
; 1366 : 	m_v3BBoxMin.x = -fX / 2.0f;

  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 323  :     z = fz;

  00011	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+8], 0

; 324  :     w = fw;

  00018	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T8[ebp+12], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1359 : {

  0001f	57		 push	 edi

; 1360 : 	float fX, fY, fZ;
; 1361 : 
; 1362 : 	fX = m_afBoundingBox[3] - m_afBoundingBox[0];

  00020	f3 0f 10 ae ac
	02 00 00	 movss	 xmm5, DWORD PTR [esi+684]

; 1363 : 	fY = m_afBoundingBox[4] - m_afBoundingBox[1];

  00028	f3 0f 10 a6 b0
	02 00 00	 movss	 xmm4, DWORD PTR [esi+688]
  00030	f3 0f 5c ae a0
	02 00 00	 subss	 xmm5, DWORD PTR [esi+672]
  00038	f3 0f 5c a6 a4
	02 00 00	 subss	 xmm4, DWORD PTR [esi+676]

; 1367 : 	m_v3BBoxMin.y = -fY / 2.0f;
; 1368 : 	m_v3BBoxMin.z = 0.0f;

  00040	c7 86 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+336], 0
  0004a	0f 28 d5	 movaps	 xmm2, xmm5

; 1369 : 	m_v3BBoxMax.x = fX / 2.0f;

  0004d	f3 0f 59 e9	 mulss	 xmm5, xmm1
  00051	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00058	0f 28 dc	 movaps	 xmm3, xmm4
  0005b	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
  00062	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00066	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 321  :     x = fx;

  0006a	f3 0f 11 55 e4	 movss	 DWORD PTR $T8[ebp], xmm2
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1370 : 	m_v3BBoxMax.y = fY / 2.0f;

  0006f	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00073	f3 0f 10 8e b4
	02 00 00	 movss	 xmm1, DWORD PTR [esi+692]
  0007b	f3 0f 5c 8e a8
	02 00 00	 subss	 xmm1, DWORD PTR [esi+680]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 322  :     y = fy;

  00083	f3 0f 11 5d e8	 movss	 DWORD PTR $T8[ebp+4], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1373 : 	m_v4TBBox[0] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  00088	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T8[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 323  :     z = fz;

  0008c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+8], 0
  00093	f3 0f 11 55 e4	 movss	 DWORD PTR $T7[ebp], xmm2
  00098	f3 0f 11 65 e8	 movss	 DWORD PTR $T7[ebp+4], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1373 : 	m_v4TBBox[0] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  0009d	0f 11 86 b0 00
	00 00		 movups	 XMMWORD PTR [esi+176], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  000a4	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T7[ebp+12], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1374 : 	m_v4TBBox[1] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000ab	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T7[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 323  :     z = fz;

  000af	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+8], 0
  000b6	f3 0f 11 6d e4	 movss	 DWORD PTR $T6[ebp], xmm5
  000bb	f3 0f 11 5d e8	 movss	 DWORD PTR $T6[ebp+4], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1374 : 	m_v4TBBox[1] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000c0	0f 11 86 c0 00
	00 00		 movups	 XMMWORD PTR [esi+192], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  000c7	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T6[ebp+12], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1375 : 	m_v4TBBox[2] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  000ce	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 323  :     z = fz;

  000d2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
  000d9	f3 0f 11 6d e4	 movss	 DWORD PTR $T5[ebp], xmm5
  000de	f3 0f 11 65 e8	 movss	 DWORD PTR $T5[ebp+4], xmm4
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1375 : 	m_v4TBBox[2] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  000e3	0f 11 86 d0 00
	00 00		 movups	 XMMWORD PTR [esi+208], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  000ea	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T5[ebp+12], 1065353216 ; 3f800000H
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1376 : 	m_v4TBBox[3] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000f1	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  000f5	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T4[ebp+12], 1065353216 ; 3f800000H
  000fc	f3 0f 11 55 e4	 movss	 DWORD PTR $T4[ebp], xmm2
  00101	f3 0f 11 5d e8	 movss	 DWORD PTR $T4[ebp+4], xmm3
  00106	f3 0f 11 4d ec	 movss	 DWORD PTR $T4[ebp+8], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1376 : 	m_v4TBBox[3] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  0010b	0f 11 86 e0 00
	00 00		 movups	 XMMWORD PTR [esi+224], xmm0

; 1377 : 	m_v4TBBox[4] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00112	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T4[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  00116	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+12], 1065353216 ; 3f800000H
  0011d	f3 0f 11 55 e4	 movss	 DWORD PTR $T3[ebp], xmm2
  00122	f3 0f 11 65 e8	 movss	 DWORD PTR $T3[ebp+4], xmm4
  00127	f3 0f 11 4d ec	 movss	 DWORD PTR $T3[ebp+8], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1377 : 	m_v4TBBox[4] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  0012c	0f 11 86 f0 00
	00 00		 movups	 XMMWORD PTR [esi+240], xmm0

; 1378 : 	m_v4TBBox[5] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  00133	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  00137	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T2[ebp+12], 1065353216 ; 3f800000H
  0013e	f3 0f 11 6d e4	 movss	 DWORD PTR $T2[ebp], xmm5
  00143	f3 0f 11 5d e8	 movss	 DWORD PTR $T2[ebp+4], xmm3
  00148	f3 0f 11 4d ec	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1378 : 	m_v4TBBox[5] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  0014d	0f 11 86 00 01
	00 00		 movups	 XMMWORD PTR [esi+256], xmm0

; 1379 : 	m_v4TBBox[6] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00154	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T2[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 324  :     w = fw;

  00158	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR $T1[ebp+12], 1065353216 ; 3f800000H
  0015f	f3 0f 11 6d e4	 movss	 DWORD PTR $T1[ebp], xmm5
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1379 : 	m_v4TBBox[6] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00164	0f 11 86 10 01
	00 00		 movups	 XMMWORD PTR [esi+272], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 322  :     y = fy;

  0016b	f3 0f 11 65 e8	 movss	 DWORD PTR $T1[ebp+4], xmm4

; 323  :     z = fz;

  00170	f3 0f 11 4d ec	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1380 : 	m_v4TBBox[7] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  00175	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00179	f3 0f 11 96 48
	01 00 00	 movss	 DWORD PTR [esi+328], xmm2
  00181	f3 0f 11 9e 4c
	01 00 00	 movss	 DWORD PTR [esi+332], xmm3
  00189	f3 0f 11 ae 54
	01 00 00	 movss	 DWORD PTR [esi+340], xmm5
  00191	f3 0f 11 a6 58
	01 00 00	 movss	 DWORD PTR [esi+344], xmm4
  00199	f3 0f 11 8e 5c
	01 00 00	 movss	 DWORD PTR [esi+348], xmm1
  001a1	0f 11 86 20 01
	00 00		 movups	 XMMWORD PTR [esi+288], xmm0

; 1381 : 
; 1382 : 	const D3DXMATRIX & c_rmatTransform = GetTransform();

  001a8	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  001ad	8b d0		 mov	 edx, eax
  001af	33 c9		 xor	 ecx, ecx
  001b1	89 55 f4	 mov	 DWORD PTR _c_rmatTransform$1$[ebp], edx
  001b4	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  001b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@CalculateB:

; 1385 : 	{
; 1386 : 		D3DXVec4Transform(&m_v4TBBox[i], &m_v4TBBox[i], &c_rmatTransform);

  001c0	8b f9		 mov	 edi, ecx
  001c2	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  001c8	c1 e7 04	 shl	 edi, 4
  001cb	03 c7		 add	 eax, edi
  001cd	52		 push	 edx
  001ce	50		 push	 eax
  001cf	50		 push	 eax
  001d0	89 45 f8	 mov	 DWORD PTR tv1195[ebp], eax
  001d3	e8 00 00 00 00	 call	 _D3DXVec4Transform@12
  001d8	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  001db	8d 51 0b	 lea	 edx, DWORD PTR [ecx+11]
  001de	03 d2		 add	 edx, edx

; 1387 : 		if (0 == i)

  001e0	85 c9		 test	 ecx, ecx
  001e2	75 49		 jne	 SHORT $LN5@CalculateB

; 1388 : 		{
; 1389 : 			m_v3TBBoxMin.x = m_v4TBBox[i].x;

  001e4	8b 45 f8	 mov	 eax, DWORD PTR tv1195[ebp]
  001e7	8b 00		 mov	 eax, DWORD PTR [eax]
  001e9	89 86 30 01 00
	00		 mov	 DWORD PTR [esi+304], eax

; 1390 : 			m_v3TBBoxMin.y = m_v4TBBox[i].y;

  001ef	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  001f7	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1

; 1391 : 			m_v3TBBoxMin.z = m_v4TBBox[i].z;

  001ff	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00207	f3 0f 11 86 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm0

; 1392 : 			m_v3TBBoxMax.x = m_v4TBBox[i].x;

  0020f	8b 04 d6	 mov	 eax, DWORD PTR [esi+edx*8]
  00212	89 86 3c 01 00
	00		 mov	 DWORD PTR [esi+316], eax

; 1393 : 			m_v3TBBoxMax.y = m_v4TBBox[i].y;

  00218	f3 0f 11 8e 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm1

; 1394 : 			m_v3TBBoxMax.z = m_v4TBBox[i].z;

  00220	f3 0f 11 86 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm0

; 1395 : 		}

  00228	e9 a7 00 00 00	 jmp	 $LN2@CalculateB
$LN5@CalculateB:

; 1396 : 		else
; 1397 : 		{
; 1398 : 			if (m_v3TBBoxMin.x > m_v4TBBox[i].x)

  0022d	f3 0f 10 0c d6	 movss	 xmm1, DWORD PTR [esi+edx*8]
  00232	f3 0f 10 86 30
	01 00 00	 movss	 xmm0, DWORD PTR [esi+304]
  0023a	0f 2f c1	 comiss	 xmm0, xmm1
  0023d	76 08		 jbe	 SHORT $LN36@CalculateB

; 1399 : 				m_v3TBBoxMin.x = m_v4TBBox[i].x;

  0023f	f3 0f 11 8e 30
	01 00 00	 movss	 DWORD PTR [esi+304], xmm1
$LN36@CalculateB:

; 1400 : 			if (m_v3TBBoxMax.x < m_v4TBBox[i].x)

  00247	f3 0f 10 84 3e
	b0 00 00 00	 movss	 xmm0, DWORD PTR [esi+edi+176]
  00250	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00253	0f 2f 86 3c 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+316]
  0025a	76 08		 jbe	 SHORT $LN37@CalculateB

; 1401 : 				m_v3TBBoxMax.x = m_v4TBBox[i].x;

  0025c	f3 0f 11 86 3c
	01 00 00	 movss	 DWORD PTR [esi+316], xmm0
$LN37@CalculateB:

; 1402 : 			if (m_v3TBBoxMin.y > m_v4TBBox[i].y)

  00264	f3 0f 10 8c 37
	b4 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+180]
  0026d	f3 0f 10 86 34
	01 00 00	 movss	 xmm0, DWORD PTR [esi+308]
  00275	0f 2f c1	 comiss	 xmm0, xmm1
  00278	76 11		 jbe	 SHORT $LN9@CalculateB

; 1403 : 				m_v3TBBoxMin.y = m_v4TBBox[i].y;

  0027a	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1
  00282	f3 0f 10 8c 37
	b4 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+180]
$LN9@CalculateB:

; 1404 : 			if (m_v3TBBoxMax.y < m_v4TBBox[i].y)

  0028b	0f 2f 8e 40 01
	00 00		 comiss	 xmm1, DWORD PTR [esi+320]
  00292	76 08		 jbe	 SHORT $LN10@CalculateB

; 1405 : 				m_v3TBBoxMax.y = m_v4TBBox[i].y;

  00294	f3 0f 11 8e 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm1
$LN10@CalculateB:

; 1406 : 			if (m_v3TBBoxMin.z > m_v4TBBox[i].z)

  0029c	f3 0f 10 8c 37
	b8 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+184]
  002a5	f3 0f 10 86 38
	01 00 00	 movss	 xmm0, DWORD PTR [esi+312]
  002ad	0f 2f c1	 comiss	 xmm0, xmm1
  002b0	76 11		 jbe	 SHORT $LN11@CalculateB

; 1407 : 				m_v3TBBoxMin.z = m_v4TBBox[i].z;

  002b2	f3 0f 11 8e 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm1
  002ba	f3 0f 10 8c 37
	b8 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+184]
$LN11@CalculateB:

; 1408 : 			if (m_v3TBBoxMax.z < m_v4TBBox[i].z)

  002c3	0f 2f 8e 44 01
	00 00		 comiss	 xmm1, DWORD PTR [esi+324]
  002ca	76 08		 jbe	 SHORT $LN2@CalculateB

; 1409 : 				m_v3TBBoxMax.z = m_v4TBBox[i].z;

  002cc	f3 0f 11 8e 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm1
$LN2@CalculateB:

; 1383 : 
; 1384 : 	for (DWORD i = 0; i < 8; ++i)

  002d4	8b 55 f4	 mov	 edx, DWORD PTR _c_rmatTransform$1$[ebp]
  002d7	41		 inc	 ecx
  002d8	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  002db	83 f9 08	 cmp	 ecx, 8
  002de	0f 82 dc fe ff
	ff		 jb	 $LL4@CalculateB

; 1410 : 		}
; 1411 : 	}
; 1412 : }

  002e4	5f		 pop	 edi
  002e5	5e		 pop	 esi
  002e6	8b e5		 mov	 esp, ebp
  002e8	5d		 pop	 ebp
  002e9	c3		 ret	 0
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::CalculateBBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z PROC		; CSpeedTreeWrapper::SetPosition, COMDAT
; _this$ = ecx

; 1329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1330 : 	m_afPos[0] = x;
; 1331 : 	m_afPos[1] = y;
; 1332 : 	m_afPos[2] = z;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  0000d	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _x$[ebp]
  00012	56		 push	 esi
  00013	8b f1		 mov	 esi, ecx

; 1333 : 	m_pSpeedTree->SetTreePosition(x, y, z);

  00015	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00018	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  0001e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00024	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0002a	f3 0f 11 96 94
	02 00 00	 movss	 DWORD PTR [esi+660], xmm2
  00032	f3 0f 11 8e 98
	02 00 00	 movss	 DWORD PTR [esi+664], xmm1
  0003a	f3 0f 11 86 9c
	02 00 00	 movss	 DWORD PTR [esi+668], xmm0
  00042	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00047	e8 00 00 00 00	 call	 ?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z ; CSpeedTreeRT::SetTreePosition

; 1334 : 	CGraphicObjectInstance::SetPosition(x, y, z);

  0004c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00051	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00054	8b ce		 mov	 ecx, esi
  00056	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00061	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
  00076	5e		 pop	 esi

; 1335 : }

  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z ENDP		; CSpeedTreeWrapper::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
_TEXT	SEGMENT
_v3Center$ = 8						; size = 4
_fRadius$ = 12						; size = 4
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z PROC ; CSpeedTreeWrapper::GetBoundingSphere, COMDAT
; _this$ = ecx

; 1338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 1339 : 	float fX, fY, fZ;
; 1340 : 
; 1341 : 	fX = m_afBoundingBox[3] - m_afBoundingBox[0];
; 1342 : 	fY = m_afBoundingBox[4] - m_afBoundingBox[1];
; 1343 : 	fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 1344 : 
; 1345 : 	v3Center.x = 0.0f;

  0000a	8b 7d 08	 mov	 edi, DWORD PTR _v3Center$[ebp]
  0000d	f3 0f 10 96 ac
	02 00 00	 movss	 xmm2, DWORD PTR [esi+684]
  00015	f3 0f 10 9e b0
	02 00 00	 movss	 xmm3, DWORD PTR [esi+688]
  0001d	f3 0f 5c 9e a4
	02 00 00	 subss	 xmm3, DWORD PTR [esi+676]
  00025	f3 0f 5c 96 a0
	02 00 00	 subss	 xmm2, DWORD PTR [esi+672]
  0002d	f3 0f 10 8e b4
	02 00 00	 movss	 xmm1, DWORD PTR [esi+692]
  00035	f3 0f 5c 8e a8
	02 00 00	 subss	 xmm1, DWORD PTR [esi+680]
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1349 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  00043	f3 0f 59 db	 mulss	 xmm3, xmm3
  00047	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0004e	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00052	0f 28 c1	 movaps	 xmm0, xmm1
  00055	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00059	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00061	f3 0f 58 da	 addss	 xmm3, xmm2
  00065	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  0006a	f3 0f 58 d9	 addss	 xmm3, xmm1
  0006e	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00071	0f 5a c3	 cvtps2pd xmm0, xmm3
  00074	66 0f 2e c8	 ucomisd xmm1, xmm0
  00078	77 06		 ja	 SHORT $LN9@GetBoundin
  0007a	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0007e	eb 05		 jmp	 SHORT $LN10@GetBoundin
$LN9@GetBoundin:
  00080	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN10@GetBoundin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1349 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  00085	8b 45 0c	 mov	 eax, DWORD PTR _fRadius$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00088	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1349 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  0008c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00094	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f666666
  0009c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1350 : 
; 1351 : 	D3DXVECTOR3 vec = m_pSpeedTree->GetTreePosition();

  000a0	8b 8e 48 02 00
	00		 mov	 ecx, DWORD PTR [esi+584]
  000a6	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000ab	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  000af	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 165  :     y = pf[1];

  000b3	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 166  :     z = pf[2];

  000b8	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1355 : 	return true;

  000bd	b0 01		 mov	 al, 1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000bf	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 205  :     y += v.y;

  000c3	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  000c8	f3 0f 58 c1	 addss	 xmm0, xmm1
  000cc	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0

; 206  :     z += v.z;

  000d1	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000d6	f3 0f 58 c2	 addss	 xmm0, xmm2
  000da	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1356 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ENDP ; CSpeedTreeWrapper::GetBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z PROC	; CSpeedTreeWrapper::OnGetObjectHeight, COMDAT
; _this$ = ecx

; 77   : 	virtual bool OnGetObjectHeight(float fX, float fY, float * pfHeight) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 0c 00	 ret	 12			; 0000000cH
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ENDP	; CSpeedTreeWrapper::OnGetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z PROC ; CSpeedTreeWrapper::OnUpdateHeighInstance, COMDAT
; _this$ = ecx

; 76   : 	virtual void OnUpdateHeighInstance(CAttributeInstance * pAttributeInstance) {}

  00000	c2 04 00	 ret	 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateHeighInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_ObjectType$1 = -152					; size = 4
_mat$ = -148						; size = 64
_CollisionData$2 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CSpeedTreeWrapper::OnUpdateCollisionData, COMDAT
; _this$ = ecx

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 1441 : 	D3DXMATRIX mat;
; 1442 : 	D3DXMatrixTranslation(&mat, m_afPos[0], m_afPos[1], m_afPos[2]);

  00017	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  0001d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00020	f3 0f 10 87 9c
	02 00 00	 movss	 xmm0, DWORD PTR [edi+668]
  00028	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002e	f3 0f 10 87 98
	02 00 00	 movss	 xmm0, DWORD PTR [edi+664]
  00036	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003c	f3 0f 10 87 94
	02 00 00	 movss	 xmm0, DWORD PTR [edi+660]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 1443 : 
; 1444 : 	/////
; 1445 : 	for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  0004f	8b cf		 mov	 ecx, edi
  00051	33 f6		 xor	 esi, esi
  00053	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  00058	85 c0		 test	 eax, eax
  0005a	74 5e		 je	 SHORT $LN3@OnUpdateCo
  0005c	0f 1f 40 00	 npad	 4
$LL4@OnUpdateCo:

; 1446 : 	{
; 1447 : 		CSpeedTreeRT::ECollisionObjectType ObjectType;
; 1448 : 		CStaticCollisionData CollisionData;
; 1449 : 
; 1450 : 		GetCollisionObject(i, ObjectType, (float * )&CollisionData.v3Position, CollisionData.fDimensions);

  00060	8d 45 e0	 lea	 eax, DWORD PTR _CollisionData$2[ebp+52]
  00063	8b cf		 mov	 ecx, edi
  00065	50		 push	 eax
  00066	8d 45 d4	 lea	 eax, DWORD PTR _CollisionData$2[ebp+40]
  00069	50		 push	 eax
  0006a	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _ObjectType$1[ebp]
  00070	50		 push	 eax
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject

; 1451 : 
; 1452 : 		if (ObjectType == CSpeedTreeRT::CO_BOX)

  00077	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _ObjectType$1[ebp]
  0007d	83 f8 02	 cmp	 eax, 2
  00080	74 2c		 je	 SHORT $LN2@OnUpdateCo

; 1453 : 			continue;
; 1454 : 
; 1455 : 		switch(ObjectType)

  00082	83 e8 00	 sub	 eax, 0
  00085	74 0e		 je	 SHORT $LN8@OnUpdateCo
  00087	83 e8 01	 sub	 eax, 1
  0008a	75 10		 jne	 SHORT $LN5@OnUpdateCo

; 1459 : 			CollisionData.fDimensions[0] = CollisionData.fDimensions[0] /** fSizeRatio*/;
; 1460 : 			//AddCollision(&CollisionData);
; 1461 : 			break;
; 1462 : 
; 1463 : 		case CSpeedTreeRT::CO_CYLINDER:
; 1464 : 			CollisionData.dwType = COLLISION_TYPE_CYLINDER;

  0008c	c7 45 ac 03 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 3

; 1465 : 			CollisionData.fDimensions[0] = CollisionData.fDimensions[0] /** fSizeRatio*/;
; 1466 : 			CollisionData.fDimensions[1] = CollisionData.fDimensions[1] /** fSizeRatio*/;

  00093	eb 07		 jmp	 SHORT $LN5@OnUpdateCo
$LN8@OnUpdateCo:

; 1456 : 		{
; 1457 : 		case CSpeedTreeRT::CO_SPHERE:
; 1458 : 			CollisionData.dwType = COLLISION_TYPE_SPHERE;

  00095	c7 45 ac 02 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 2
$LN5@OnUpdateCo:

; 1467 : 			//AddCollision(&CollisionData);
; 1468 : 			break;
; 1469 : 
; 1470 : 			/*case CSpeedTreeRT::CO_BOX:
; 1471 : 			break;*/
; 1472 : 		}
; 1473 : 		AddCollision(&CollisionData, &mat);

  0009c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  000a2	8b cf		 mov	 ecx, edi
  000a4	50		 push	 eax
  000a5	8d 45 ac	 lea	 eax, DWORD PTR _CollisionData$2[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
$LN2@OnUpdateCo:

; 1443 : 
; 1444 : 	/////
; 1445 : 	for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  000ae	8b cf		 mov	 ecx, edi
  000b0	46		 inc	 esi
  000b1	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  000b6	3b f0		 cmp	 esi, eax
  000b8	72 a6		 jb	 SHORT $LL4@OnUpdateCo
$LN3@OnUpdateCo:

; 1474 : 	}
; 1475 : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	5f		 pop	 edi
  000be	33 cd		 xor	 ecx, ebp
  000c0	5e		 pop	 esi
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?GetType@CSpeedTreeWrapper@@EBEHXZ
_TEXT	SEGMENT
?GetType@CSpeedTreeWrapper@@EBEHXZ PROC			; CSpeedTreeWrapper::GetType, COMDAT
; _this$ = ecx

; 71   : 	int GetType() const { return ID; }

  00000	b8 a6 f7 c9 8a	 mov	 eax, -1966475354	; 8ac9f7a6H
  00005	c3		 ret	 0
?GetType@CSpeedTreeWrapper@@EBEHXZ ENDP			; CSpeedTreeWrapper::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 104  : 		virtual void			OnDeform(){}

  00000	c2 00 00	 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 103  : 		virtual void			OnUpdate(){}

  00000	c2 00 00	 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 102  : 		virtual void			OnClear(){}

  00000	c2 00 00	 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_size$1$ = -16					; size = 4
__New_ptr$1 = -12					; size = 4
tv448 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv452 = 12						; size = 4
tv449 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f0	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 d6 00 00
	00		 jb	 $LN45@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN19@append

; 4203 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN42@append
$LN19@append:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv452[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv452[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN20@append

; 4207 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN42@append
$LN20@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv452[ebp]
  00090	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN42@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv449[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c1	89 4d f8	 mov	 DWORD PTR tv448[ebp], ecx
  000c4	72 3c		 jb	 SHORT $LN13@append

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c6	ff 75 f0	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000e7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f2	83 c4 20	 add	 esp, 32			; 00000020H

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	89 07		 mov	 DWORD PTR [edi], eax

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN13@append:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00102	56		 push	 esi
  00103	57		 push	 edi
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	53		 push	 ebx
  0010b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0010e	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  00111	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00116	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  00119	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011c	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0011f	50		 push	 eax
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00126	83 c4 20	 add	 esp, 32			; 00000020H
  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN45@append:

; 4250 :             _Xlen_string(); // result too long

  00134	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@append:
  00139	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -12					; size = 4
__Fancyptr$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__New_capacity$1$ = 16					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2469 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00011	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00018	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2470 :         auto& _My_data    = _Mypair._Myval2;
; 2471 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2472 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2473 :         _Left_data._Orphan_all();
; 2474 :         _Right_data._Orphan_all();
; 2475 :         const auto _Left_size  = _Left_data._Mysize;

  0001f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2476 :         const auto _Right_size = _Right_data._Mysize;

  00022	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00025	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  00028	89 55 f4	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2477 : 
; 2478 :         const auto _Left_capacity  = _Left_data._Myres;
; 2479 :         const auto _Right_capacity = _Right_data._Myres;
; 2480 :         // overflow is OK due to max_size() checks:
; 2481 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  0002b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0002e	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2482 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	2b c1		 sub	 eax, ecx
  00036	3b d0		 cmp	 edx, eax

; 2483 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  00038	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003b	77 5a		 ja	 SHORT $LN2@basic_stri
  0003d	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00040	77 55		 ja	 SHORT $LN2@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00042	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00045	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  00048	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0004d	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00052	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00059	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00060	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2135 :         value_type* _Result = _Bx._Buf;

  00063	8b f3		 mov	 esi, ebx

; 2153 :         return _BUF_SIZE <= _Myres;

  00065	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN17@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN17@basic_stri:

; 2153 :         return _BUF_SIZE <= _Myres;

  0006d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00071	72 02		 jb	 SHORT $LN22@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00073	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN22@basic_stri:

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00075	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00078	50		 push	 eax

; 2484 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2485 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2486 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});
; 2487 :             const auto _Ptr = _My_data._Myptr();
; 2488 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00079	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007c	57		 push	 edi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memcpy

; 2489 :             _My_data._Mysize = _New_size;

  00083	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0008c	8b c3		 mov	 eax, ebx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
$LN2@basic_stri:

; 2490 :             return;
; 2491 :         }
; 2492 : 
; 2493 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  00097	2b c2		 sub	 eax, edx
  00099	3b c8		 cmp	 ecx, eax

; 2494 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  0009b	77 5a		 ja	 SHORT $LN3@basic_stri

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000a3	50		 push	 eax

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a4	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000a7	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000ac	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000b1	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b8	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bf	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2495 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2496 :             // At this point, we have tested:
; 2497 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2498 :             // therefore: (by De Morgan's Laws)
; 2499 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2500 :             // therefore: (by the distributive property)
; 2501 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2502 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2503 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2504 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2505 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2506 :             _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2507 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c2	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c4	57		 push	 edi

; 2508 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000c5	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _memmove
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  000d1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  000d5	72 02		 jb	 SHORT $LN37@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  000d7	8b 36		 mov	 esi, DWORD PTR [esi]
$LN37@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000d9	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  000dc	56		 push	 esi
  000dd	57		 push	 edi
  000de	e8 00 00 00 00	 call	 _memcpy

; 2509 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2510 :             _My_data._Mysize = _New_size;

  000e3	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2531 :         _Proxy._Release();
; 2532 :     }

  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000ec	8b c3		 mov	 eax, ebx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
$LN3@basic_stri:

; 2511 :             return;
; 2512 :         }
; 2513 : 
; 2514 :         // can't use either buffer, reallocate
; 2515 :         const auto _Max = max_size();
; 2516 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000f7	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000fc	2b c1		 sub	 eax, ecx
  000fe	3b c2		 cmp	 eax, edx
  00100	0f 82 83 00 00
	00		 jb	 $LN70@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00106	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00109	83 c8 0f	 or	 eax, 15			; 0000000fH
  0010c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00111	76 07		 jbe	 SHORT $LN44@basic_stri

; 4203 :             return _Max;

  00113	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00118	eb 0a		 jmp	 SHORT $LN68@basic_stri
$LN44@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0011a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0011f	3b c1		 cmp	 eax, ecx
  00121	0f 42 c1	 cmovb	 eax, ecx
$LN68@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00124	89 45 10	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
  00127	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2523 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0012e	89 45 f8	 mov	 DWORD PTR __Fancyptr$[ebp], eax

; 2524 :         // nothrow hereafter
; 2525 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00131	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$[ebp]
  00134	50		 push	 eax
  00135	53		 push	 ebx
  00136	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2526 :         _My_data._Mysize = _New_size;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2527 :         _My_data._Myres  = _New_capacity;

  00141	8b 4d 10	 mov	 ecx, DWORD PTR __New_capacity$1$[ebp]
  00144	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00147	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0014a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0014e	72 02		 jb	 SHORT $LN52@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00150	8b 36		 mov	 esi, DWORD PTR [esi]
$LN52@basic_stri:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00152	ff 75 fc	 push	 DWORD PTR __Left_size$1$[ebp]
  00155	56		 push	 esi
  00156	8b 75 f8	 mov	 esi, DWORD PTR __Fancyptr$[ebp]
  00159	56		 push	 esi
  0015a	e8 00 00 00 00	 call	 _memcpy
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 :         return _BUF_SIZE <= _Myres;

  00162	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00166	72 02		 jb	 SHORT $LN59@basic_stri

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00168	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN59@basic_stri:

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016a	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0016d	40		 inc	 eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0016e	50		 push	 eax

; 2528 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2529 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2530 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0016f	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00172	03 c6		 add	 eax, esi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _memcpy

; 2531 :         _Proxy._Release();
; 2532 :     }

  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	8b c3		 mov	 eax, ebx
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 0c 00	 ret	 12			; 0000000cH
$LN70@basic_stri:

; 2517 :             _Xlen_string();

  00189	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@basic_stri:
  0018e	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);
; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 840  :         __crt_va_end(_ArgList);
; 841  :         return _Result;
; 842  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ?Set@CSpeedTreeMaterial@@QAEXPBM@Z
_TEXT	SEGMENT
_pMaterialArray$ = 8					; size = 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z PROC			; CSpeedTreeMaterial::Set, COMDAT
; _this$ = ecx

; 56   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 			memcpy(&m_cMaterial.Diffuse, pMaterialArray, 3 * sizeof(float));

  00003	8b 55 08	 mov	 edx, DWORD PTR _pMaterialArray$[ebp]
  00006	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0000a	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0000e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 58   : 			m_cMaterial.Diffuse.a = 1.0f;

  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H

; 59   : 
; 60   : 			memcpy(&m_cMaterial.Ambient, pMaterialArray + 3, 3 * sizeof(float));

  0001b	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  00020	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 61   : 			m_cMaterial.Ambient.a = 1.0f;

  0002b	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H

; 62   : 
; 63   : 			memcpy(&m_cMaterial.Specular, pMaterialArray + 6, 3 * sizeof(float));

  00032	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
  00037	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0003c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003f	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 64   : 			m_cMaterial.Specular.a = 1.0f;

  00042	c7 41 2c 00 00
	80 3f		 mov	 DWORD PTR [ecx+44], 1065353216 ; 3f800000H

; 65   : 
; 66   : 			memcpy(&m_cMaterial.Emissive, pMaterialArray + 9, 3 * sizeof(float));

  00049	f3 0f 7e 42 24	 movq	 xmm0, QWORD PTR [edx+36]
  0004e	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00053	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00056	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 67   : 			m_cMaterial.Emissive.a = 1.0f;

  00059	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 68   : 
; 69   : 			m_cMaterial.Power = pMaterialArray[12];

  00060	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00063	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 70   : 		}

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z ENDP			; CSpeedTreeMaterial::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ??0CSpeedTreeMaterial@@QAE@XZ
_TEXT	SEGMENT
??0CSpeedTreeMaterial@@QAE@XZ PROC			; CSpeedTreeMaterial::CSpeedTreeMaterial, COMDAT
; _this$ = ecx

; 47   : 		{
; 48   : 			m_cMaterial.Ambient.r = m_cMaterial.Diffuse.r = m_cMaterial.Specular.r = m_cMaterial.Emissive.r = 1.0f;

  00000	c7 41 30 00 00
	80 3f		 mov	 DWORD PTR [ecx+48], 1065353216 ; 3f800000H

; 49   : 			m_cMaterial.Ambient.g = m_cMaterial.Diffuse.g = m_cMaterial.Specular.g = m_cMaterial.Emissive.g = 1.0f;
; 50   : 			m_cMaterial.Ambient.b = m_cMaterial.Diffuse.b = m_cMaterial.Specular.b = m_cMaterial.Emissive.b = 1.0f;
; 51   : 			m_cMaterial.Ambient.a = m_cMaterial.Diffuse.a = m_cMaterial.Specular.a = m_cMaterial.Emissive.a = 1.0f;
; 52   : 			m_cMaterial.Power = 5.0f;
; 53   : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 20 00 00
	80 3f		 mov	 DWORD PTR [ecx+32], 1065353216 ; 3f800000H
  00010	c7 01 00 00 80
	3f		 mov	 DWORD PTR [ecx], 1065353216 ; 3f800000H
  00016	c7 41 10 00 00
	80 3f		 mov	 DWORD PTR [ecx+16], 1065353216 ; 3f800000H
  0001d	c7 41 34 00 00
	80 3f		 mov	 DWORD PTR [ecx+52], 1065353216 ; 3f800000H
  00024	c7 41 24 00 00
	80 3f		 mov	 DWORD PTR [ecx+36], 1065353216 ; 3f800000H
  0002b	c7 41 04 00 00
	80 3f		 mov	 DWORD PTR [ecx+4], 1065353216 ; 3f800000H
  00032	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [ecx+20], 1065353216 ; 3f800000H
  00039	c7 41 38 00 00
	80 3f		 mov	 DWORD PTR [ecx+56], 1065353216 ; 3f800000H
  00040	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [ecx+40], 1065353216 ; 3f800000H
  00047	c7 41 08 00 00
	80 3f		 mov	 DWORD PTR [ecx+8], 1065353216 ; 3f800000H
  0004e	c7 41 18 00 00
	80 3f		 mov	 DWORD PTR [ecx+24], 1065353216 ; 3f800000H
  00055	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H
  0005c	c7 41 2c 00 00
	80 3f		 mov	 DWORD PTR [ecx+44], 1065353216 ; 3f800000H
  00063	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0006a	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H
  00071	c7 41 40 00 00
	a0 40		 mov	 DWORD PTR [ecx+64], 1084227584 ; 40a00000H
  00078	c3		 ret	 0
??0CSpeedTreeMaterial@@QAE@XZ ENDP			; CSpeedTreeMaterial::CSpeedTreeMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
