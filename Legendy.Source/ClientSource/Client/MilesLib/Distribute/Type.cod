; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ; NSound::LoadSoundInformationPiece
PUBLIC	?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; NSound::SaveSoundInformationPiece
PUBLIC	?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ; NSound::DataToInstance
PUBLIC	?GetResultString@NSound@@YAPBDXZ		; NSound::GetResultString
PUBLIC	?SetResultString@NSound@@YAXPBD@Z		; NSound::SetResultString
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
PUBLIC	?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
PUBLIC	?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
PUBLIC	??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
PUBLIC	??$_Uninitialized_move@PAUSSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_move<NSound::SSoundInstance *,std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Uninitialized_move@PAUSSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_move<NSound::SSoundData *,std::allocator<NSound::SSoundData> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
PUBLIC	??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ ; `string'
PUBLIC	??_C@_0P@DFMHJMOB@sounddatacount@		; `string'
PUBLIC	??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ ; `string'
PUBLIC	??_C@_0O@OOLLGPNP@sounddata?$CF02d@		; `string'
PUBLIC	??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@		; `string'
PUBLIC	??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@	; `string'
PUBLIC	??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ ; `string'
PUBLIC	??_C@_07EGDJHJID@?5Loaded@			; `string'
PUBLIC	??_C@_02BKFDOEMK@wt@				; `string'
PUBLIC	??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error@				; `string'
PUBLIC	??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ ; `string'
PUBLIC	??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c888889
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__unlink:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?IsFile@@YA_NPBD@Z:PROC				; IsFile
EXTRN	?LogBox@@YAXPBD0PAUHWND__@@@Z:PROC		; LogBox
EXTRN	?Cache@CTextFileLoader@@SAPAV1@PBD@Z:PROC	; CTextFileLoader::Cache
EXTRN	?IsEmpty@CTextFileLoader@@QAE_NXZ:PROC		; CTextFileLoader::IsEmpty
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenInteger
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
CRT$XCU	SEGMENT
?strResult$initializer$@NSound@@3P6AXXZA DD FLAT:??__EstrResult@NSound@@YAXXZ ; NSound::strResult$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3c888889
CONST	SEGMENT
__real@3c888889 DD 03c888889r			; 0.0166667
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ DB 'S'
	DB	'oundData%02d       %f "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ DB 'SoundDataCount    %'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
CONST	SEGMENT
??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ DB 'ScriptTyp'
	DB	'e        CharacterSoundInformation', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
CONST	SEGMENT
??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ DB ' Cannot open f'
	DB	'ile for writing', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error@
CONST	SEGMENT
??_C@_05NAOIJFC@Error@ DB 'Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
CONST	SEGMENT
??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ DB 'Fa'
	DB	'iled to save file (%s).', 0aH, 'Please check if it is read-on'
	DB	'ly or you have no space on the disk.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt@ DB 'wt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGDJHJID@?5Loaded@
CONST	SEGMENT
??_C@_07EGDJHJID@?5Loaded@ DB ' Loaded', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
CONST	SEGMENT
??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ DB ' File form'
	DB	'at error: The size of the vector is not 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
CONST	SEGMENT
??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@ DB ' File format error: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
CONST	SEGMENT
??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@ DB ' Unable to find', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
CONST	SEGMENT
??_C@_0O@OOLLGPNP@sounddata?$CF02d@ DB 'sounddata%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
CONST	SEGMENT
??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ DB ' File format'
	DB	' error, SoundDataCount Unable to find.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFMHJMOB@sounddatacount@
CONST	SEGMENT
??_C@_0P@DFMHJMOB@sounddatacount@ DB 'sounddatacount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
CONST	SEGMENT
??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ DB ' Can not ope'
	DB	'n file for reading', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; NSound::strResult
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1
__ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Uninitialized_move<NSound::SSoundData *,std::allocator<NSound::SSoundData> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b c3		 cmp	 eax, ebx
  00010	74 58		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00012	57		 push	 edi
  00013	8b fe		 mov	 edi, esi
  00015	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  00018	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001b	2b f8		 sub	 edi, eax
  0001d	0f 1f 00	 npad	 3
$LL4@Uninitiali:
  00020	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 1509 :         ++_Last;

  00023	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0002b	c7 42 e0 00 00
	00 00		 mov	 DWORD PTR [edx-32], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00032	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00035	c7 42 e4 00 00
	00 00		 mov	 DWORD PTR [edx-28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003c	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0003f	0f 10 41 e4	 movups	 xmm0, XMMWORD PTR [ecx-28]
  00043	0f 11 44 0f e4	 movups	 XMMWORD PTR [edi+ecx-28], xmm0
  00048	f3 0f 7e 41 f4	 movq	 xmm0, QWORD PTR [ecx-12]
  0004d	66 0f d6 44 0f
	f4		 movq	 QWORD PTR [edi+ecx-12], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00053	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005a	c7 41 f8 0f 00
	00 00		 mov	 DWORD PTR [ecx-8], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00061	c6 41 e4 00	 mov	 BYTE PTR [ecx-28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00065	3b c3		 cmp	 eax, ebx
  00067	75 b7		 jne	 SHORT $LL4@Uninitiali
  00069	5f		 pop	 edi
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0006a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0006d	56		 push	 esi
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00077	8b c6		 mov	 eax, esi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx

; 1664 :     }
; 1665 : }

  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
??$_Uninitialized_move@PAUSSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Uninitialized_move<NSound::SSoundData *,std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Uninitialized_move<NSound::SSoundInstance *,std::allocator<NSound::SSoundInstance> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  0000a	57		 push	 edi

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b cf		 cmp	 ecx, edi
  00010	74 58		 je	 SHORT $LN3@Uninitiali

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00012	53		 push	 ebx
  00013	8b de		 mov	 ebx, esi
  00015	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  00018	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001b	2b d9		 sub	 ebx, ecx
  0001d	0f 1f 00	 npad	 3
$LL4@Uninitiali:
  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 1509 :         ++_Last;

  00023	8d 40 1c	 lea	 eax, DWORD PTR [eax+28]
  00026	89 0e		 mov	 DWORD PTR [esi], ecx
  00028	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0002b	c7 42 e0 00 00
	00 00		 mov	 DWORD PTR [edx-32], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00032	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00035	c7 42 e4 00 00
	00 00		 mov	 DWORD PTR [edx-28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1509 :         ++_Last;

  0003c	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0003f	0f 10 40 e4	 movups	 xmm0, XMMWORD PTR [eax-28]
  00043	0f 11 44 03 e4	 movups	 XMMWORD PTR [ebx+eax-28], xmm0
  00048	f3 0f 7e 40 f4	 movq	 xmm0, QWORD PTR [eax-12]
  0004d	66 0f d6 44 03
	f4		 movq	 QWORD PTR [ebx+eax-12], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00053	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005a	c7 40 f8 0f 00
	00 00		 mov	 DWORD PTR [eax-8], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00061	c6 40 e4 00	 mov	 BYTE PTR [eax-28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00065	3b cf		 cmp	 ecx, edi
  00067	75 b7		 jne	 SHORT $LL4@Uninitiali
  00069	5b		 pop	 ebx
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0006a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0006d	56		 push	 esi
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();

  00077	8b c6		 mov	 eax, esi
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 1664 :     }
; 1665 : }

  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
??$_Uninitialized_move@PAUSSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Uninitialized_move<NSound::SSoundInstance *,std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 :         for (; 0 < _Count; --_Count) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1833 :         for (; 0 < _Count; --_Count) {

  0000a	85 c9		 test	 ecx, ecx
  0000c	74 32		 je	 SHORT $LN3@Uninitiali
  0000e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
$LL4@Uninitiali:
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 1509 :         ++_Last;

  00014	8d 40 1c	 lea	 eax, DWORD PTR [eax+28]

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00017	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0001a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  0001f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1509 :         ++_Last;

  00026	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00029	c7 40 e0 00 00
	00 00		 mov	 DWORD PTR [eax-32], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00030	c7 40 e4 0f 00
	00 00		 mov	 DWORD PTR [eax-28], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00037	c6 40 d0 00	 mov	 BYTE PTR [eax-48], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1833 :         for (; 0 < _Count; --_Count) {

  0003b	83 e9 01	 sub	 ecx, 1
  0003e	75 d1		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00040	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  00043	56		 push	 esi
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi

; 1838 :     }
; 1839 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >, COMDAT

; 1824 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 :         for (; 0 < _Count; --_Count) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1833 :         for (; 0 < _Count; --_Count) {

  0000a	85 c9		 test	 ecx, ecx
  0000c	74 32		 je	 SHORT $LN3@Uninitiali
  0000e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
$LL4@Uninitiali:
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 1509 :         ++_Last;

  00014	8d 40 1c	 lea	 eax, DWORD PTR [eax+28]

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00017	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0001a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  0001f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1509 :         ++_Last;

  00026	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00029	c7 40 e0 00 00
	00 00		 mov	 DWORD PTR [eax-32], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00030	c7 40 e4 0f 00
	00 00		 mov	 DWORD PTR [eax-28], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00037	c6 40 d0 00	 mov	 BYTE PTR [eax-48], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1833 :         for (; 0 < _Count; --_Count) {

  0003b	83 e9 01	 sub	 ecx, 1
  0003e	75 d1		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1503 :         _Destroy_range(_First, _Last, _Al);

  00040	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  00043	56		 push	 esi
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1834 :             _Backout._Emplace_back();
; 1835 :         }
; 1836 : 
; 1837 :         return _Backout._Release();

  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi

; 1838 :     }
; 1839 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv299 = -8						; size = 4
__Newvec$1$ = -4					; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1183 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00014	0f 87 01 01 00
	00		 ja	 $LN38@Resize_rea

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00022	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00024	f7 e9		 imul	 ecx
  00026	03 d1		 add	 edx, ecx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002b	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002d	c1 fa 04	 sar	 edx, 4
  00030	8b c2		 mov	 eax, edx
  00032	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00035	03 c2		 add	 eax, edx
  00037	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003f	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00041	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	03 d1		 add	 edx, ecx
  00048	c1 fa 04	 sar	 edx, 4
  0004b	8b ca		 mov	 ecx, edx
  0004d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00050	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00052	8b d1		 mov	 edx, ecx
  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx
  00058	3b c8		 cmp	 ecx, eax
  0005a	77 14		 ja	 SHORT $LN36@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005c	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0005f	3b c3		 cmp	 eax, ebx
  00061	72 0d		 jb	 SHORT $LN36@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00063	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  00068	0f 87 b2 00 00
	00		 ja	 $LN39@Resize_rea
  0006e	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN36@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
  00072	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00079	2b c8		 sub	 ecx, eax
  0007b	c1 e1 02	 shl	 ecx, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007e	51		 push	 ecx

; 65   :     return _Count * _Ty_size;

  0007f	89 4d f8	 mov	 DWORD PTR tv299[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00082	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008a	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0008c	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008e	89 75 fc	 mov	 DWORD PTR __Newvec$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00091	2b c1		 sub	 eax, ecx

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00093	57		 push	 edi
  00094	50		 push	 eax

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00095	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0009c	2b c1		 sub	 eax, ecx
  0009e	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a7	57		 push	 edi
  000a8	56		 push	 esi
  000a9	ff 77 04	 push	 DWORD PTR [edi+4]
  000ac	ff 37		 push	 DWORD PTR [edi]
  000ae	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_move<NSound::SSoundData *,std::allocator<NSound::SSoundData> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000b5	83 c4 20	 add	 esp, 32			; 00000020H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b8	85 c9		 test	 ecx, ecx
  000ba	74 3d		 je	 SHORT $LN29@Resize_rea

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000bc	57		 push	 edi
  000bd	ff 77 04	 push	 DWORD PTR [edi+4]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c6	8b 37		 mov	 esi, DWORD PTR [edi]
  000c8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000cd	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000d0	2b ce		 sub	 ecx, esi
  000d2	f7 e9		 imul	 ecx
  000d4	03 d1		 add	 edx, ecx
  000d6	c1 fa 04	 sar	 edx, 4
  000d9	8b ca		 mov	 ecx, edx
  000db	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000de	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000e7	2b c1		 sub	 eax, ecx
  000e9	c1 e0 02	 shl	 eax, 2
  000ec	50		 push	 eax
  000ed	56		 push	 esi
  000ee	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000f3	8b 75 fc	 mov	 esi, DWORD PTR __Newvec$1$[ebp]
  000f6	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000f9	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  00100	89 37		 mov	 DWORD PTR [edi], esi
  00102	2b c3		 sub	 eax, ebx
  00104	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00107	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR tv299[ebp]
  0010d	03 c6		 add	 eax, esi
  0010f	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 1208 :     }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
$LN38@Resize_rea:

; 1184 :             _Xlength();

  0011b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
$LN39@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00120	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Resize_rea:
  00125	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv299 = -8						; size = 4
__Newvec$1$ = -4					; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1183 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00014	0f 87 01 01 00
	00		 ja	 $LN38@Resize_rea

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00022	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00024	f7 e9		 imul	 ecx
  00026	03 d1		 add	 edx, ecx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002b	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;
; 1188 :         pointer& _Myfirst = _My_data._Myfirst;
; 1189 :         pointer& _Mylast  = _My_data._Mylast;
; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002d	c1 fa 04	 sar	 edx, 4
  00030	8b c2		 mov	 eax, edx
  00032	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00035	03 c2		 add	 eax, edx
  00037	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003f	f7 e9		 imul	 ecx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00041	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	03 d1		 add	 edx, ecx
  00048	c1 fa 04	 sar	 edx, 4
  0004b	8b ca		 mov	 ecx, edx
  0004d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00050	03 ca		 add	 ecx, edx

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00052	8b d1		 mov	 edx, ecx
  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx
  00058	3b c8		 cmp	 ecx, eax
  0005a	77 14		 ja	 SHORT $LN36@Resize_rea

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005c	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0005f	3b c3		 cmp	 eax, ebx
  00061	72 0d		 jb	 SHORT $LN36@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00063	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  00068	0f 87 b2 00 00
	00		 ja	 $LN39@Resize_rea
  0006e	eb 02		 jmp	 SHORT $LN18@Resize_rea
$LN36@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
  00072	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00079	2b c8		 sub	 ecx, eax
  0007b	c1 e1 02	 shl	 ecx, 2

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007e	51		 push	 ecx

; 65   :     return _Count * _Ty_size;

  0007f	89 4d f8	 mov	 DWORD PTR tv299[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00082	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008a	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0008c	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008e	89 75 fc	 mov	 DWORD PTR __Newvec$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00091	2b c1		 sub	 eax, ecx

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00093	57		 push	 edi
  00094	50		 push	 eax

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1193 : 
; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00095	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0009c	2b c1		 sub	 eax, ecx
  0009e	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a7	57		 push	 edi
  000a8	56		 push	 esi
  000a9	ff 77 04	 push	 DWORD PTR [edi+4]
  000ac	ff 37		 push	 DWORD PTR [edi]
  000ae	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@QAU12@0PAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_move<NSound::SSoundInstance *,std::allocator<NSound::SSoundInstance> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000b5	83 c4 20	 add	 esp, 32			; 00000020H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b8	85 c9		 test	 ecx, ecx
  000ba	74 3d		 je	 SHORT $LN29@Resize_rea

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  000bc	57		 push	 edi
  000bd	ff 77 04	 push	 DWORD PTR [edi+4]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c6	8b 37		 mov	 esi, DWORD PTR [edi]
  000c8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000cd	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000d0	2b ce		 sub	 ecx, esi
  000d2	f7 e9		 imul	 ecx
  000d4	03 d1		 add	 edx, ecx
  000d6	c1 fa 04	 sar	 edx, 4
  000d9	8b ca		 mov	 ecx, edx
  000db	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000de	03 ca		 add	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000e7	2b c1		 sub	 eax, ecx
  000e9	c1 e0 02	 shl	 eax, 2
  000ec	50		 push	 eax
  000ed	56		 push	 esi
  000ee	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000f3	8b 75 fc	 mov	 esi, DWORD PTR __Newvec$1$[ebp]
  000f6	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000f9	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  00100	89 37		 mov	 DWORD PTR [edi], esi
  00102	2b c3		 sub	 eax, ebx
  00104	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00107	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR tv299[ebp]
  0010d	03 c6		 add	 eax, esi
  0010f	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 1208 :     }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
$LN38@Resize_rea:

; 1184 :             _Xlength();

  0011b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
$LN39@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00120	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Resize_rea:
  00125	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundData> >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 32		 je	 SHORT $LN3@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00017	72 0d		 jb	 SHORT $LN18@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00019	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	50		 push	 eax
  0001b	ff 76 ec	 push	 DWORD PTR [esi-20]
  0001e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00023	83 c4 08	 add	 esp, 8
$LN18@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00026	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002d	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00033	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00037	83 c6 1c	 add	 esi, 28			; 0000001cH
  0003a	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  0003d	3b c7		 cmp	 eax, edi
  0003f	75 d1		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00041	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 959  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 32		 je	 SHORT $LN3@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00017	72 0d		 jb	 SHORT $LN18@Destroy_ra

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00019	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	50		 push	 eax
  0001b	ff 76 ec	 push	 DWORD PTR [esi-20]
  0001e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00023	83 c4 08	 add	 esp, 8
$LN18@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00026	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002d	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00033	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 959  :         for (; _First != _Last; ++_First) {

  00037	83 c6 1c	 add	 esi, 28			; 0000001cH
  0003a	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  0003d	3b c7		 cmp	 eax, edi
  0003f	75 d1		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00041	5f		 pop	 edi

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange, COMDAT

; 1708 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b c2		 mov	 eax, edx

; 4457 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00008	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL22@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL22@operator

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b c6		 sub	 eax, esi

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	50		 push	 eax
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 4458 :     return _STD move(_Left.append(_Right));

  00026	5e		 pop	 esi

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00027	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00045	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004c	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00053	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4458 :     return _STD move(_Left.append(_Right));

  00056	8b c1		 mov	 eax, ecx

; 4459 : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
_TEXT	SEGMENT
__Left_size$1$ = -12					; size = 4
__Fancyptr$1 = -8					; size = 4
__New_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$1$ = 12						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4396 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 4397 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4398 :     const auto _Left_size  = _Left.size();

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Left$[ebp]
  0000a	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 4396 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  0000e	57		 push	 edi

; 4397 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4398 :     const auto _Left_size  = _Left.size();

  0000f	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00012	89 4d f4	 mov	 DWORD PTR __Left_size$1$[ebp], ecx

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00015	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL34@operator:
  00018	8a 06		 mov	 al, BYTE PTR [esi]
  0001a	46		 inc	 esi
  0001b	84 c0		 test	 al, al
  0001d	75 f9		 jne	 SHORT $LL34@operator

; 4399 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 4400 :     if (_Left.max_size() - _Left_size < _Right_size) {

  0001f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00024	2b f2		 sub	 esi, edx

; 4399 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 4400 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00026	2b c1		 sub	 eax, ecx
  00028	3b c6		 cmp	 eax, esi
  0002a	0f 82 a1 00 00
	00		 jb	 $LN37@operator

; 2153 :         return _BUF_SIZE <= _Myres;

  00030	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00034	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@operator:

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2447 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  0003b	03 ce		 add	 ecx, esi

; 2448 :         size_type _New_capacity = _BUF_SIZE - 1;

  0003d	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00042	89 4d fc	 mov	 DWORD PTR __New_size$1$[ebp], ecx

; 2449 :         auto& _My_data          = _Mypair._Myval2;
; 2450 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00045	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0004f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2453 :         if (_New_capacity < _New_size) {

  00056	3b cf		 cmp	 ecx, edi
  00058	76 42		 jbe	 SHORT $LN16@operator

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005a	8b f9		 mov	 edi, ecx
  0005c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00065	76 07		 jbe	 SHORT $LN23@operator

; 4203 :             return _Max;

  00067	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0006c	eb 0a		 jmp	 SHORT $LN22@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0006e	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00073	3b f8		 cmp	 edi, eax
  00075	0f 42 f8	 cmovb	 edi, eax
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00078	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00081	89 45 0c	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00084	89 45 f8	 mov	 DWORD PTR __Fancyptr$1[ebp], eax

; 2456 :             _Ptr                    = _Unfancy(_Fancyptr);
; 2457 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00087	8d 45 f8	 lea	 eax, DWORD PTR __Fancyptr$1[ebp]
  0008a	50		 push	 eax
  0008b	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00093	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
$LN16@operator:

; 2461 :         _My_data._Myres  = _New_capacity;

  0009c	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009f	8b 7d f4	 mov	 edi, DWORD PTR __Left_size$1$[ebp]
  000a2	57		 push	 edi
  000a3	53		 push	 ebx
  000a4	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
  000a7	53		 push	 ebx

; 2460 :         _My_data._Mysize = _New_size;

  000a8	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	56		 push	 esi
  000b1	ff 75 10	 push	 DWORD PTR __Right$[ebp]

; 2463 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000b4	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _memcpy

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000bd	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c0	83 c4 18	 add	 esp, 24			; 00000018H

; 4402 :     }
; 4403 : 
; 4404 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000c3	5f		 pop	 edi

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000c4	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 4402 :     }
; 4403 : 
; 4404 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000c8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 4405 : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN37@operator:

; 4401 :         _Xlen_string();

  000d1	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN35@operator:
  000d6	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??__FstrResult@NSound@@YAXXZ
text$yd	SEGMENT
??__FstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic atexit destructor for 'strResult'', COMDAT

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00007	72 22		 jb	 SHORT $LN7@dynamic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00010	68 00 00 00 00	 push	 OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
  00015	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>

; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  0001f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	5e		 pop	 esi
$LN7@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0002b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00035	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00046	c3		 ret	 0
??__FstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic atexit destructor for 'strResult''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ??__EstrResult@NSound@@YAXXZ
text$di	SEGMENT
??__EstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic initializer for 'strResult'', COMDAT

; 5    : std::string NSound::strResult;

  00000	68 00 00 00 00	 push	 OFFSET ??__FstrResult@NSound@@YAXXZ ; NSound::`dynamic atexit destructor for 'strResult''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic initializer for 'strResult''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 1708 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ?SetResultString@NSound@@YAXPBD@Z
_TEXT	SEGMENT
_c_pszStr$ = 8						; size = 4
?SetResultString@NSound@@YAXPBD@Z PROC			; NSound::SetResultString, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszStr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 13   : {

  00008	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL7@SetResultS:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@SetResultS
  00017	2b c6		 sub	 eax, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
  0001e	50		 push	 eax
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00025	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 15   : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?SetResultString@NSound@@YAXPBD@Z ENDP			; NSound::SetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ?GetResultString@NSound@@YAPBDXZ
_TEXT	SEGMENT
?GetResultString@NSound@@YAPBDXZ PROC			; NSound::GetResultString, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult

; 2145 :         if (_Large_string_engaged()) {

  0000c	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 10   : }

  00013	c3		 ret	 0
?GetResultString@NSound@@YAPBDXZ ENDP			; NSound::GetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z
_TEXT	SEGMENT
tv513 = -4						; size = 4
__Oldlast$1$ = 8					; size = 4
_i$1$ = 8						; size = 4
_c_rSoundDataVector$ = 8				; size = 4
$T1 = 11						; size = 1
_pSoundInstanceVector$ = 12				; size = 4
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z PROC ; NSound::DataToInstance, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _c_rSoundDataVector$[ebp]
  00008	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000a	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 120  : 	if (c_rSoundDataVector.empty())

  0000d	0f 84 26 01 00
	00		 je	 $LN3@DataToInst
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _pSoundInstanceVector$[ebp]
  00017	57		 push	 edi
  00018	56		 push	 esi
  00019	ff 76 04	 push	 DWORD PTR [esi+4]
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1390 :         _Mylast = _Myfirst;

  00023	8b 06		 mov	 eax, DWORD PTR [esi]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  00028	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0002e	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1390 :         _Mylast = _Myfirst;

  00030	89 45 08	 mov	 DWORD PTR __Oldlast$1$[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00033	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00038	f7 e9		 imul	 ecx
  0003a	03 d1		 add	 edx, ecx
  0003c	c1 fa 04	 sar	 edx, 4
  0003f	8b fa		 mov	 edi, edx
  00041	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00044	03 fa		 add	 edi, edx

; 1224 :         if (_Newsize > _Oldsize) { // append

  00046	74 3b		 je	 SHORT $LN19@DataToInst

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00048	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00050	2b 4d 08	 sub	 ecx, DWORD PTR __Oldlast$1$[ebp]
  00053	f7 e9		 imul	 ecx
  00055	03 d1		 add	 edx, ecx
  00057	c1 fa 04	 sar	 edx, 4
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  00061	3b f8		 cmp	 edi, eax
  00063	76 0e		 jbe	 SHORT $LN20@DataToInst

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  00065	8d 45 0b	 lea	 eax, DWORD PTR $T1[ebp]
  00068	8b ce		 mov	 ecx, esi
  0006a	50		 push	 eax
  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  00071	eb 10		 jmp	 SHORT $LN19@DataToInst
$LN20@DataToInst:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00073	56		 push	 esi
  00074	57		 push	 edi
  00075	ff 75 08	 push	 DWORD PTR __Oldlast$1$[ebp]
  00078	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00080	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN19@DataToInst:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00083	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00086	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0008b	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0008d	2b cf		 sub	 ecx, edi
  0008f	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00091	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00098	03 d1		 add	 edx, ecx
  0009a	c1 fa 04	 sar	 edx, 4
  0009d	8b c2		 mov	 eax, edx
  0009f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a2	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000a4	0f 84 8d 00 00
	00		 je	 $LN49@DataToInst
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  000aa	33 f6		 xor	 esi, esi
  000ac	0f 1f 40 00	 npad	 4
$LL4@DataToInst:

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000b0	8b 4d 0c	 mov	 ecx, DWORD PTR _pSoundInstanceVector$[ebp]
  000b3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000b8	2b c8		 sub	 ecx, eax
  000ba	89 45 fc	 mov	 DWORD PTR tv513[ebp], eax
  000bd	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c2	f7 e9		 imul	 ecx
  000c4	03 d1		 add	 edx, ecx
  000c6	c1 fa 04	 sar	 edx, 4
  000c9	8b c2		 mov	 eax, edx
  000cb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ce	03 c2		 add	 eax, edx
  000d0	3b 45 08	 cmp	 eax, DWORD PTR _i$1$[ebp]
  000d3	76 69		 jbe	 SHORT $LN45@DataToInst
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 133  : 		rSoundInstance.dwFrame = (DWORD) (c_rSoundData.fTime / c_fFrameTime);

  000d5	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  000da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@3c888889
  000e2	e8 00 00 00 00	 call	 __ftoui3
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR tv513[ebp]
  000ea	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax

; 134  : 		rSoundInstance.strSoundFileName = c_rSoundData.strSoundFileName;

  000ed	83 c1 04	 add	 ecx, 4
  000f0	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000f3	03 ce		 add	 ecx, esi
  000f5	03 c6		 add	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2785 :         if (this != _STD addressof(_Right)) {

  000f7	3b c8		 cmp	 ecx, eax
  000f9	74 13		 je	 SHORT $LN2@DataToInst

; 2153 :         return _BUF_SIZE <= _Myres;

  000fb	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  000ff	8b d0		 mov	 edx, eax

; 2145 :         if (_Large_string_engaged()) {

  00101	72 02		 jb	 SHORT $LN40@DataToInst

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
$LN40@DataToInst:

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00105	ff 70 10	 push	 DWORD PTR [eax+16]
  00108	52		 push	 edx
  00109	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@DataToInst:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00111	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00116	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00118	83 c6 1c	 add	 esi, 28			; 0000001cH
  0011b	ff 45 08	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011e	2b cf		 sub	 ecx, edi
  00120	f7 e9		 imul	 ecx
  00122	03 d1		 add	 edx, ecx
  00124	c1 fa 04	 sar	 edx, 4
  00127	8b c2		 mov	 eax, edx
  00129	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012c	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  0012e	39 45 08	 cmp	 DWORD PTR _i$1$[ebp], eax
  00131	0f 82 79 ff ff
	ff		 jb	 $LL4@DataToInst
$LN49@DataToInst:
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
$LN3@DataToInst:
  00139	5b		 pop	 ebx

; 136  : }

  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
$LN45@DataToInst:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1520 :             _Xrange();

  0013e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN51@DataToInst:
  00143	cc		 int	 3
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ENDP ; NSound::DataToInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_File$1$ = -332						; size = 4
_i$1$ = -328						; size = 4
$T2 = -324						; size = 24
_strResult$ = -300					; size = 24
_szErrorText$3 = -276					; size = 257
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; NSound::SaveSoundInformationPiece, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 0c	 mov	 edi, DWORD PTR _rSoundDataVector$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 80   : 	if (rSoundDataVector.empty())

  00034	8b 07		 mov	 eax, DWORD PTR [edi]
  00036	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00039	75 1d		 jne	 SHORT $LN5@SaveSoundI

; 81   : 	{
; 82   : 		if (IsFile(c_szFileName))

  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?IsFile@@YA_NPBD@Z	; IsFile
  00041	83 c4 04	 add	 esp, 4
  00044	84 c0		 test	 al, al
  00046	74 09		 je	 SHORT $LN6@SaveSoundI

; 83   : 		{
; 84   : 			_unlink(c_szFileName);

  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 __unlink
  0004e	83 c4 04	 add	 esp, 4
$LN6@SaveSoundI:

; 85   : 		}
; 86   : 		return true;

  00051	b0 01		 mov	 al, 1
  00053	e9 c9 01 00 00	 jmp	 $LN1@SaveSoundI
$LN5@SaveSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00058	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _strResult$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00062	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0006c	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _strResult$[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00073	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 89   : 	std::string strResult;

  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0007c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0007f	90		 npad	 1
$LL83@SaveSoundI:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL83@SaveSoundI
  00087	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00089	51		 push	 ecx
  0008a	56		 push	 esi
  0008b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  00091	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 92   : 	FILE * File = fopen(c_szFileName, "wt");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_02BKFDOEMK@wt@
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _fopen
  000a1	8b d8		 mov	 ebx, eax
  000a3	83 c4 08	 add	 esp, 8
  000a6	89 9d b4 fe ff
	ff		 mov	 DWORD PTR _File$1$[ebp], ebx

; 93   : 
; 94   : 	if (!File)

  000ac	85 db		 test	 ebx, ebx
  000ae	75 7b		 jne	 SHORT $LN7@SaveSoundI

; 95   : 	{
; 96   : 		char szErrorText[256+1];
; 97   : 		_snprintf(szErrorText, sizeof(szErrorText), "Failed to save file (%s).\nPlease check if it is read-only or you have no space on the disk.\n", c_szFileName);

  000b0	56		 push	 esi
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
  000b6	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$3[ebp]
  000bc	68 01 01 00 00	 push	 257			; 00000101H
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 __snprintf

; 98   : 		LogBox(szErrorText, "Error");

  000c7	53		 push	 ebx
  000c8	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$3[ebp]
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error@
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
  000de	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _strResult$[ebp]
  000e4	50		 push	 eax
  000e5	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000f1	83 c4 28	 add	 esp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000f4	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  000f8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000fc	72 02		 jb	 SHORT $LN32@SaveSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000fe	8b 00		 mov	 eax, DWORD PTR [eax]
$LN32@SaveSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00106	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  0010c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0010f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00112	72 10		 jb	 SHORT $LN40@SaveSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00114	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00115	50		 push	 eax
  00116	ff b5 bc fe ff
	ff		 push	 DWORD PTR $T2[ebp]
  0011c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00121	83 c4 08	 add	 esp, 8
$LN40@SaveSoundI:
  00124	32 db		 xor	 bl, bl
  00126	e9 d9 00 00 00	 jmp	 $LN11@SaveSoundI
$LN7@SaveSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 103  : 	fprintf(File, "ScriptType        CharacterSoundInformation\n");

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
  00130	53		 push	 ebx
  00131	e8 00 00 00 00	 call	 _fprintf

; 104  : 	fprintf(File, "\n");

  00136	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0013b	53		 push	 ebx
  0013c	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00141	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00144	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00149	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0014b	f7 e9		 imul	 ecx
  0014d	03 d1		 add	 edx, ecx
  0014f	c1 fa 04	 sar	 edx, 4
  00152	8b c2		 mov	 eax, edx
  00154	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00157	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 106  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
  0015f	53		 push	 ebx
  00160	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00165	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00167	33 c9		 xor	 ecx, ecx
  00169	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00174	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 106  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00177	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0017a	2b cb		 sub	 ecx, ebx
  0017c	f7 e9		 imul	 ecx
  0017e	03 d1		 add	 edx, ecx
  00180	c1 fa 04	 sar	 edx, 4
  00183	8b c2		 mov	 eax, edx
  00185	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00188	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0018a	74 68		 je	 SHORT $LN3@SaveSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0018c	33 f6		 xor	 esi, esi
  0018e	66 90		 npad	 2
$LL4@SaveSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  00190	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00193	03 c6		 add	 eax, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00195	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00199	72 02		 jb	 SHORT $LN65@SaveSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0019b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN65@SaveSoundI:
  0019d	f3 0f 10 04 1e	 movss	 xmm0, DWORD PTR [esi+ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 111  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001a2	8b 9d b8 fe ff
	ff		 mov	 ebx, DWORD PTR _i$1$[ebp]
  001a8	50		 push	 eax
  001a9	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ac	83 ec 08	 sub	 esp, 8
  001af	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001b4	53		 push	 ebx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
  001ba	ff b5 b4 fe ff
	ff		 push	 DWORD PTR _File$1$[ebp]
  001c0	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001c5	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  001c8	43		 inc	 ebx
  001c9	89 9d b8 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001cf	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001d4	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 111  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001d6	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d9	2b cb		 sub	 ecx, ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  001db	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001de	f7 e9		 imul	 ecx
  001e0	03 d1		 add	 edx, ecx
  001e2	c1 fa 04	 sar	 edx, 4
  001e5	8b c2		 mov	 eax, edx
  001e7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ea	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  001ec	39 85 b8 fe ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], eax
  001f2	72 9c		 jb	 SHORT $LL4@SaveSoundI
$LN3@SaveSoundI:

; 112  : 	}
; 113  : 
; 114  : 	fclose(File);

  001f4	ff b5 b4 fe ff
	ff		 push	 DWORD PTR _File$1$[ebp]
  001fa	e8 00 00 00 00	 call	 _fclose
  001ff	83 c4 04	 add	 esp, 4

; 115  : 	return true;

  00202	b3 01		 mov	 bl, 1
$LN11@SaveSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00204	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  0020a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0020d	72 10		 jb	 SHORT $LN73@SaveSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0020f	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00210	51		 push	 ecx
  00211	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _strResult$[ebp]
  00217	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0021c	83 c4 08	 add	 esp, 8
$LN73@SaveSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 115  : 	return true;

  0021f	8a c3		 mov	 al, bl
$LN1@SaveSoundI:

; 116  : }

  00221	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00224	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022b	59		 pop	 ecx
  0022c	5f		 pop	 edi
  0022d	5e		 pop	 esi
  0022e	5b		 pop	 ebx
  0022f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00232	33 cd		 xor	 ecx, ebp
  00234	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1:
  0000b	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; NSound::SaveSoundInformationPiece
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp
;	COMDAT ?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
_TEXT	SEGMENT
_pkTextFileLoader$1$ = -176				; size = 4
_iCount$ = -172						; size = 4
_i$1$ = -168						; size = 4
_c_szPathHeader$GSCopy$1$ = -164			; size = 4
_pTokenVector$2 = -160					; size = 4
tv2222 = -156						; size = 4
tv2219 = -156						; size = 4
tv2207 = -156						; size = 4
tv2231 = -149						; size = 1
tv2229 = -149						; size = 1
$T3 = -149						; size = 1
$T4 = -148						; size = 24
$T5 = -148						; size = 24
_strResult$ = -124					; size = 24
$T6 = -100						; size = 24
$T7 = -100						; size = 24
$T8 = -100						; size = 24
$T9 = -100						; size = 24
$T10 = -76						; size = 24
$T11 = -76						; size = 24
$T12 = -76						; size = 24
_szSoundDataHeader$ = -52				; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
_c_szPathHeader$ = 16					; size = 4
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z PROC ; NSound::LoadSoundInformationPiece, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 10	 mov	 eax, DWORD PTR _c_szPathHeader$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00034	8b 5d 0c	 mov	 ebx, DWORD PTR _rSoundDataVector$[ebp]
  00037	89 85 5c ff ff
	ff		 mov	 DWORD PTR _c_szPathHeader$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0003d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004b	c6 45 84 00	 mov	 BYTE PTR _strResult$[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004f	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 19   : 	std::string strResult;

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00058	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005b	0f 1f 44 00 00	 npad	 5
$LL371@LoadSoundI:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL371@LoadSoundI
  00067	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	51		 push	 ecx
  0006a	56		 push	 esi
  0006b	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 22   : 	CTextFileLoader* pkTextFileLoader=CTextFileLoader::Cache(c_szFileName);

  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?Cache@CTextFileLoader@@SAPAV1@PBD@Z ; CTextFileLoader::Cache
  00079	8b f0		 mov	 esi, eax
  0007b	83 c4 04	 add	 esp, 4
  0007e	89 b5 50 ff ff
	ff		 mov	 DWORD PTR _pkTextFileLoader$1$[ebp], esi

; 23   : 	if (!pkTextFileLoader)

  00084	85 f6		 test	 esi, esi
  00086	74 4a		 je	 SHORT $LN263@LoadSoundI

; 24   : 		return false;
; 25   : 
; 26   : 	CTextFileLoader& rkTextFileLoader=*pkTextFileLoader;
; 27   : 	if (rkTextFileLoader.IsEmpty())

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?IsEmpty@CTextFileLoader@@QAE_NXZ ; CTextFileLoader::IsEmpty
  0008f	84 c0		 test	 al, al
  00091	74 74		 je	 SHORT $LN6@LoadSoundI

; 29   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
  00098	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  0009b	50		 push	 eax
  0009c	8d 45 9c	 lea	 eax, DWORD PTR $T9[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
$LN381@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  000ac	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000b0	72 02		 jb	 SHORT $LN56@LoadSoundI
  000b2	8b 00		 mov	 eax, DWORD PTR [eax]
$LN56@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 29   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000ba	8b 45 b0	 mov	 eax, DWORD PTR $T9[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 29   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  000bd	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000c0	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000c3	72 0d		 jb	 SHORT $LN263@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000c5	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c6	50		 push	 eax
  000c7	ff 75 9c	 push	 DWORD PTR $T9[ebp]
$LN379@LoadSoundI:
  000ca	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cf	83 c4 08	 add	 esp, 8
$LN263@LoadSoundI:
  000d2	32 db		 xor	 bl, bl
$LN27@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000d4	8b 4d 98	 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  000d7	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000da	72 0d		 jb	 SHORT $LN356@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000dc	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000dd	51		 push	 ecx
  000de	ff 75 84	 push	 DWORD PTR _strResult$[ebp]
  000e1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000e6	83 c4 08	 add	 esp, 8
$LN356@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 75   : 	return true;

  000e9	8a c3		 mov	 al, bl

; 76   : }

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN6@LoadSoundI:

; 30   : 		return false;
; 31   : 	}
; 32   : 
; 33   : 	rkTextFileLoader.SetTop();

  00107	8b ce		 mov	 ecx, esi
  00109	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0010e	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+8
  00113	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@
  0011b	89 45 bc	 mov	 DWORD PTR $T12[ebp+8], eax
  0011e	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+12

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00124	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  0012b	c7 45 c4 0e 00
	00 00		 mov	 DWORD PTR $T12[ebp+16], 14 ; 0000000eH

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00132	66 0f d6 45 b4	 movq	 QWORD PTR $T12[ebp], xmm0
  00137	66 89 45 c0	 mov	 WORD PTR $T12[ebp+12], ax

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0013b	c6 45 c2 00	 mov	 BYTE PTR $T12[ebp+14], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  0013f	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _iCount$[ebp]
  00145	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00149	50		 push	 eax
  0014a	8d 45 b4	 lea	 eax, DWORD PTR $T12[ebp]
  0014d	8b ce		 mov	 ecx, esi
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
  00155	85 c0		 test	 eax, eax
  00157	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0015b	8b 45 c8	 mov	 eax, DWORD PTR $T12[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  0015e	0f 94 85 6b ff
	ff ff		 sete	 BYTE PTR tv2231[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00165	83 f8 10	 cmp	 eax, 16			; 00000010H
  00168	72 0d		 jb	 SHORT $LN131@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0016a	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016b	50		 push	 eax
  0016c	ff 75 b4	 push	 DWORD PTR $T12[ebp]
  0016f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00174	83 c4 08	 add	 esp, 8
$LN131@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  00177	80 bd 6b ff ff
	ff 00		 cmp	 BYTE PTR tv2231[ebp], 0
  0017e	74 1e		 je	 SHORT $LN7@LoadSoundI

; 37   : 	{
; 38   : 		SetResultString((strResult + " File format error, SoundDataCount Unable to find.").c_str());

  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
  00185	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00188	50		 push	 eax
  00189	8d 45 9c	 lea	 eax, DWORD PTR $T8[ebp]
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00192	83 c4 0c	 add	 esp, 12			; 0000000cH
  00195	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00199	e9 0e ff ff ff	 jmp	 $LN381@LoadSoundI
$LN7@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0019e	53		 push	 ebx
  0019f	ff 73 04	 push	 DWORD PTR [ebx+4]
  001a2	ff 33		 push	 DWORD PTR [ebx]
  001a4	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1224 :         if (_Newsize > _Oldsize) { // append

  001a9	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _iCount$[ebp]

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  001af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  001b2	8b 3b		 mov	 edi, DWORD PTR [ebx]
  001b4	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 1224 :         if (_Newsize > _Oldsize) { // append

  001b7	85 f6		 test	 esi, esi
  001b9	74 3b		 je	 SHORT $LN172@LoadSoundI

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  001bb	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001be	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001c3	2b cf		 sub	 ecx, edi
  001c5	f7 e9		 imul	 ecx
  001c7	03 d1		 add	 edx, ecx
  001c9	c1 fa 04	 sar	 edx, 4
  001cc	8b c2		 mov	 eax, edx
  001ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d1	03 c2		 add	 eax, edx

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  001d3	3b f0		 cmp	 esi, eax
  001d5	76 11		 jbe	 SHORT $LN173@LoadSoundI

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  001d7	8d 85 6b ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001dd	8b cb		 mov	 ecx, ebx
  001df	50		 push	 eax
  001e0	56		 push	 esi
  001e1	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  001e6	eb 0e		 jmp	 SHORT $LN172@LoadSoundI
$LN173@LoadSoundI:

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  001e8	53		 push	 ebx
  001e9	56		 push	 esi
  001ea	57		 push	 edi
  001eb	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  001f3	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN172@LoadSoundI:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001f6	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  001f9	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001fe	2b 0b		 sub	 ecx, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00200	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00202	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00204	89 b5 58 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0020a	03 d1		 add	 edx, ecx
  0020c	c1 fa 04	 sar	 edx, 4
  0020f	8b c2		 mov	 eax, edx
  00211	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00214	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00216	0f 84 02 02 00
	00		 je	 $LN3@LoadSoundI
  0021c	89 b5 64 ff ff
	ff		 mov	 DWORD PTR tv2207[ebp], esi
$LL4@LoadSoundI:

; 48   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  00222	56		 push	 esi
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
  00228	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  0022b	6a 21		 push	 33			; 00000021H
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00233	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00236	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 48   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  0023d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00240	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00247	c6 45 b4 00	 mov	 BYTE PTR $T11[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0024b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0024e	66 90		 npad	 2
$LL372@LoadSoundI:
  00250	8a 01		 mov	 al, BYTE PTR [ecx]
  00252	41		 inc	 ecx
  00253	84 c0		 test	 al, al
  00255	75 f9		 jne	 SHORT $LL372@LoadSoundI
  00257	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00259	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  0025c	51		 push	 ecx
  0025d	50		 push	 eax
  0025e	8d 4d b4	 lea	 ecx, DWORD PTR $T11[ebp]
  00261	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00266	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _pkTextFileLoader$1$[ebp]
  0026c	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _pTokenVector$2[ebp]
  00272	50		 push	 eax
  00273	8d 45 b4	 lea	 eax, DWORD PTR $T11[ebp]
  00276	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00280	85 c0		 test	 eax, eax
  00282	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00286	8b 45 c8	 mov	 eax, DWORD PTR $T11[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00289	0f 94 85 6b ff
	ff ff		 sete	 BYTE PTR tv2229[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00290	83 f8 10	 cmp	 eax, 16			; 00000010H
  00293	72 0d		 jb	 SHORT $LN197@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00295	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00296	50		 push	 eax
  00297	ff 75 b4	 push	 DWORD PTR $T11[ebp]
  0029a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0029f	83 c4 08	 add	 esp, 8
$LN197@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  002a2	80 bd 6b ff ff
	ff 00		 cmp	 BYTE PTR tv2229[ebp], 0
  002a9	0f 85 d9 01 00
	00		 jne	 $LN363@LoadSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002af	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  002b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002b8	8b 38		 mov	 edi, DWORD PTR [eax]
  002ba	2b cf		 sub	 ecx, edi
  002bc	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002c1	f7 e9		 imul	 ecx
  002c3	c1 fa 02	 sar	 edx, 2
  002c6	8b c2		 mov	 eax, edx
  002c8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cb	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 56   : 		if (2 != pTokenVector->size())

  002cd	83 f8 02	 cmp	 eax, 2
  002d0	0f 85 94 01 00
	00		 jne	 $LN364@LoadSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002d6	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  002da	72 02		 jb	 SHORT $LN285@LoadSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  002dc	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN285@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  002de	8b 33		 mov	 esi, DWORD PTR [ebx]
  002e0	03 b5 64 ff ff
	ff		 add	 esi, DWORD PTR tv2207[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 62   : 		rSoundDataVector[i].fTime = (float) atof(pTokenVector->at(0).c_str());

  002e6	57		 push	 edi
  002e7	e8 00 00 00 00	 call	 _atof

; 63   : 		if (c_szPathHeader)

  002ec	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _c_szPathHeader$GSCopy$1$[ebp]
  002f2	83 c4 04	 add	 esp, 4
  002f5	d9 1e		 fstp	 DWORD PTR [esi]
  002f7	85 c0		 test	 eax, eax
  002f9	0f 84 8a 00 00
	00		 je	 $LN10@LoadSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  002ff	8b 13		 mov	 edx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00301	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  00303	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR tv2207[ebp]
  00309	83 c2 04	 add	 edx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0030c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0030f	90		 npad	 1
$LL373@LoadSoundI:
  00310	8a 01		 mov	 al, BYTE PTR [ecx]
  00312	41		 inc	 ecx
  00313	84 c0		 test	 al, al
  00315	75 f9		 jne	 SHORT $LL373@LoadSoundI

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00317	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _c_szPathHeader$GSCopy$1$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0031d	2b ce		 sub	 ecx, esi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0031f	51		 push	 ecx
  00320	50		 push	 eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 65   : 			rSoundDataVector[i].strSoundFileName = c_szPathHeader;

  00321	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00324	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00329	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  0032f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00332	8b 30		 mov	 esi, DWORD PTR [eax]
  00334	2b ce		 sub	 ecx, esi
  00336	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0033b	f7 e9		 imul	 ecx
  0033d	c1 fa 02	 sar	 edx, 2
  00340	8b c2		 mov	 eax, edx
  00342	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00345	03 c2		 add	 eax, edx
  00347	83 f8 01	 cmp	 eax, 1
  0034a	0f 86 f1 01 00
	00		 jbe	 $LN367@LoadSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00350	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00354	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00357	72 02		 jb	 SHORT $LN305@LoadSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00359	8b 12		 mov	 edx, DWORD PTR [edx]
$LN305@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  0035b	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0035d	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  0035f	83 c6 04	 add	 esi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00362	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00365	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv2219[ebp], eax
  0036b	0f 1f 44 00 00	 npad	 5
$LL374@LoadSoundI:
  00370	8a 01		 mov	 al, BYTE PTR [ecx]
  00372	41		 inc	 ecx
  00373	84 c0		 test	 al, al
  00375	75 f9		 jne	 SHORT $LL374@LoadSoundI
  00377	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR tv2219[ebp]

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0037d	51		 push	 ecx
  0037e	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 66   : 			rSoundDataVector[i].strSoundFileName += pTokenVector->at(1).c_str();

  0037f	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00382	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 67   : 		}

  00387	eb 5f		 jmp	 SHORT $LN2@LoadSoundI
$LN10@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00389	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  0038f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00392	8b 30		 mov	 esi, DWORD PTR [eax]
  00394	2b ce		 sub	 ecx, esi
  00396	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0039b	f7 e9		 imul	 ecx
  0039d	c1 fa 02	 sar	 edx, 2
  003a0	8b c2		 mov	 eax, edx
  003a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003a5	03 c2		 add	 eax, edx
  003a7	83 f8 01	 cmp	 eax, 1
  003aa	0f 86 91 01 00
	00		 jbe	 $LN367@LoadSoundI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  003b0	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  003b4	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  003b7	72 02		 jb	 SHORT $LN323@LoadSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  003b9	8b 12		 mov	 edx, DWORD PTR [edx]
$LN323@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  003bb	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003bd	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1504 :         return _My_data._Myfirst[_Pos];

  003bf	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR tv2207[ebp]
  003c5	83 c6 04	 add	 esi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003c8	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  003cb	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv2222[ebp], eax
$LL375@LoadSoundI:
  003d1	8a 01		 mov	 al, BYTE PTR [ecx]
  003d3	41		 inc	 ecx
  003d4	84 c0		 test	 al, al
  003d6	75 f9		 jne	 SHORT $LL375@LoadSoundI
  003d8	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR tv2222[ebp]

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003de	51		 push	 ecx
  003df	52		 push	 edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 70   : 			rSoundDataVector[i].strSoundFileName = pTokenVector->at(1).c_str();

  003e0	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003e3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003e8	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  003eb	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  003f0	2b 0b		 sub	 ecx, DWORD PTR [ebx]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  003f2	83 c7 1c	 add	 edi, 28			; 0000001cH
  003f5	8b b5 58 ff ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003fb	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  003fd	46		 inc	 esi
  003fe	89 bd 64 ff ff
	ff		 mov	 DWORD PTR tv2207[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00404	03 d1		 add	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00406	89 b5 58 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0040c	c1 fa 04	 sar	 edx, 4
  0040f	8b c2		 mov	 eax, edx
  00411	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00414	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00416	3b f0		 cmp	 esi, eax
  00418	0f 82 04 fe ff
	ff		 jb	 $LL4@LoadSoundI
$LN3@LoadSoundI:

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_07EGDJHJID@?5Loaded@
  00423	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00426	50		 push	 eax
  00427	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00433	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00436	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  0043a	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0043e	72 02		 jb	 SHORT $LN338@LoadSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00440	8b 00		 mov	 eax, DWORD PTR [eax]
$LN338@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  00442	50		 push	 eax
  00443	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00448	8b 45 80	 mov	 eax, DWORD PTR $T4[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  0044b	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0044e	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00451	72 10		 jb	 SHORT $LN346@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00453	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00454	50		 push	 eax
  00455	ff b5 6c ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  0045b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00460	83 c4 08	 add	 esp, 8
$LN346@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 75   : 	return true;

  00463	b3 01		 mov	 bl, 1
  00465	e9 6a fc ff ff	 jmp	 $LN27@LoadSoundI
$LN364@LoadSoundI:

; 57   : 		{
; 58   : 			SetResultString((strResult + " File format error: The size of the vector is not 2").c_str());

  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
  0046f	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00472	50		 push	 eax
  00473	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  00476	50		 push	 eax
  00477	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0047c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047f	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00483	e9 24 fc ff ff	 jmp	 $LN381@LoadSoundI
$LN363@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  00488	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
  0048d	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00490	50		 push	 eax
  00491	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0049d	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]
  004a0	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  004a4	51		 push	 ecx
  004a5	50		 push	 eax
  004a6	8d 45 9c	 lea	 eax, DWORD PTR $T7[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004af	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
  004b4	50		 push	 eax
  004b5	8d 45 b4	 lea	 eax, DWORD PTR $T10[ebp]
  004b8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  004bc	50		 push	 eax
  004bd	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004c2	83 c4 24	 add	 esp, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  004c5	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  004c9	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  004cd	72 02		 jb	 SHORT $LN206@LoadSoundI

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  004cf	8b 00		 mov	 eax, DWORD PTR [eax]
$LN206@LoadSoundI:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  004d1	50		 push	 eax
  004d2	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  004d7	8b 45 c8	 mov	 eax, DWORD PTR $T10[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  004da	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  004dd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004e0	72 0d		 jb	 SHORT $LN214@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004e2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004e3	50		 push	 eax
  004e4	ff 75 b4	 push	 DWORD PTR $T10[ebp]
  004e7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004ec	83 c4 08	 add	 esp, 8
$LN214@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  004ef	8b 45 b0	 mov	 eax, DWORD PTR $T7[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  004f2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  004f9	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00500	c6 45 b4 00	 mov	 BYTE PTR $T10[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  00504	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00507	72 0d		 jb	 SHORT $LN224@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00509	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0050a	50		 push	 eax
  0050b	ff 75 9c	 push	 DWORD PTR $T7[ebp]
  0050e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00513	83 c4 08	 add	 esp, 8
$LN224@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00516	8b 45 80	 mov	 eax, DWORD PTR $T5[ebp+20]

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00519	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00520	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00527	c6 45 9c 00	 mov	 BYTE PTR $T7[ebp], 0

; 2153 :         return _BUF_SIZE <= _Myres;

  0052b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0052e	0f 82 9e fb ff
	ff		 jb	 $LN263@LoadSoundI

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00534	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00535	50		 push	 eax
  00536	ff b5 6c ff ff
	ff		 push	 DWORD PTR $T5[ebp]
  0053c	e9 89 fb ff ff	 jmp	 $LN379@LoadSoundI
$LN367@LoadSoundI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1520 :             _Xrange();

  00541	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN377@LoadSoundI:
  00546	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1:
  00008	8d 4d 9c	 lea	 ecx, DWORD PTR $T9[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2:
  00010	8d 4d b4	 lea	 ecx, DWORD PTR $T12[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3:
  00018	8d 4d 9c	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4:
  00020	8d 4d b4	 lea	 ecx, DWORD PTR $T11[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9:
  00028	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8:
  00033	8d 4d 9c	 lea	 ecx, DWORD PTR $T6[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5:
  0003b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6:
  00046	8d 4d 9c	 lea	 ecx, DWORD PTR $T7[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7:
  0004e	8d 4d b4	 lea	 ecx, DWORD PTR $T10[ebp]
  00051	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
__ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z:
  0005b	90		 npad	 1
  0005c	90		 npad	 1
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00074	33 c8		 xor	 ecx, eax
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  00080	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ENDP ; NSound::LoadSoundInformationPiece
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_size$1$ = -16					; size = 4
__New_ptr$1 = -12					; size = 4
tv448 = -8						; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv452 = 12						; size = 4
tv449 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f0	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2135 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2153 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 d6 00 00
	00		 jb	 $LN45@append

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN19@append

; 4203 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN42@append
$LN19@append:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv452[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv452[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN20@append

; 4207 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN42@append
$LN20@append:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv452[ebp]
  00090	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN42@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4259 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f4	 mov	 DWORD PTR __New_ptr$1[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4260 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv449[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  000bd	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c1	89 4d f8	 mov	 DWORD PTR tv448[ebp], ecx
  000c4	72 3c		 jb	 SHORT $LN13@append

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000c6	ff 75 f0	 push	 DWORD PTR __Old_size$1$[ebp]

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000e7	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1[ebp]

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f2	83 c4 20	 add	 esp, 32			; 00000020H

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	89 07		 mov	 DWORD PTR [edi], eax

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN13@append:

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00102	56		 push	 esi
  00103	57		 push	 edi
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	53		 push	 ebx
  0010b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0010e	ff 75 0c	 push	 DWORD PTR tv449[ebp]
  00111	e8 00 00 00 00	 call	 _memcpy

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00116	8b 45 f8	 mov	 eax, DWORD PTR tv448[ebp]
  00119	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011c	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  0011f	50		 push	 eax
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  00126	83 c4 20	 add	 esp, 32			; 00000020H
  00129	8b c7		 mov	 eax, edi
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN45@append:

; 4250 :             _Xlen_string(); // result too long

  00134	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@append:
  00139	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);
; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1975 :         __crt_va_end(_ArgList);
; 1976 :         return _Result;
; 1977 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);
; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 840  :         __crt_va_end(_ArgList);
; 841  :         return _Result;
; 842  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
