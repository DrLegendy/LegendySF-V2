; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_isSoundFile@CSoundData@@0PA_NA		; CSoundData::ms_isSoundFile
_BSS	SEGMENT
?ms_isSoundFile@CSoundData@@0PA_NA DB 05H DUP (?)	; CSoundData::ms_isSoundFile
_BSS	ENDS
PUBLIC	?SetPackMode@CSoundData@@SAXXZ			; CSoundData::SetPackMode
PUBLIC	??0CSoundData@@QAE@XZ				; CSoundData::CSoundData
PUBLIC	??1CSoundData@@UAE@XZ				; CSoundData::~CSoundData
PUBLIC	?Assign@CSoundData@@QAEXPBD@Z			; CSoundData::Assign
PUBLIC	?Get@CSoundData@@QAEPAXXZ			; CSoundData::Get
PUBLIC	?GetSize@CSoundData@@QAEKXZ			; CSoundData::GetSize
PUBLIC	?Release@CSoundData@@QAEXXZ			; CSoundData::Release
PUBLIC	?GetAccessTime@CSoundData@@QAEKXZ		; CSoundData::GetAccessTime
PUBLIC	?GetFileName@CSoundData@@QAEPBDXZ		; CSoundData::GetFileName
PUBLIC	?SetPlayTime@CSoundData@@QAEXK@Z		; CSoundData::SetPlayTime
PUBLIC	?GetPlayTime@CSoundData@@QAEKXZ			; CSoundData::GetPlayTime
PUBLIC	?ReadFromDisk@CSoundData@@IAE_NXZ		; CSoundData::ReadFromDisk
PUBLIC	?Destroy@CSoundData@@IAEXXZ			; CSoundData::Destroy
PUBLIC	?open_callback@CSoundData@@CGKPBDPAK@Z		; CSoundData::open_callback
PUBLIC	?close_callback@CSoundData@@CGXK@Z		; CSoundData::close_callback
PUBLIC	?seek_callback@CSoundData@@CGJKJK@Z		; CSoundData::seek_callback
PUBLIC	?read_callback@CSoundData@@CGKKPAXK@Z		; CSoundData::read_callback
PUBLIC	?isSlotIndex@CSoundData@@CA_NK@Z		; CSoundData::isSlotIndex
PUBLIC	?GetEmptySlotIndex@CSoundData@@CAHXZ		; CSoundData::GetEmptySlotIndex
PUBLIC	??_GCSoundData@@UAEPAXI@Z			; CSoundData::`scalar deleting destructor'
PUBLIC	?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A	; CSoundData::ms_SoundFile
PUBLIC	??_7CSoundData@@6B@				; CSoundData::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_R4CSoundData@@6B@				; CSoundData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundData@@@8				; CSoundData `RTTI Type Descriptor'
PUBLIC	??_R3CSoundData@@8				; CSoundData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundData@@8				; CSoundData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundData@@8			; CSoundData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__AIL_mem_free_lock@4:PROC
EXTRN	__imp__AIL_file_read@8:PROC
EXTRN	__imp__AIL_set_file_callbacks@16:PROC
EXTRN	__imp__AIL_WAV_info@8:PROC
EXTRN	__imp__AIL_decompress_ASI@24:PROC
EXTRN	__imp__AIL_decompress_ADPCM@12:PROC
EXTRN	__imp__AIL_file_type@8:PROC
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Destroy@CMappedFile@@QAEXXZ:PROC		; CMappedFile::Destroy
EXTRN	?Seek@CMappedFile@@QAEHKH@Z:PROC		; CMappedFile::Seek
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Read@CMappedFile@@QAEHPAXH@Z:PROC		; CMappedFile::Read
EXTRN	??_ECSoundData@@UAEPAXI@Z:PROC			; CSoundData::`vector deleting destructor'
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
	ALIGN	4

?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A DB 0654H DUP (?) ; CSoundData::ms_SoundFile
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_SoundFile$initializer$@CSoundData@@0P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ ; ??ms_SoundFile$initializer$@CSoundData@@0P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundData@@8 DD FLAT:??_R0?AVCSoundData@@@8 ; CSoundData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundData@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundData@@8
rdata$r	SEGMENT
??_R2CSoundData@@8 DD FLAT:??_R1A@?0A@EA@CSoundData@@8	; CSoundData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSoundData@@8
rdata$r	SEGMENT
??_R3CSoundData@@8 DD 00H				; CSoundData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSoundData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundData@@@8
data$r	SEGMENT
??_R0?AVCSoundData@@@8 DD FLAT:??_7type_info@@6B@	; CSoundData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSoundData@@6B@
rdata$r	SEGMENT
??_R4CSoundData@@6B@ DD 00H				; CSoundData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundData@@@8
	DD	FLAT:??_R3CSoundData@@8
rdata$r	ENDS
;	COMDAT ??_7CSoundData@@6B@
CONST	SEGMENT
??_7CSoundData@@6B@ DD FLAT:??_R4CSoundData@@6B@	; CSoundData::`vftable'
	DD	FLAT:??_ECSoundData@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundData::ms_SoundFile'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1CMappedFile@@UAE@XZ ; CMappedFile::~CMappedFile
  00005	6a 05		 push	 5
  00007	68 44 01 00 00	 push	 324			; 00000144H
  0000c	68 00 00 00 00	 push	 OFFSET ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A ; CSoundData::ms_SoundFile
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00016	c3		 ret	 0
??__F?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundData::ms_SoundFile''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ??__E?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundData::ms_SoundFile'', COMDAT

; 8    : CMappedFile CSoundData::ms_SoundFile[SOUND_FILE_MAX_NUM];

  00000	68 00 00 00 00	 push	 OFFSET ??1CMappedFile@@UAE@XZ ; CMappedFile::~CMappedFile
  00005	68 00 00 00 00	 push	 OFFSET ??0CMappedFile@@QAE@XZ ; CMappedFile::CMappedFile
  0000a	6a 05		 push	 5
  0000c	68 44 01 00 00	 push	 324			; 00000144H
  00011	68 00 00 00 00	 push	 OFFSET ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A ; CSoundData::ms_SoundFile
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundData::ms_SoundFile''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__E?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundData::ms_SoundFile''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundData@@UAEPAXI@Z PROC				; CSoundData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundData@@UAE@XZ	; CSoundData::~CSoundData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 a0 00 00 00	 push	 160			; 000000a0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSoundData@@UAEPAXI@Z ENDP				; CSoundData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?GetEmptySlotIndex@CSoundData@@CAHXZ
_TEXT	SEGMENT
?GetEmptySlotIndex@CSoundData@@CAHXZ PROC		; CSoundData::GetEmptySlotIndex, COMDAT

; 126  : 	for (int i = 0; i < SOUND_FILE_MAX_NUM; ++i)

  00000	33 c0		 xor	 eax, eax
$LL4@GetEmptySl:

; 127  : 	{
; 128  : 		if (!ms_isSoundFile[i])

  00002	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_isSoundFile@CSoundData@@0PA_NA[eax], 0
  00009	74 09		 je	 SHORT $LN1@GetEmptySl

; 126  : 	for (int i = 0; i < SOUND_FILE_MAX_NUM; ++i)

  0000b	40		 inc	 eax
  0000c	83 f8 05	 cmp	 eax, 5
  0000f	7c f1		 jl	 SHORT $LL4@GetEmptySl

; 129  : 			return i;
; 130  : 	}
; 131  : 
; 132  : 	return -1;

  00011	83 c8 ff	 or	 eax, -1
$LN1@GetEmptySl:

; 133  : }

  00014	c3		 ret	 0
?GetEmptySlotIndex@CSoundData@@CAHXZ ENDP		; CSoundData::GetEmptySlotIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?isSlotIndex@CSoundData@@CA_NK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?isSlotIndex@CSoundData@@CA_NK@Z PROC			; CSoundData::isSlotIndex, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	if (dwIndex >= SOUND_FILE_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00006	83 f8 05	 cmp	 eax, 5
  00009	73 0d		 jae	 SHORT $LN5@isSlotInde

; 116  : 		return false;
; 117  : 
; 118  : 	if (!ms_isSoundFile[dwIndex])

  0000b	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_isSoundFile@CSoundData@@0PA_NA[eax], 0
  00012	74 04		 je	 SHORT $LN5@isSlotInde

; 120  : 
; 121  : 	return true;

  00014	b0 01		 mov	 al, 1

; 122  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN5@isSlotInde:

; 119  : 		return false;

  00018	32 c0		 xor	 al, al

; 122  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?isSlotIndex@CSoundData@@CA_NK@Z ENDP			; CSoundData::isSlotIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?read_callback@CSoundData@@CGKKPAXK@Z
_TEXT	SEGMENT
_file_handle$ = 8					; size = 4
_buffer$ = 12						; size = 4
_bytes$ = 16						; size = 4
?read_callback@CSoundData@@CGKKPAXK@Z PROC		; CSoundData::read_callback, COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 172  : 	if (!isSlotIndex(file_handle))

  00004	8b 75 08	 mov	 esi, DWORD PTR _file_handle$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?isSlotIndex@CSoundData@@CA_NK@Z ; CSoundData::isSlotIndex
  0000d	83 c4 04	 add	 esp, 4
  00010	84 c0		 test	 al, al
  00012	75 07		 jne	 SHORT $LN2@read_callb

; 173  : 		return 0;

  00014	33 c0		 xor	 eax, eax
  00016	5e		 pop	 esi

; 178  : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
$LN2@read_callb:

; 174  : 
; 175  : 	DWORD dwRealSize = min(ms_SoundFile[file_handle].Size(), bytes);

  0001b	69 c6 44 01 00
	00		 imul	 eax, esi, 324
  00021	57		 push	 edi
  00022	8d b8 00 00 00
	00		 lea	 edi, DWORD PTR ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A[eax]
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0002f	8b 75 10	 mov	 esi, DWORD PTR _bytes$[ebp]
  00032	3b c6		 cmp	 eax, esi
  00034	73 09		 jae	 SHORT $LN4@read_callb
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0003d	8b f0		 mov	 esi, eax
$LN4@read_callb:

; 176  : 	ms_SoundFile[file_handle].Read(buffer, dwRealSize);

  0003f	56		 push	 esi
  00040	ff 75 0c	 push	 DWORD PTR _buffer$[ebp]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 177  : 	return dwRealSize;

  0004a	5f		 pop	 edi
  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi

; 178  : }

  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
?read_callback@CSoundData@@CGKKPAXK@Z ENDP		; CSoundData::read_callback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?seek_callback@CSoundData@@CGJKJK@Z
_TEXT	SEGMENT
_file_handle$ = 8					; size = 4
_offset$ = 12						; size = 4
_type$ = 16						; size = 4
?seek_callback@CSoundData@@CGJKJK@Z PROC		; CSoundData::seek_callback, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 164  : 	if (!isSlotIndex(file_handle))

  00004	8b 75 08	 mov	 esi, DWORD PTR _file_handle$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?isSlotIndex@CSoundData@@CA_NK@Z ; CSoundData::isSlotIndex
  0000d	83 c4 04	 add	 esp, 4
  00010	84 c0		 test	 al, al
  00012	75 07		 jne	 SHORT $LN2@seek_callb

; 165  : 		return 0;

  00014	33 c0		 xor	 eax, eax
  00016	5e		 pop	 esi

; 168  : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
$LN2@seek_callb:

; 166  : 
; 167  : 	return ms_SoundFile[file_handle].Seek(offset, type);

  0001b	ff 75 10	 push	 DWORD PTR _type$[ebp]
  0001e	69 ce 44 01 00
	00		 imul	 ecx, esi, 324
  00024	ff 75 0c	 push	 DWORD PTR _offset$[ebp]
  00027	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A ; CSoundData::ms_SoundFile
  0002d	e8 00 00 00 00	 call	 ?Seek@CMappedFile@@QAEHKH@Z ; CMappedFile::Seek
  00032	5e		 pop	 esi

; 168  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?seek_callback@CSoundData@@CGJKJK@Z ENDP		; CSoundData::seek_callback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?close_callback@CSoundData@@CGXK@Z
_TEXT	SEGMENT
_file_handle$ = 8					; size = 4
?close_callback@CSoundData@@CGXK@Z PROC			; CSoundData::close_callback, COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 155  : 	if (!isSlotIndex(file_handle))

  00004	8b 75 08	 mov	 esi, DWORD PTR _file_handle$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?isSlotIndex@CSoundData@@CA_NK@Z ; CSoundData::isSlotIndex
  0000d	83 c4 04	 add	 esp, 4
  00010	84 c0		 test	 al, al
  00012	74 1d		 je	 SHORT $LN1@close_call

; 156  : 		return;
; 157  : 
; 158  : 	ms_SoundFile[file_handle].Destroy();

  00014	69 ce 44 01 00
	00		 imul	 ecx, esi, 324
  0001a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A ; CSoundData::ms_SoundFile
  00020	e8 00 00 00 00	 call	 ?Destroy@CMappedFile@@QAEXXZ ; CMappedFile::Destroy

; 159  : 	ms_isSoundFile[file_handle] = false;

  00025	83 fe 05	 cmp	 esi, 5
  00028	73 0c		 jae	 SHORT $LN4@close_call
  0002a	c6 86 00 00 00
	00 00		 mov	 BYTE PTR ?ms_isSoundFile@CSoundData@@0PA_NA[esi], 0
$LN1@close_call:
  00031	5e		 pop	 esi

; 160  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@close_call:

; 159  : 	ms_isSoundFile[file_handle] = false;

  00036	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN6@close_call:
  0003b	cc		 int	 3
?close_callback@CSoundData@@CGXK@Z ENDP			; CSoundData::close_callback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?open_callback@CSoundData@@CGKPBDPAK@Z
_TEXT	SEGMENT
_pMap$ = -4						; size = 4
_filename$ = 8						; size = 4
_file_handle$ = 12					; size = 4
?open_callback@CSoundData@@CGKPBDPAK@Z PROC		; CSoundData::open_callback, COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 137  : 	int iIndex = GetEmptySlotIndex();

  00005	e8 00 00 00 00	 call	 ?GetEmptySlotIndex@CSoundData@@CAHXZ ; CSoundData::GetEmptySlotIndex
  0000a	8b f0		 mov	 esi, eax

; 138  : 
; 139  : 	if (-1 == iIndex)

  0000c	83 fe ff	 cmp	 esi, -1
  0000f	74 3b		 je	 SHORT $LN5@open_callb

; 140  : 		return 0;
; 141  : 
; 142  : 	LPCVOID	pMap;
; 143  : 
; 144  : 	if (!CEterPackManager::Instance().Get(ms_SoundFile[iIndex], filename, &pMap))

  00011	8d 45 fc	 lea	 eax, DWORD PTR _pMap$[ebp]
  00014	69 ce 44 01 00
	00		 imul	 ecx, esi, 324
  0001a	50		 push	 eax
  0001b	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0001e	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ms_SoundFile@CSoundData@@0PAVCMappedFile@@A ; CSoundData::ms_SoundFile
  00024	51		 push	 ecx
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  0002b	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00030	84 c0		 test	 al, al
  00032	74 18		 je	 SHORT $LN5@open_callb

; 146  : 
; 147  : 	ms_isSoundFile[iIndex] = true;
; 148  : 
; 149  : 	*file_handle = iIndex;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _file_handle$[ebp]
  00037	c6 86 00 00 00
	00 01		 mov	 BYTE PTR ?ms_isSoundFile@CSoundData@@0PA_NA[esi], 1
  0003e	89 30		 mov	 DWORD PTR [eax], esi

; 150  : 	return 1;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	5e		 pop	 esi

; 151  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN5@open_callb:

; 145  : 		return 0;

  0004c	33 c0		 xor	 eax, eax
  0004e	5e		 pop	 esi

; 151  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?open_callback@CSoundData@@CGKPBDPAK@Z ENDP		; CSoundData::open_callback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?Destroy@CSoundData@@IAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundData@@IAEXXZ PROC			; CSoundData::Destroy, COMDAT
; _this$ = ecx

; 190  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 	if (m_data)

  00003	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  00009	85 c0		 test	 eax, eax
  0000b	74 11		 je	 SHORT $LN2@Destroy

; 192  : 	{
; 193  : 		AIL_mem_free_lock(m_data);

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_mem_free_lock@4

; 194  : 		m_data = NULL;

  00014	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
$LN2@Destroy:

; 195  : 	}
; 196  : }

  0001e	5e		 pop	 esi
  0001f	c3		 ret	 0
?Destroy@CSoundData@@IAEXXZ ENDP			; CSoundData::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?ReadFromDisk@CSoundData@@IAE_NXZ
_TEXT	SEGMENT
_info$ = -44						; size = 36
_start$ = -8						; size = 8
?ReadFromDisk@CSoundData@@IAE_NXZ PROC			; CSoundData::ReadFromDisk, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 66   : 	assert(m_assigned == true);
; 67   : 
; 68   : 	LARGE_INTEGER start;
; 69   : 	QueryPerformanceCounter(&start);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _start$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryPerformanceCounter@4

; 70   : 
; 71   : 	U32* s = (U32 *) AIL_file_read(m_filename, FILE_READ_WITH_SIZE);

  00014	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00017	6a ff		 push	 -1
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_file_read@8
  00020	8b f8		 mov	 edi, eax

; 72   : 
; 73   : 	if (s == NULL)

  00022	85 ff		 test	 edi, edi
  00024	75 08		 jne	 SHORT $LN4@ReadFromDi

; 74   : 		return false;

  00026	5f		 pop	 edi
  00027	32 c0		 xor	 al, al

; 111  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN4@ReadFromDi:
  0002e	53		 push	 ebx

; 75   : 
; 76   : 	S32 type = AIL_file_type(s + 1, s[0]);

  0002f	ff 37		 push	 DWORD PTR [edi]
  00031	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  00034	53		 push	 ebx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_file_type@8

; 77   : 	AILSOUNDINFO info;
; 78   : 
; 79   : 	switch (type)

  0003b	83 e8 01	 sub	 eax, 1
  0003e	74 7a		 je	 SHORT $LN5@ReadFromDi
  00040	83 e8 01	 sub	 eax, 1
  00043	74 42		 je	 SHORT $LN6@ReadFromDi
  00045	83 e8 0b	 sub	 eax, 11			; 0000000bH
  00048	74 10		 je	 SHORT $LN7@ReadFromDi

; 101  : 			}
; 102  : 			break;
; 103  : 
; 104  : 		default:
; 105  : 			assert(!"Unknown File Type");
; 106  : 			AIL_mem_free_lock(s);

  0004a	57		 push	 edi
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_mem_free_lock@4
  00051	5b		 pop	 ebx
  00052	5f		 pop	 edi

; 107  : 			return false;

  00053	32 c0		 xor	 al, al

; 111  : }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN7@ReadFromDi:

; 94   : 			}
; 95   : 			break;
; 96   : 
; 97   : 		case AILFILETYPE_MPEG_L3_AUDIO:
; 98   : 			{
; 99   : 				AIL_decompress_ASI(s + 1, *((S32 *) s), m_filename, &m_data, &m_size, 0);

  0005a	6a 00		 push	 0
  0005c	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  00062	50		 push	 eax
  00063	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  00069	50		 push	 eax
  0006a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0006d	50		 push	 eax
  0006e	ff 37		 push	 DWORD PTR [edi]
  00070	53		 push	 ebx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_decompress_ASI@24

; 100  : 				AIL_mem_free_lock(s);

  00077	57		 push	 edi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_mem_free_lock@4
  0007e	5b		 pop	 ebx
  0007f	5f		 pop	 edi

; 108  : 	}
; 109  : 
; 110  : 	return true;

  00080	b0 01		 mov	 al, 1

; 111  : }

  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN6@ReadFromDi:

; 86   : 			}
; 87   : 			break;
; 88   : 
; 89   : 		case AILFILETYPE_ADPCM_WAV:
; 90   : 			{
; 91   : 				AIL_WAV_info(s + 1, &info);

  00087	8d 45 d4	 lea	 eax, DWORD PTR _info$[ebp]
  0008a	50		 push	 eax
  0008b	53		 push	 ebx
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_WAV_info@8

; 92   : 				AIL_decompress_ADPCM(&info, &m_data, &m_size);

  00092	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  00098	50		 push	 eax
  00099	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  0009f	50		 push	 eax
  000a0	8d 45 d4	 lea	 eax, DWORD PTR _info$[ebp]
  000a3	50		 push	 eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_decompress_ADPCM@12

; 93   : 				AIL_mem_free_lock(s);

  000aa	57		 push	 edi
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_mem_free_lock@4
  000b1	5b		 pop	 ebx
  000b2	5f		 pop	 edi

; 108  : 	}
; 109  : 
; 110  : 	return true;

  000b3	b0 01		 mov	 al, 1

; 111  : }

  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN5@ReadFromDi:

; 80   : 	{
; 81   : 		case AILFILETYPE_PCM_WAV:
; 82   : 			{
; 83   : 				m_data = s;

  000ba	89 be 94 00 00
	00		 mov	 DWORD PTR [esi+148], edi

; 84   : 				m_size = *((S32 *) s);

  000c0	8b 07		 mov	 eax, DWORD PTR [edi]

; 85   : 				m_flag |= FLAG_DATA_SIZE;

  000c2	83 8e 98 00 00
	00 01		 or	 DWORD PTR [esi+152], 1
  000c9	5b		 pop	 ebx
  000ca	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 108  : 	}
; 109  : 
; 110  : 	return true;

  000d0	b0 01		 mov	 al, 1
  000d2	5f		 pop	 edi

; 111  : }

  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
?ReadFromDisk@CSoundData@@IAE_NXZ ENDP			; CSoundData::ReadFromDisk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?GetPlayTime@CSoundData@@QAEKXZ
_TEXT	SEGMENT
?GetPlayTime@CSoundData@@QAEKXZ PROC			; CSoundData::GetPlayTime, COMDAT
; _this$ = ecx

; 51   : 	return m_dwPlayTime;

  00000	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]

; 52   : }

  00006	c3		 ret	 0
?GetPlayTime@CSoundData@@QAEKXZ ENDP			; CSoundData::GetPlayTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?SetPlayTime@CSoundData@@QAEXK@Z
_TEXT	SEGMENT
_dwPlayTime$ = 8					; size = 4
?SetPlayTime@CSoundData@@QAEXK@Z PROC			; CSoundData::SetPlayTime, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   : 	m_dwPlayTime = dwPlayTime;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwPlayTime$[ebp]
  00006	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 57   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetPlayTime@CSoundData@@QAEXK@Z ENDP			; CSoundData::SetPlayTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?GetFileName@CSoundData@@QAEPBDXZ
_TEXT	SEGMENT
?GetFileName@CSoundData@@QAEPBDXZ PROC			; CSoundData::GetFileName, COMDAT
; _this$ = ecx

; 12   : 	return m_filename;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 13   : }

  00003	c3		 ret	 0
?GetFileName@CSoundData@@QAEPBDXZ ENDP			; CSoundData::GetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?GetAccessTime@CSoundData@@QAEKXZ
_TEXT	SEGMENT
?GetAccessTime@CSoundData@@QAEKXZ PROC			; CSoundData::GetAccessTime, COMDAT
; _this$ = ecx

; 61   : 	return m_dwAccessTime;

  00000	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]

; 62   : }

  00006	c3		 ret	 0
?GetAccessTime@CSoundData@@QAEKXZ ENDP			; CSoundData::GetAccessTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?Release@CSoundData@@QAEXXZ
_TEXT	SEGMENT
?Release@CSoundData@@QAEXXZ PROC			; CSoundData::Release, COMDAT
; _this$ = ecx

; 43   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 44   : 	assert(m_iRefCount != 0);
; 45   : 	--m_iRefCount;

  00003	ff 8e 84 00 00
	00		 dec	 DWORD PTR [esi+132]

; 46   : 	m_dwAccessTime = ELTimer_GetMSec();

  00009	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0000e	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00014	5e		 pop	 esi

; 47   : }

  00015	c3		 ret	 0
?Release@CSoundData@@QAEXXZ ENDP			; CSoundData::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?GetSize@CSoundData@@QAEKXZ
_TEXT	SEGMENT
?GetSize@CSoundData@@QAEKXZ PROC			; CSoundData::GetSize, COMDAT
; _this$ = ecx

; 39   : 	return m_size;

  00000	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]

; 40   : }

  00006	c3		 ret	 0
?GetSize@CSoundData@@QAEKXZ ENDP			; CSoundData::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?Get@CSoundData@@QAEPAXXZ
_TEXT	SEGMENT
?Get@CSoundData@@QAEPAXXZ PROC				; CSoundData::Get, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 25   : 	++m_iRefCount;

  00003	ff 86 84 00 00
	00		 inc	 DWORD PTR [esi+132]

; 26   : 	m_dwAccessTime = ELTimer_GetMSec();

  00009	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0000e	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 27   : 
; 28   : 	if (!m_data)

  00014	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  0001a	85 c0		 test	 eax, eax
  0001c	75 0d		 jne	 SHORT $LN2@Get

; 29   : 		ReadFromDisk();

  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?ReadFromDisk@CSoundData@@IAE_NXZ ; CSoundData::ReadFromDisk
  00025	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
$LN2@Get:

; 30   : 
; 31   : 	if (m_flag & FLAG_DATA_SIZE)

  0002b	f6 86 98 00 00
	00 01		 test	 BYTE PTR [esi+152], 1
  00032	5e		 pop	 esi
  00033	74 03		 je	 SHORT $LN4@Get

; 32   : 		return ((S32 *) m_data + 1);

  00035	83 c0 04	 add	 eax, 4
$LN4@Get:

; 33   : 	else
; 34   : 		return (m_data);
; 35   : }

  00038	c3		 ret	 0
?Get@CSoundData@@QAEPAXXZ ENDP				; CSoundData::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?Assign@CSoundData@@QAEXPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Assign@CSoundData@@QAEXPBD@Z PROC			; CSoundData::Assign, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 17   : 	assert(m_assigned == false);
; 18   : 
; 19   : 	strncpy(m_filename, filename, sizeof(m_filename)-1);

  00006	6a 7f		 push	 127			; 0000007fH
  00008	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _strncpy
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20   : 	m_assigned = true;

  00017	c6 86 9c 00 00
	00 01		 mov	 BYTE PTR [esi+156], 1
  0001e	5e		 pop	 esi

; 21   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Assign@CSoundData@@QAEXPBD@Z ENDP			; CSoundData::Assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ??1CSoundData@@UAE@XZ
_TEXT	SEGMENT
??1CSoundData@@UAE@XZ PROC				; CSoundData::~CSoundData, COMDAT
; _this$ = ecx

; 210  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSoundData@@6B@

; 211  : 	Destroy();

  00006	e9 00 00 00 00	 jmp	 ?Destroy@CSoundData@@IAEXXZ ; CSoundData::Destroy
??1CSoundData@@UAE@XZ ENDP				; CSoundData::~CSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ??0CSoundData@@QAE@XZ
_TEXT	SEGMENT
??0CSoundData@@QAE@XZ PROC				; CSoundData::CSoundData, COMDAT
; _this$ = ecx

; 206  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundData@@6B@

; 200  : m_iRefCount(0),

  00009	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0

; 201  : m_dwPlayTime(0),
; 202  : m_dwAccessTime(ELTimer_GetMSec()),

  00013	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00018	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 207  : }

  0001e	8b c6		 mov	 eax, esi
  00020	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  0002a	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  00034	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  0003e	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00048	c6 86 9c 00 00
	00 00		 mov	 BYTE PTR [esi+156], 0
  0004f	5e		 pop	 esi
  00050	c3		 ret	 0
??0CSoundData@@QAE@XZ ENDP				; CSoundData::CSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundData.cpp
;	COMDAT ?SetPackMode@CSoundData@@SAXXZ
_TEXT	SEGMENT
?SetPackMode@CSoundData@@SAXXZ PROC			; CSoundData::SetPackMode, COMDAT

; 182  : 	// if sound data reads from pack file, the callbacks of the MSS should be changed.
; 183  : 	AIL_set_file_callbacks(open_callback, close_callback, seek_callback, read_callback);

  00000	68 00 00 00 00	 push	 OFFSET ?read_callback@CSoundData@@CGKKPAXK@Z ; CSoundData::read_callback
  00005	68 00 00 00 00	 push	 OFFSET ?seek_callback@CSoundData@@CGJKJK@Z ; CSoundData::seek_callback
  0000a	68 00 00 00 00	 push	 OFFSET ?close_callback@CSoundData@@CGXK@Z ; CSoundData::close_callback
  0000f	68 00 00 00 00	 push	 OFFSET ?open_callback@CSoundData@@CGKPBDPAK@Z ; CSoundData::open_callback
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_file_callbacks@16

; 184  : 
; 185  : 	for (int i = 0; i < SOUND_FILE_MAX_NUM; ++i)

  0001a	33 c0		 xor	 eax, eax

; 186  : 		ms_isSoundFile[i] = false;

  0001c	83 f8 05	 cmp	 eax, 5
$LN13@SetPackMod:
  0001f	73 0e		 jae	 SHORT $LN6@SetPackMod
  00021	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?ms_isSoundFile@CSoundData@@0PA_NA[eax], 0
  00028	40		 inc	 eax
  00029	83 f8 05	 cmp	 eax, 5
  0002c	7c f1		 jl	 SHORT $LN13@SetPackMod

; 187  : }

  0002e	c3		 ret	 0
$LN6@SetPackMod:

; 186  : 		ms_isSoundFile[i] = false;

  0002f	e9 00 00 00 00	 jmp	 ___report_rangecheckfailure
?SetPackMode@CSoundData@@SAXXZ ENDP			; CSoundData::SetPackMode
_TEXT	ENDS
END
