; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1ISoundInstance@@UAE@XZ			; ISoundInstance::~ISoundInstance
PUBLIC	??_GISoundInstance@@UAEPAXI@Z			; ISoundInstance::`scalar deleting destructor'
PUBLIC	??0CSoundInstance2D@@QAE@XZ			; CSoundInstance2D::CSoundInstance2D
PUBLIC	??1CSoundInstance2D@@UAE@XZ			; CSoundInstance2D::~CSoundInstance2D
PUBLIC	?Initialize@CSoundInstance2D@@UAE_NXZ		; CSoundInstance2D::Initialize
PUBLIC	?Destroy@CSoundInstance2D@@UAEXXZ		; CSoundInstance2D::Destroy
PUBLIC	?SetSound@CSoundInstance2D@@UAE_NPAVCSoundData@@@Z ; CSoundInstance2D::SetSound
PUBLIC	?Play@CSoundInstance2D@@UBEXHK@Z		; CSoundInstance2D::Play
PUBLIC	?Pause@CSoundInstance2D@@UBEXXZ			; CSoundInstance2D::Pause
PUBLIC	?Resume@CSoundInstance2D@@UBEXXZ		; CSoundInstance2D::Resume
PUBLIC	?Stop@CSoundInstance2D@@UAEXXZ			; CSoundInstance2D::Stop
PUBLIC	?GetVolume@CSoundInstance2D@@UBEXAAM@Z		; CSoundInstance2D::GetVolume
PUBLIC	?SetVolume@CSoundInstance2D@@UBEXM@Z		; CSoundInstance2D::SetVolume
PUBLIC	?IsDone@CSoundInstance2D@@UBE_NXZ		; CSoundInstance2D::IsDone
PUBLIC	?SetPosition@CSoundInstance2D@@UBEXMMM@Z	; CSoundInstance2D::SetPosition
PUBLIC	?SetOrientation@CSoundInstance2D@@UBEXMMMMMM@Z	; CSoundInstance2D::SetOrientation
PUBLIC	?SetVelocity@CSoundInstance2D@@UBEXMMMM@Z	; CSoundInstance2D::SetVelocity
PUBLIC	??_GCSoundInstance2D@@UAEPAXI@Z			; CSoundInstance2D::`scalar deleting destructor'
PUBLIC	??_7ISoundInstance@@6B@				; ISoundInstance::`vftable'
PUBLIC	??_7CSoundInstance2D@@6B@			; CSoundInstance2D::`vftable'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs@			; `string'
PUBLIC	??_R4ISoundInstance@@6B@			; ISoundInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVISoundInstance@@@8			; ISoundInstance `RTTI Type Descriptor'
PUBLIC	??_R3ISoundInstance@@8				; ISoundInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISoundInstance@@8				; ISoundInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISoundInstance@@8			; ISoundInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSoundBase@@8			; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSoundBase@@@8				; CSoundBase `RTTI Type Descriptor'
PUBLIC	??_R3CSoundBase@@8				; CSoundBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundBase@@8				; CSoundBase::`RTTI Base Class Array'
PUBLIC	??_R4CSoundInstance2D@@6B@			; CSoundInstance2D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundInstance2D@@@8			; CSoundInstance2D `RTTI Type Descriptor'
PUBLIC	??_R3CSoundInstance2D@@8			; CSoundInstance2D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundInstance2D@@8			; CSoundInstance2D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundInstance2D@@8		; CSoundInstance2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__AIL_last_error@0:PROC
EXTRN	__imp__AIL_allocate_sample_handle@4:PROC
EXTRN	__imp__AIL_release_sample_handle@4:PROC
EXTRN	__imp__AIL_init_sample@4:PROC
EXTRN	__imp__AIL_set_sample_file@12:PROC
EXTRN	__imp__AIL_start_sample@4:PROC
EXTRN	__imp__AIL_stop_sample@4:PROC
EXTRN	__imp__AIL_resume_sample@4:PROC
EXTRN	__imp__AIL_end_sample@4:PROC
EXTRN	__imp__AIL_set_sample_volume_pan@12:PROC
EXTRN	__imp__AIL_set_sample_loop_count@8:PROC
EXTRN	__imp__AIL_sample_status@4:PROC
EXTRN	__imp__AIL_sample_volume_pan@12:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?Get@CSoundData@@QAEPAXXZ:PROC			; CSoundData::Get
EXTRN	?GetSize@CSoundData@@QAEKXZ:PROC		; CSoundData::GetSize
EXTRN	?Release@CSoundData@@QAEXXZ:PROC		; CSoundData::Release
EXTRN	?GetFileName@CSoundData@@QAEPBDXZ:PROC		; CSoundData::GetFileName
EXTRN	??0CSoundBase@@QAE@XZ:PROC			; CSoundBase::CSoundBase
EXTRN	??1CSoundBase@@UAE@XZ:PROC			; CSoundBase::~CSoundBase
EXTRN	??_EISoundInstance@@UAEPAXI@Z:PROC		; ISoundInstance::`vector deleting destructor'
EXTRN	??_ECSoundInstance2D@@UAEPAXI@Z:PROC		; CSoundInstance2D::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_DIGDriver@CSoundBase@@1PAU_DIG_DRIVER@@A:DWORD ; CSoundBase::ms_DIGDriver
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundInstance2D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundInstance2D@@8 DD FLAT:??_R0?AVCSoundInstance2D@@@8 ; CSoundInstance2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundInstance2D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundInstance2D@@8
rdata$r	SEGMENT
??_R2CSoundInstance2D@@8 DD FLAT:??_R1A@?0A@EA@CSoundInstance2D@@8 ; CSoundInstance2D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISoundInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSoundInstance2D@@8
rdata$r	SEGMENT
??_R3CSoundInstance2D@@8 DD 00H				; CSoundInstance2D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CSoundInstance2D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundInstance2D@@@8
data$r	SEGMENT
??_R0?AVCSoundInstance2D@@@8 DD FLAT:??_7type_info@@6B@	; CSoundInstance2D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundInstance2D@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSoundInstance2D@@6B@
rdata$r	SEGMENT
??_R4CSoundInstance2D@@6B@ DD 00H			; CSoundInstance2D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundInstance2D@@@8
	DD	FLAT:??_R3CSoundInstance2D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundBase@@8
rdata$r	SEGMENT
??_R2CSoundBase@@8 DD FLAT:??_R1A@?0A@EA@CSoundBase@@8	; CSoundBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSoundBase@@8
rdata$r	SEGMENT
??_R3CSoundBase@@8 DD 00H				; CSoundBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundBase@@@8
data$r	SEGMENT
??_R0?AVCSoundBase@@@8 DD FLAT:??_7type_info@@6B@	; CSoundBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundBase@@8 DD FLAT:??_R0?AVCSoundBase@@@8 ; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISoundInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISoundInstance@@8 DD FLAT:??_R0?AVISoundInstance@@@8 ; ISoundInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2ISoundInstance@@8
rdata$r	SEGMENT
??_R2ISoundInstance@@8 DD FLAT:??_R1A@?0A@EA@ISoundInstance@@8 ; ISoundInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R3ISoundInstance@@8
rdata$r	SEGMENT
??_R3ISoundInstance@@8 DD 00H				; ISoundInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVISoundInstance@@@8
data$r	SEGMENT
??_R0?AVISoundInstance@@@8 DD FLAT:??_7type_info@@6B@	; ISoundInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVISoundInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4ISoundInstance@@6B@
rdata$r	SEGMENT
??_R4ISoundInstance@@6B@ DD 00H				; ISoundInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVISoundInstance@@@8
	DD	FLAT:??_R3ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CSoundInstance2D@@6B@
CONST	SEGMENT
??_7CSoundInstance2D@@6B@ DD FLAT:??_R4CSoundInstance2D@@6B@ ; CSoundInstance2D::`vftable'
	DD	FLAT:??_ECSoundInstance2D@@UAEPAXI@Z
	DD	FLAT:?Initialize@CSoundInstance2D@@UAE_NXZ
	DD	FLAT:?Destroy@CSoundInstance2D@@UAEXXZ
	DD	FLAT:?SetSound@CSoundInstance2D@@UAE_NPAVCSoundData@@@Z
	DD	FLAT:?Play@CSoundInstance2D@@UBEXHK@Z
	DD	FLAT:?Pause@CSoundInstance2D@@UBEXXZ
	DD	FLAT:?Resume@CSoundInstance2D@@UBEXXZ
	DD	FLAT:?Stop@CSoundInstance2D@@UAEXXZ
	DD	FLAT:?GetVolume@CSoundInstance2D@@UBEXAAM@Z
	DD	FLAT:?SetVolume@CSoundInstance2D@@UBEXM@Z
	DD	FLAT:?IsDone@CSoundInstance2D@@UBE_NXZ
	DD	FLAT:?SetPosition@CSoundInstance2D@@UBEXMMM@Z
	DD	FLAT:?SetOrientation@CSoundInstance2D@@UBEXMMMMMM@Z
	DD	FLAT:?SetVelocity@CSoundInstance2D@@UBEXMMMM@Z
CONST	ENDS
;	COMDAT ??_7ISoundInstance@@6B@
CONST	SEGMENT
??_7ISoundInstance@@6B@ DD FLAT:??_R4ISoundInstance@@6B@ ; ISoundInstance::`vftable'
	DD	FLAT:??_EISoundInstance@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSoundInstance2D@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundInstance2D@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundInstance2D@@UAEPAXI@Z PROC			; CSoundInstance2D::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundInstance2D@@UAE@XZ ; CSoundInstance2D::~CSoundInstance2D
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSoundInstance2D@@UAEPAXI@Z ENDP			; CSoundInstance2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?SetVelocity@CSoundInstance2D@@UBEXMMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fMagnitude$ = 20					; size = 4
?SetVelocity@CSoundInstance2D@@UBEXMMMM@Z PROC		; CSoundInstance2D::SetVelocity, COMDAT
; _this$ = ecx

; 115  : 	assert(!"must not call this method");
; 116  : }

  00000	c2 10 00	 ret	 16			; 00000010H
?SetVelocity@CSoundInstance2D@@UBEXMMMM@Z ENDP		; CSoundInstance2D::SetVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?SetOrientation@CSoundInstance2D@@UBEXMMMMMM@Z
_TEXT	SEGMENT
_x_face$ = 8						; size = 4
_y_face$ = 12						; size = 4
_z_face$ = 16						; size = 4
_x_normal$ = 20						; size = 4
_y_normal$ = 24						; size = 4
_z_normal$ = 28						; size = 4
?SetOrientation@CSoundInstance2D@@UBEXMMMMMM@Z PROC	; CSoundInstance2D::SetOrientation, COMDAT
; _this$ = ecx

; 110  : 	assert(!"must not call this method");
; 111  : }

  00000	c2 18 00	 ret	 24			; 00000018H
?SetOrientation@CSoundInstance2D@@UBEXMMMMMM@Z ENDP	; CSoundInstance2D::SetOrientation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?SetPosition@CSoundInstance2D@@UBEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CSoundInstance2D@@UBEXMMM@Z PROC		; CSoundInstance2D::SetPosition, COMDAT
; _this$ = ecx

; 104  : 	assert(!"must not call this method");
; 105  : }

  00000	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSoundInstance2D@@UBEXMMM@Z ENDP		; CSoundInstance2D::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?IsDone@CSoundInstance2D@@UBE_NXZ
_TEXT	SEGMENT
?IsDone@CSoundInstance2D@@UBE_NXZ PROC			; CSoundInstance2D::IsDone, COMDAT
; _this$ = ecx

; 66   : 	return AIL_sample_status(m_sample) == SMP_DONE;

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_sample_status@4
  00009	83 f8 02	 cmp	 eax, 2
  0000c	0f 94 c0	 sete	 al

; 67   : }

  0000f	c3		 ret	 0
?IsDone@CSoundInstance2D@@UBE_NXZ ENDP			; CSoundInstance2D::IsDone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?SetVolume@CSoundInstance2D@@UBEXM@Z
_TEXT	SEGMENT
_volume$ = 8						; size = 4
?SetVolume@CSoundInstance2D@@UBEXM@Z PROC		; CSoundInstance2D::SetVolume, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 	volume = max(0.0f, min(1.0f, volume));

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000b	0f 57 c9	 xorps	 xmm1, xmm1
  0000e	f3 0f 5d 45 08	 minss	 xmm0, DWORD PTR _volume$[ebp]
  00013	0f 2f c8	 comiss	 xmm1, xmm0
  00016	77 03		 ja	 SHORT $LN5@SetVolume
  00018	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@SetVolume:

; 99   : 	AIL_set_sample_volume_pan(m_sample, volume, 0.5f);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	c7 44 24 04 00
	00 00 3f	 mov	 DWORD PTR [esp+4], 1056964608 ; 3f000000H
  00026	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0002b	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_sample_volume_pan@12

; 100  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?SetVolume@CSoundInstance2D@@UBEXM@Z ENDP		; CSoundInstance2D::SetVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?GetVolume@CSoundInstance2D@@UBEXAAM@Z
_TEXT	SEGMENT
_rfVolume$ = 8						; size = 4
?GetVolume@CSoundInstance2D@@UBEXAAM@Z PROC		; CSoundInstance2D::GetVolume, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	AIL_sample_volume_pan(m_sample, &rfVolume, NULL);

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _rfVolume$[ebp]
  00008	ff 71 04	 push	 DWORD PTR [ecx+4]
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_sample_volume_pan@12

; 94   : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetVolume@CSoundInstance2D@@UBEXAAM@Z ENDP		; CSoundInstance2D::GetVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Stop@CSoundInstance2D@@UAEXXZ
_TEXT	SEGMENT
?Stop@CSoundInstance2D@@UAEXXZ PROC			; CSoundInstance2D::Stop, COMDAT
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 87   : 	AIL_end_sample(m_sample);

  00003	ff 76 04	 push	 DWORD PTR [esi+4]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_end_sample@4

; 88   : 	m_sample = NULL;

  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00013	5e		 pop	 esi

; 89   : }

  00014	c3		 ret	 0
?Stop@CSoundInstance2D@@UAEXXZ ENDP			; CSoundInstance2D::Stop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Resume@CSoundInstance2D@@UBEXXZ
_TEXT	SEGMENT
?Resume@CSoundInstance2D@@UBEXXZ PROC			; CSoundInstance2D::Resume, COMDAT
; _this$ = ecx

; 82   : 	AIL_resume_sample(m_sample);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_resume_sample@4

; 83   : }

  00009	c3		 ret	 0
?Resume@CSoundInstance2D@@UBEXXZ ENDP			; CSoundInstance2D::Resume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Pause@CSoundInstance2D@@UBEXXZ
_TEXT	SEGMENT
?Pause@CSoundInstance2D@@UBEXXZ PROC			; CSoundInstance2D::Pause, COMDAT
; _this$ = ecx

; 77   : 	AIL_stop_sample(m_sample);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_stop_sample@4

; 78   : }

  00009	c3		 ret	 0
?Pause@CSoundInstance2D@@UBEXXZ ENDP			; CSoundInstance2D::Pause
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Play@CSoundInstance2D@@UBEXHK@Z
_TEXT	SEGMENT
_iLoopCount$ = 8					; size = 4
_dwPlayCycleTimeLimit$ = 12				; size = 4
?Play@CSoundInstance2D@@UBEXHK@Z PROC			; CSoundInstance2D::Play, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 71   :     AIL_set_sample_loop_count(m_sample, iLoopCount);

  00004	ff 75 08	 push	 DWORD PTR _iLoopCount$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 76 04	 push	 DWORD PTR [esi+4]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_sample_loop_count@8

; 72   : 	AIL_start_sample(m_sample);

  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_start_sample@4
  0001b	5e		 pop	 esi

; 73   : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?Play@CSoundInstance2D@@UBEXHK@Z ENDP			; CSoundInstance2D::Play
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?SetSound@CSoundInstance2D@@UAE_NPAVCSoundData@@@Z
_TEXT	SEGMENT
_pSoundData$ = 8					; size = 4
?SetSound@CSoundInstance2D@@UAE_NPAVCSoundData@@@Z PROC	; CSoundInstance2D::SetSound, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 35   : 	assert(m_sample != NULL && pSoundData != NULL);
; 36   : 
; 37   : 	LPVOID lpData = pSoundData->Get();

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pSoundData$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 ?Get@CSoundData@@QAEPAXXZ ; CSoundData::Get

; 38   : 
; 39   : 	AIL_init_sample(m_sample);

  00012	ff 73 04	 push	 DWORD PTR [ebx+4]
  00015	8b f0		 mov	 esi, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_init_sample@4

; 40   : 
; 41   :     if (AIL_set_sample_file(m_sample, lpData, pSoundData->GetSize()) == NULL)

  0001d	8b cf		 mov	 ecx, edi
  0001f	e8 00 00 00 00	 call	 ?GetSize@CSoundData@@QAEKXZ ; CSoundData::GetSize
  00024	50		 push	 eax
  00025	56		 push	 esi
  00026	ff 73 04	 push	 DWORD PTR [ebx+4]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_sample_file@12
  0002f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00032	85 c0		 test	 eax, eax
  00034	75 3c		 jne	 SHORT $LN2@SetSound

; 42   : 	{
; 43   : 		if (m_pSoundData != NULL)

  00036	85 c9		 test	 ecx, ecx
  00038	74 0c		 je	 SHORT $LN3@SetSound

; 44   : 		{
; 45   : 			m_pSoundData->Release();

  0003a	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release

; 46   : 			m_pSoundData = NULL;

  0003f	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN3@SetSound:

; 47   : 		}
; 48   : 
; 49   : 		pSoundData->Release();

  00046	8b cf		 mov	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release

; 50   : 		TraceError("%s: %s", AIL_last_error(), pSoundData->GetFileName());

  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?GetFileName@CSoundData@@QAEPBDXZ ; CSoundData::GetFileName
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_last_error@0
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
  00061	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		return false;

  00069	32 c0		 xor	 al, al
  0006b	5f		 pop	 edi

; 62   : }

  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN2@SetSound:

; 52   : 	}
; 53   : 
; 54   : 	if (m_pSoundData != NULL)

  00072	85 c9		 test	 ecx, ecx
  00074	74 05		 je	 SHORT $LN4@SetSound

; 55   : 	{
; 56   : 		m_pSoundData->Release();

  00076	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release
$LN4@SetSound:

; 57   : 		m_pSoundData = NULL;
; 58   : 	}
; 59   : 
; 60   : 	m_pSoundData = pSoundData;

  0007b	89 7b 08	 mov	 DWORD PTR [ebx+8], edi

; 61   : 	return true;

  0007e	b0 01		 mov	 al, 1
  00080	5f		 pop	 edi

; 62   : }

  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?SetSound@CSoundInstance2D@@UAE_NPAVCSoundData@@@Z ENDP	; CSoundInstance2D::SetSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Destroy@CSoundInstance2D@@UAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundInstance2D@@UAEXXZ PROC			; CSoundInstance2D::Destroy, COMDAT
; _this$ = ecx

; 14   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 15   : 	SAFE_RELEASE(m_pSoundData);

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0c		 je	 SHORT $LN2@Destroy
  0000a	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release
  0000f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Destroy:

; 16   : 
; 17   : 	if (m_sample)

  00016	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00019	85 c0		 test	 eax, eax
  0001b	74 0e		 je	 SHORT $LN3@Destroy

; 18   : 	{
; 19   : 		AIL_release_sample_handle(m_sample);

  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_release_sample_handle@4

; 20   : 		m_sample = NULL;

  00024	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@Destroy:

; 21   : 	}
; 22   : }

  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
?Destroy@CSoundInstance2D@@UAEXXZ ENDP			; CSoundInstance2D::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ?Initialize@CSoundInstance2D@@UAE_NXZ
_TEXT	SEGMENT
?Initialize@CSoundInstance2D@@UAE_NXZ PROC		; CSoundInstance2D::Initialize, COMDAT
; _this$ = ecx

; 25   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 26   : 	if (m_sample)

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 04		 je	 SHORT $LN2@Initialize

; 27   : 		return true;

  00009	b0 01		 mov	 al, 1
  0000b	5e		 pop	 esi

; 31   : }

  0000c	c3		 ret	 0
$LN2@Initialize:

; 28   : 
; 29   : 	m_sample = AIL_allocate_sample_handle(ms_DIGDriver);

  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_DIGDriver@CSoundBase@@1PAU_DIG_DRIVER@@A ; CSoundBase::ms_DIGDriver
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_allocate_sample_handle@4

; 30   : 	return m_sample ? true : false;

  00019	85 c0		 test	 eax, eax
  0001b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001e	5e		 pop	 esi
  0001f	0f 95 c0	 setne	 al

; 31   : }

  00022	c3		 ret	 0
?Initialize@CSoundInstance2D@@UAE_NXZ ENDP		; CSoundInstance2D::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ??1CSoundInstance2D@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSoundInstance2D@@UAE@XZ PROC			; CSoundInstance2D::~CSoundInstance2D, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSoundInstance2D@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundInstance2D@@6B@

; 10   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CSoundInstance2D@@UAEXXZ ; CSoundInstance2D::Destroy
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h

; 10   : 	virtual ~ISoundInstance() {}

  00030	8b ce		 mov	 ecx, esi
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ISoundInstance@@6B@
  00038	e8 00 00 00 00	 call	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp

; 11   : }

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
  00051	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSoundInstance2D@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSoundInstance2D@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSoundInstance2D@@UAE@XZ ENDP			; CSoundInstance2D::~CSoundInstance2D
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp
;	COMDAT ??0CSoundInstance2D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSoundInstance2D@@QAE@XZ PROC			; CSoundInstance2D::CSoundInstance2D, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h

; 9    : 	ISoundInstance() {}

  0000a	e8 00 00 00 00	 call	 ??0CSoundBase@@QAE@XZ	; CSoundBase::CSoundBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance2D.cpp

; 5    : {

  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundInstance2D@@6B@

; 6    : }

  00015	8b c6		 mov	 eax, esi
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	5e		 pop	 esi
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CSoundInstance2D@@QAE@XZ ENDP			; CSoundInstance2D::CSoundInstance2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
;	COMDAT ??_GISoundInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GISoundInstance@@UAEPAXI@Z PROC			; ISoundInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	virtual ~ISoundInstance() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ISoundInstance@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0b		 je	 SHORT $LN7@scalar
  00017	6a 04		 push	 4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GISoundInstance@@UAEPAXI@Z ENDP			; ISoundInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
;	COMDAT ??1ISoundInstance@@UAE@XZ
_TEXT	SEGMENT
??1ISoundInstance@@UAE@XZ PROC				; ISoundInstance::~ISoundInstance, COMDAT
; _this$ = ecx

; 10   : 	virtual ~ISoundInstance() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ISoundInstance@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
??1ISoundInstance@@UAE@XZ ENDP				; ISoundInstance::~ISoundInstance
_TEXT	ENDS
END
