; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$CSingleton@VCSoundManager@@@@UAE@XZ	; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
PUBLIC	??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z	; CSingleton<CSoundManager>::`scalar deleting destructor'
PUBLIC	??0CSoundManager@@QAE@XZ			; CSoundManager::CSoundManager
PUBLIC	??1CSoundManager@@UAE@XZ			; CSoundManager::~CSoundManager
PUBLIC	?Create@CSoundManager@@QAEHXZ			; CSoundManager::Create
PUBLIC	?Destroy@CSoundManager@@QAEXXZ			; CSoundManager::Destroy
PUBLIC	?SetPosition@CSoundManager@@QAEXMMM@Z		; CSoundManager::SetPosition
PUBLIC	?SetDirection@CSoundManager@@QAEXMMMMMM@Z	; CSoundManager::SetDirection
PUBLIC	?Update@CSoundManager@@QAEXXZ			; CSoundManager::Update
PUBLIC	?GetSoundScale@CSoundManager@@QAEMXZ		; CSoundManager::GetSoundScale
PUBLIC	?SetSoundScale@CSoundManager@@QAEXM@Z		; CSoundManager::SetSoundScale
PUBLIC	?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z	; CSoundManager::SetAmbienceSoundScale
PUBLIC	?SetSoundVolume@CSoundManager@@QAEXM@Z		; CSoundManager::SetSoundVolume
PUBLIC	?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z	; CSoundManager::SetSoundVolumeRatio
PUBLIC	?SetMusicVolume@CSoundManager@@QAEXM@Z		; CSoundManager::SetMusicVolume
PUBLIC	?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z	; CSoundManager::SetSoundVolumeGrade
PUBLIC	?SaveVolume@CSoundManager@@QAEXXZ		; CSoundManager::SaveVolume
PUBLIC	?RestoreVolume@CSoundManager@@QAEXXZ		; CSoundManager::RestoreVolume
PUBLIC	?GetSoundVolume@CSoundManager@@QAEMXZ		; CSoundManager::GetSoundVolume
PUBLIC	?GetMusicVolume@CSoundManager@@QAEMXZ		; CSoundManager::GetMusicVolume
PUBLIC	?PlaySound2D@CSoundManager@@QAEXPBD@Z		; CSoundManager::PlaySound2D
PUBLIC	?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z	; CSoundManager::PlaySound3D
PUBLIC	?StopSound3D@CSoundManager@@QAEXH@Z		; CSoundManager::StopSound3D
PUBLIC	?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ; CSoundManager::PlayAmbienceSound3D
PUBLIC	?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlayCharacterSound3D
PUBLIC	?SetSoundVolume3D@CSoundManager@@QAEXHM@Z	; CSoundManager::SetSoundVolume3D
PUBLIC	?StopAllSound3D@CSoundManager@@QAEXXZ		; CSoundManager::StopAllSound3D
PUBLIC	?PlayMusic@CSoundManager@@QAEXPBD@Z		; CSoundManager::PlayMusic
PUBLIC	?FadeInMusic@CSoundManager@@QAEXPBDM@Z		; CSoundManager::FadeInMusic
PUBLIC	?FadeOutMusic@CSoundManager@@QAEXPBDM@Z		; CSoundManager::FadeOutMusic
PUBLIC	?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z	; CSoundManager::FadeLimitOutMusic
PUBLIC	?FadeOutAllMusic@CSoundManager@@QAEXXZ		; CSoundManager::FadeOutAllMusic
PUBLIC	?FadeAll@CSoundManager@@QAEXXZ			; CSoundManager::FadeAll
PUBLIC	?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundData
PUBLIC	?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundData
PUBLIC	?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z ; CSoundManager::UpdateSoundInstance
PUBLIC	?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundInstance
PUBLIC	?PlayMusic@CSoundManager@@IAEXKPBDMM@Z		; CSoundManager::PlayMusic
PUBLIC	?StopMusic@CSoundManager@@IAEXK@Z		; CSoundManager::StopMusic
PUBLIC	?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z	; CSoundManager::GetMusicIndex
PUBLIC	?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ; CSoundManager::__ConvertGradeVolumeToApplyVolume
PUBLIC	?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume
PUBLIC	?__SetMusicVolume@CSoundManager@@IAEXM@Z	; CSoundManager::__SetMusicVolume
PUBLIC	?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance2D
PUBLIC	?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance3D
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
PUBLIC	??_GCSoundManager@@UAEPAXI@Z			; CSoundManager::`scalar deleting destructor'
PUBLIC	?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCSoundManager@@@@6B@		; CSingleton<CSoundManager>::`vftable'
PUBLIC	?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
PUBLIC	?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
PUBLIC	?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
PUBLIC	??_7CSoundManager@@6B@				; CSoundManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@ ; `string'
PUBLIC	??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@ ; `string'
PUBLIC	??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@ ; `string'
PUBLIC	??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@ ; `string'
PUBLIC	??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@ ; `string'
PUBLIC	??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@ ; `string'
PUBLIC	??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSoundManager@@6B@				; CSoundManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundManager@@@8			; CSoundManager `RTTI Type Descriptor'
PUBLIC	??_R3CSoundManager@@8				; CSoundManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundManager@@8				; CSoundManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundManager@@8			; CSoundManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8	; CSingleton<CSoundManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCSoundManager@@@@@8	; CSingleton<CSoundManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCSoundManager@@@@8		; CSingleton<CSoundManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCSoundManager@@@@8		; CSingleton<CSoundManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCSoundManager@@@@6B@		; CSingleton<CSoundManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f800000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40a00000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?fMIN@@YAMMM@Z:PROC				; fMIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CSoundManagerStream@@QAE@XZ:PROC		; CSoundManagerStream::CSoundManagerStream
EXTRN	??1CSoundManagerStream@@UAE@XZ:PROC		; CSoundManagerStream::~CSoundManagerStream
EXTRN	?Initialize@CSoundManagerStream@@QAE_NXZ:PROC	; CSoundManagerStream::Initialize
EXTRN	?Destroy@CSoundManagerStream@@QAEXXZ:PROC	; CSoundManagerStream::Destroy
EXTRN	?SetInstance@CSoundManagerStream@@QAE_NKPBD@Z:PROC ; CSoundManagerStream::SetInstance
EXTRN	?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z:PROC ; CSoundManagerStream::GetInstance
EXTRN	??0CSoundManager2D@@QAE@XZ:PROC			; CSoundManager2D::CSoundManager2D
EXTRN	??1CSoundManager2D@@UAE@XZ:PROC			; CSoundManager2D::~CSoundManager2D
EXTRN	?Initialize@CSoundManager2D@@QAE_NXZ:PROC	; CSoundManager2D::Initialize
EXTRN	?Destroy@CSoundManager2D@@QAEXXZ:PROC		; CSoundManager2D::Destroy
EXTRN	?GetInstance@CSoundManager2D@@QAEPAVISoundInstance@@PBD@Z:PROC ; CSoundManager2D::GetInstance
EXTRN	??0CSoundManager3D@@QAE@XZ:PROC			; CSoundManager3D::CSoundManager3D
EXTRN	??1CSoundManager3D@@UAE@XZ:PROC			; CSoundManager3D::~CSoundManager3D
EXTRN	?Initialize@CSoundManager3D@@QAE_NXZ:PROC	; CSoundManager3D::Initialize
EXTRN	?Destroy@CSoundManager3D@@QAEXXZ:PROC		; CSoundManager3D::Destroy
EXTRN	?SetInstance@CSoundManager3D@@QAEHPBD@Z:PROC	; CSoundManager3D::SetInstance
EXTRN	?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z:PROC ; CSoundManager3D::GetInstance
EXTRN	?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z:PROC ; CSoundManager3D::SetListenerDirection
EXTRN	?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z:PROC ; CSoundManager3D::SetListenerPosition
EXTRN	??_E?$CSingleton@VCSoundManager@@@@UAEPAXI@Z:PROC ; CSingleton<CSoundManager>::`vector deleting destructor'
EXTRN	??_ECSoundManager@@UAEPAXI@Z:PROC		; CSoundManager::`vector deleting destructor'
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A DD 01H DUP (?) ; CSingleton<CSoundManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A DB 034H DUP (?) ; CSoundManager::ms_SoundManager2D
?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A DB 01acH DUP (?) ; CSoundManager::ms_SoundManager3D
?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A DB 01cH DUP (?) ; CSoundManager::ms_SoundManagerStream
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_SoundManager2D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ; ??ms_SoundManager2D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCSoundManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCSoundManager@@@@6B@ DD 00H		; CSingleton<CSoundManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCSoundManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCSoundManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8 ; CSingleton<CSoundManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCSoundManager@@@@8 DD 00H		; CSingleton<CSoundManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCSoundManager@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCSoundManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CSoundManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCSoundManager@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCSoundManager@@@@@8 ; CSingleton<CSoundManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundManager@@8 DD FLAT:??_R0?AVCSoundManager@@@8 ; CSoundManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundManager@@8
rdata$r	SEGMENT
??_R2CSoundManager@@8 DD FLAT:??_R1A@?0A@EA@CSoundManager@@8 ; CSoundManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CSoundManager@@8
rdata$r	SEGMENT
??_R3CSoundManager@@8 DD 00H				; CSoundManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundManager@@@8
data$r	SEGMENT
??_R0?AVCSoundManager@@@8 DD FLAT:??_7type_info@@6B@	; CSoundManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSoundManager@@6B@
rdata$r	SEGMENT
??_R4CSoundManager@@6B@ DD 00H				; CSoundManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundManager@@@8
	DD	FLAT:??_R3CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@
CONST	SEGMENT
??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@ DB 'CSoundManage'
	DB	'r::PlayMusic - There is no stream sound instance : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@
CONST	SEGMENT
??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@ DB 'CSoundManage'
	DB	'r::PlayMusic - Failed to load stream sound : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
CONST	SEGMENT
??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@ DB 'FadeOut'
	DB	'Music: %s - ERROR OUT OF RANGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
CONST	SEGMENT
??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@ DB 'FadeOut'
	DB	'Music: %s - ERROR NOT EXIST', 00H		; `string'
CONST	ENDS
;	COMDAT ?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA
_DATA	SEGMENT
?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA DD 04bbebc20r ; 2.5e+07 ; `CSoundManager::PlayCharacterSound3D'::`7'::s_fLimitDistance
_DATA	ENDS
;	COMDAT ??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@
CONST	SEGMENT
??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@ DB 'CSoundManage'
	DB	'r::Create - Sound3D::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@
CONST	SEGMENT
??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@ DB 'CSoundManage'
	DB	'r::Create - SoundStream::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@
CONST	SEGMENT
??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@ DB 'CSoundManage'
	DB	'r::Create - Sound2D::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CSoundManager@@6B@
CONST	SEGMENT
??_7CSoundManager@@6B@ DD FLAT:??_R4CSoundManager@@6B@	; CSoundManager::`vftable'
	DD	FLAT:??_ECSoundManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCSoundManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCSoundManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCSoundManager@@@@6B@ ; CSingleton<CSoundManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCSoundManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$0
__ehfuncinfo$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z$1
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z$0
__ehfuncinfo$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z$0
__ehfuncinfo$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$7
__ehfuncinfo$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSoundManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSoundManager@@QAE@XZ$0
__ehfuncinfo$??0CSoundManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSoundManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_SoundManager3D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ; ??ms_SoundManager3D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??ms_SoundManagerStream$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ; ??ms_SoundManagerStream$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN4@Tree_temp_

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN4@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 1052 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1053 :             _Al.deallocate(_Ptr, 1);
; 1054 :         }
; 1055 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4502 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2144 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2153 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 2144 :         const value_type* _Result = _Bx._Buf;

  00012	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00015	8b d6		 mov	 edx, esi
  00017	57		 push	 edi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
$LN11@operator:

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00023	8b f3		 mov	 esi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00025	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 69   :     return _Right < _Left ? _Right : _Left;

  00028	3b fb		 cmp	 edi, ebx
  0002a	0f 42 f7	 cmovb	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ee 04	 sub	 esi, 4
  00030	72 11		 jb	 SHORT $LN26@operator
$LL27@operator:
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00036	75 10		 jne	 SHORT $LN25@operator
  00038	83 c2 04	 add	 edx, 4
  0003b	83 c1 04	 add	 ecx, 4
  0003e	83 ee 04	 sub	 esi, 4
  00041	73 ef		 jae	 SHORT $LL27@operator
$LN26@operator:
  00043	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN24@operator
$LN25@operator:
  00048	8a 02		 mov	 al, BYTE PTR [edx]
  0004a	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004c	75 27		 jne	 SHORT $LN28@operator
  0004e	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN24@operator
  00053	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00056	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00059	75 1a		 jne	 SHORT $LN28@operator
  0005b	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN24@operator
  00060	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00063	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00066	75 0d		 jne	 SHORT $LN28@operator
  00068	83 fe ff	 cmp	 esi, -1
  0006b	74 0f		 je	 SHORT $LN24@operator
  0006d	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00070	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00073	74 07		 je	 SHORT $LN24@operator
$LN28@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN29@operator
$LN24@operator:
  0007c	33 c0		 xor	 eax, eax
$LN29@operator:

; 513  :     if (_Ans != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	75 13		 jne	 SHORT $LN18@operator

; 514  :         return _Ans;
; 515  :     }
; 516  : 
; 517  :     if (_Left_size < _Right_size) {

  00082	3b fb		 cmp	 edi, ebx
  00084	76 0b		 jbe	 SHORT $LN30@operator

; 4503 :     return _Left.compare(_Right) < 0;

  00086	5f		 pop	 edi

; 518  :         return -1;

  00087	83 c8 ff	 or	 eax, -1

; 4503 :     return _Left.compare(_Right) < 0;

  0008a	5e		 pop	 esi
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	5b		 pop	 ebx

; 4504 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN30@operator:

; 521  :     if (_Left_size > _Right_size) {

  00091	1b c0		 sbb	 eax, eax
  00093	f7 d8		 neg	 eax
$LN18@operator:

; 4503 :     return _Left.compare(_Right) < 0;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	5b		 pop	 ebx

; 4504 : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;
; 1707 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1708 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;
; 1710 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1711 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1703 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1712 :             }
; 1713 :         }
; 1714 : 
; 1715 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1716 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 51		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00027	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002a	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002d	72 0d		 jb	 SHORT $LN21@Erase_tree

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00030	50		 push	 eax
  00031	ff 76 10	 push	 DWORD PTR [esi+16]
  00034	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00039	83 c4 08	 add	 esp, 8
$LN21@Erase_tree:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003c	6a 2c		 push	 44			; 0000002cH
  0003e	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00051	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00059	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0005c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00060	74 b6		 je	 SHORT $LL2@Erase_tree
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
$LN3@Erase_tree:
  00064	5f		 pop	 edi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>, COMDAT
; _this$ = ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN7@pair

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN7@pair:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 64   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 64   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange, COMDAT

; 1708 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManagerStream@@UAE@XZ ; CSoundManagerStream::~CSoundManagerStream
??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManagerStream'', COMDAT

; 9    : CSoundManagerStream CSoundManager::ms_SoundManagerStream;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e8 00 00 00 00	 call	 ??0CSoundManagerStream@@QAE@XZ ; CSoundManagerStream::CSoundManagerStream
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManagerStream''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManager3D@@UAE@XZ ; CSoundManager3D::~CSoundManager3D
??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManager3D'', COMDAT

; 8    : CSoundManager3D CSoundManager::ms_SoundManager3D;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00005	e8 00 00 00 00	 call	 ??0CSoundManager3D@@QAE@XZ ; CSoundManager3D::CSoundManager3D
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManager3D''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManager2D@@UAE@XZ ; CSoundManager2D::~CSoundManager2D
??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManager2D'', COMDAT

; 7    : CSoundManager2D CSoundManager::ms_SoundManager2D;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e8 00 00 00 00	 call	 ??0CSoundManager2D@@QAE@XZ ; CSoundManager2D::CSoundManager2D
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManager2D''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundManager@@UAEPAXI@Z PROC			; CSoundManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundManager@@UAE@XZ ; CSoundManager::~CSoundManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 74		 push	 116			; 00000074H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSoundManager@@UAEPAXI@Z ENDP			; CSoundManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1186 = -8						; size = 4
tv1182 = -8						; size = 4
tv1149 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 504  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	75 18		 jne	 SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00027	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002b	74 04		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002d	8b f8		 mov	 edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0002f	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	3b ca		 cmp	 ecx, edx

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00039	0f 85 8b 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00046	75 03		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00050	75 05		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00052	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00055	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00057	39 16		 cmp	 DWORD PTR [esi], edx
  00059	75 04		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005b	89 3e		 mov	 DWORD PTR [esi], edi

; 529  :             } else {

  0005d	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  00062	8b 03		 mov	 eax, DWORD PTR [ebx]
  00064	39 10		 cmp	 DWORD PTR [eax], edx
  00066	75 2b		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00068	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006c	74 04		 je	 SHORT $LN42@Extract
  0006e	8b d6		 mov	 edx, esi
  00070	eb 1c		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00072	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00074	8b d7		 mov	 edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00076	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007a	75 12		 jne	 SHORT $LN48@Extract
  0007c	0f 1f 40 00	 npad	 4
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008e	89 10		 mov	 DWORD PTR [eax], edx
  00090	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00098	75 2b		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@Extract
  000a0	8b ce		 mov	 ecx, esi
  000a2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000a8	eb 7c		 jmp	 SHORT $LN55@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000ad	8b cf		 mov	 ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

  000b5	8b c8		 mov	 ecx, eax
  000b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000c2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000c5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000c8	eb 5c		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  000d1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000d4	75 04		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000d6	8b f1		 mov	 esi, ecx

; 548  :             } else { // successor further down, link in place of erased

  000d8	eb 1a		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

  000da	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000de	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e1	75 03		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000e3	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000e6	89 3e		 mov	 DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000e8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f6	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  000f9	75 05		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000fe	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00100	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00103	39 10		 cmp	 DWORD PTR [eax], edx
  00105	75 04		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00109	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 106  :     _Ty _Tmp = _STD move(_Left);

  00111	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 107  :     _Left    = _STD move(_Right);

  00117	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0011a	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 108  :     _Right   = _STD move(_Tmp);

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00123	88 50 0c	 mov	 BYTE PTR [eax+12], dl
$LN55@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00126	80 fa 01	 cmp	 dl, 1
  00129	0f 85 46 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 37 01 00
	00		 je	 $LN3@Extract
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Extract:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f8	 mov	 DWORD PTR tv1186[ebp], esi
  00147	0f 85 24 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	3b f9		 cmp	 edi, ecx
  00151	0f 85 a2 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  00157	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0015a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0015e	75 43		 jne	 SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

  00160	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

  00167	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00176	75 03		 jne	 SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00178	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00181	8b 03		 mov	 eax, DWORD PTR [ebx]
  00183	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00186	75 05		 jne	 SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

  00188	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0018b	eb 0e		 jmp	 SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0018d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00190	3b 30		 cmp	 esi, DWORD PTR [eax]
  00192	75 04		 jne	 SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00194	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00196	eb 03		 jmp	 SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  0019b	89 31		 mov	 DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  0019d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

  001a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  001a3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a7	0f 85 b1 00 00
	00		 jne	 $LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  001b3	75 0d		 jne	 SHORT $LN89@Extract
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001bc	0f 84 98 00 00
	00		 je	 $LN93@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c5	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001c9	75 13		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  001cb	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  001cf	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

  001d3	51		 push	 ecx
  001d4	8b cb		 mov	 ecx, ebx
  001d6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  001db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  001de	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001e1	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

  001e4	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  001e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

  001eb	8b cb		 mov	 ecx, ebx
  001ed	56		 push	 esi
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  001f7	eb 78		 jmp	 SHORT $LN3@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  001f9	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001fd	75 44		 jne	 SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

  001ff	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00203	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

  00205	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00209	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020c	89 06		 mov	 DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0020e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	75 03		 jne	 SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00217	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0021a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	75 05		 jne	 SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

  00227	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0022a	eb 0f		 jmp	 SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0022c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0022f	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00232	75 05		 jne	 SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00237	eb 02		 jmp	 SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00239	89 08		 mov	 DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0023b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

  0023e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

  00241	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  00243	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00247	75 15		 jne	 SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  00250	75 3a		 jne	 SHORT $LN90@Extract
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00258	75 32		 jne	 SHORT $LN90@Extract
$LN93@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0025a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  0025e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00260	8b 4d f8	 mov	 ecx, DWORD PTR tv1186[ebp]
  00263	8b f9		 mov	 edi, ecx
  00265	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00268	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026b	0f 85 cf fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00271	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  00275	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00278	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0027b	85 c9		 test	 ecx, ecx
  0027d	74 04		 je	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  0027f	49		 dec	 ecx
  00280	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  0028c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028e	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00292	75 12		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00294	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  00298	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

  0029c	51		 push	 ecx
  0029d	8b cb		 mov	 ecx, ebx
  0029f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002a6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002a9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

  002ac	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  002b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

  002b2	8b cb		 mov	 ecx, ebx
  002b4	56		 push	 esi
  002b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
  002be	eb b1		 jmp	 SHORT $LN3@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Off$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
__Head$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase, COMDAT
; _this$ = ecx

; 1435 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c1		 mov	 eax, ecx

; 1791 :         while (!_Pnode->_Isnil) {

  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]

; 1435 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  0000b	53		 push	 ebx
  0000c	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi

; 1787 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 1788 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  00012	8b f0		 mov	 esi, eax

; 1435 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00014	57		 push	 edi

; 1787 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00015	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax

; 1789 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails

  00018	8b d8		 mov	 ebx, eax
  0001a	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1790 : 
; 1791 :         while (!_Pnode->_Isnil) {

  0001d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00021	75 40		 jne	 SHORT $LN5@erase
$LL4@erase:

; 1792 :             const auto& _Nodekey = _Traits::_Kfn(_Pnode->_Myval);

  00023	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00026	51		 push	 ecx
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1793 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  00030	84 c0		 test	 al, al
  00032	74 05		 je	 SHORT $LN8@erase

; 1794 :                 _Pnode = _Pnode->_Right; // descend right subtree

  00034	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]

; 1795 :             } else { // _Pnode not less than _Keyval, remember it

  00037	eb 1e		 jmp	 SHORT $LN9@erase
$LN8@erase:

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  00039	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  0003d	74 14		 je	 SHORT $LN10@erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  0003f	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00042	50		 push	 eax
  00043	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  0004e	84 c0		 test	 al, al
  00050	0f 45 df	 cmovne	 ebx, edi
$LN10@erase:

; 1797 :                     _Hinode = _Pnode; // _Pnode greater, remember it
; 1798 :                 }
; 1799 : 
; 1800 :                 _Lonode = _Pnode;

  00053	8b f7		 mov	 esi, edi

; 1801 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00055	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN9@erase:

; 1790 : 
; 1791 :         while (!_Pnode->_Isnil) {

  00057	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0005e	74 c3		 je	 SHORT $LL4@erase
  00060	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
$LN5@erase:

; 1802 :             }
; 1803 :         }
; 1804 : 
; 1805 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound
; 1806 :         while (!_Pnode->_Isnil) {

  00063	83 c0 04	 add	 eax, 4
  00066	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  0006a	0f 44 c3	 cmove	 eax, ebx
  0006d	8b 38		 mov	 edi, DWORD PTR [eax]
  0006f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00073	75 23		 jne	 SHORT $LN7@erase
$LL6@erase:

; 1807 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00075	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0007f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1807 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00082	84 c0		 test	 al, al
  00084	74 06		 je	 SHORT $LN11@erase

; 1808 :                 // _Pnode greater than _Keyval, remember it
; 1809 :                 _Hinode = _Pnode;

  00086	8b df		 mov	 ebx, edi

; 1810 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00088	8b 3f		 mov	 edi, DWORD PTR [edi]

; 1811 :             } else {

  0008a	eb 03		 jmp	 SHORT $LN12@erase
$LN11@erase:

; 1812 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0008c	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
$LN12@erase:

; 1802 :             }
; 1803 :         }
; 1804 : 
; 1805 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound
; 1806 :         while (!_Pnode->_Isnil) {

  0008f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00096	74 dd		 je	 SHORT $LL6@erase
$LN7@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1729 :         _Iter_diff_t<_InIt> _Off = 0;

  00098	33 ff		 xor	 edi, edi
  0009a	8b c6		 mov	 eax, esi
  0009c	89 7d f4	 mov	 DWORD PTR __Off$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  0009f	3b f3		 cmp	 esi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1730 :         for (; _UFirst != _ULast; ++_UFirst) {

  000a1	74 44		 je	 SHORT $LN30@erase
$LL37@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1731 :             ++_Off;

  000a6	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000a7	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000ab	74 1d		 je	 SHORT $LN36@erase

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  000ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b0	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b4	75 10		 jne	 SHORT $LN117@erase
$LL34@erase:
  000b6	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000b9	75 0b		 jne	 SHORT $LN117@erase

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  000bb	8b c1		 mov	 eax, ecx
  000bd	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c0	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c4	74 f0		 je	 SHORT $LL34@erase
$LN117@erase:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  000c6	8b c1		 mov	 eax, ecx

; 59   :         } else {

  000c8	eb 16		 jmp	 SHORT $LN41@erase
$LN36@erase:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000ca	8b c1		 mov	 eax, ecx

; 451  :         while (!_Pnode->_Left->_Isnil) {

  000cc	8b 10		 mov	 edx, DWORD PTR [eax]
  000ce	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000d2	75 0c		 jne	 SHORT $LN41@erase
$LL40@erase:
  000d4	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 452  :             _Pnode = _Pnode->_Left;

  000d6	8b c2		 mov	 eax, edx
  000d8	8b d1		 mov	 edx, ecx
  000da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000de	74 f4		 je	 SHORT $LL40@erase
$LN41@erase:

; 98   :         return _Ptr == _Right._Ptr;

  000e0	3b c3		 cmp	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1730 :         for (; _UFirst != _ULast; ++_UFirst) {

  000e2	75 bf		 jne	 SHORT $LL37@erase
  000e4	89 7d f4	 mov	 DWORD PTR __Off$1$[ebp], edi
$LN30@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  000e7	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]

; 1436 :         const auto _Where = _Eqrange(_Keyval);
; 1437 :         const _Unchecked_const_iterator _First(_Where.first, nullptr);
; 1438 :         const _Unchecked_const_iterator _Last(_Where.second, nullptr);
; 1439 :         const auto _Num = static_cast<size_type>(_STD distance(_First, _Last));
; 1440 :         _Erase_unchecked(_First, _Last);

  000ea	89 75 08	 mov	 DWORD PTR __First$[ebp], esi

; 98   :         return _Ptr == _Right._Ptr;

  000ed	3b 30		 cmp	 esi, DWORD PTR [eax]

; 1397 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  000ef	75 30		 jne	 SHORT $LN99@erase
  000f1	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  000f5	74 2a		 je	 SHORT $LN99@erase

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000f7	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
  000fa	8b d8		 mov	 ebx, eax
  000fc	8b ce		 mov	 ecx, esi
  000fe	ff 73 04	 push	 DWORD PTR [ebx+4]
  00101	56		 push	 esi
  00102	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >

; 1449 :         _Head->_Parent  = _Head;

  00107	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1450 :         _Head->_Left    = _Head;

  0010a	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1451 :         _Head->_Right   = _Head;

  0010c	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1452 :         _Scary->_Mysize = 0;

  0010f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN116@erase:

; 1441 :         return _Num;
; 1442 :     }

  00116	8b c7		 mov	 eax, edi
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 04 00	 ret	 4
$LN99@erase:

; 98   :         return _Ptr == _Right._Ptr;

  00121	3b f3		 cmp	 esi, ebx

; 1404 :         while (_First != _Last) {

  00123	74 f1		 je	 SHORT $LN116@erase
  00125	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LL48@erase:

; 68   :         ++*this;

  00128	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0012b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++

; 1389 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00130	56		 push	 esi
  00131	8b cf		 mov	 ecx, edi
  00133	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract
  00138	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00140	72 0d		 jb	 SHORT $LN84@erase

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00142	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00143	51		 push	 ecx
  00144	ff 76 10	 push	 DWORD PTR [esi+16]
  00147	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0014c	83 c4 08	 add	 esp, 8
$LN84@erase:

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0014f	6a 2c		 push	 44			; 0000002cH
  00151	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00152	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00159	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00160	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00164	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  00169	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0016c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  0016f	3b f3		 cmp	 esi, ebx

; 1404 :         while (_First != _Last) {

  00171	75 b5		 jne	 SHORT $LL48@erase

; 1441 :         return _Num;
; 1442 :     }

  00173	8b 45 f4	 mov	 eax, DWORD PTR __Off$1$[ebp]
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z PROC ; CSoundManager::GetSoundInstance3D, COMDAT
; _this$ = ecx

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00003	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance

; 310  : 
; 311  : 	if (-1 == iIndex)

  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 1d		 je	 SHORT $LN5@GetSoundIn

; 312  : 		return FALSE;
; 313  : 
; 314  : 	*ppInstance = ms_SoundManager3D.GetInstance(iIndex);

  00015	50		 push	 eax
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0001b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _ppInstance$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 315  : 
; 316  : 	if (!*ppInstance)

  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $LN5@GetSoundIn

; 318  : 
; 319  : 	return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 320  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN5@GetSoundIn:

; 317  : 		return FALSE;

  00032	33 c0		 xor	 eax, eax

; 320  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ENDP ; CSoundManager::GetSoundInstance3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z
_TEXT	SEGMENT
_c_szSoundFileName$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z PROC ; CSoundManager::GetSoundInstance2D, COMDAT
; _this$ = ecx

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 299  : 	*ppInstance = ms_SoundManager2D.GetInstance(c_szSoundFileName);

  00003	ff 75 08	 push	 DWORD PTR _c_szSoundFileName$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager2D@@QAEPAVISoundInstance@@PBD@Z ; CSoundManager2D::GetInstance
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _ppInstance$[ebp]
  00013	8b d0		 mov	 edx, eax

; 300  : 
; 301  : 	if (!*ppInstance)

  00015	33 c0		 xor	 eax, eax
  00017	85 d2		 test	 edx, edx
  00019	0f 95 c0	 setne	 al
  0001c	89 11		 mov	 DWORD PTR [ecx], edx

; 302  : 		return FALSE;
; 303  : 
; 304  : 	return TRUE;
; 305  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ENDP ; CSoundManager::GetSoundInstance2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__SetMusicVolume@CSoundManager@@IAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?__SetMusicVolume@CSoundManager@@IAEXM@Z PROC		; CSoundManager::__SetMusicVolume, COMDAT
; _this$ = ecx

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  : 	if (m_isSoundDisable)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0000f	74 0a		 je	 SHORT $LN5@SetMusicVo

; 219  : 	{
; 220  : 		m_fBackupMusicVolume = fVolume;

  00011	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  00016	5f		 pop	 edi

; 246  : 	}
; 247  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN5@SetMusicVo:

; 221  : 		return;
; 222  : 	}
; 223  : 
; 224  : 	fVolume = fMAX(fVolume, 0.0f);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00030	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 225  : 	fVolume = fMIN(fVolume, 1.0f);

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00038	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  0004a	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 226  : 	m_fMusicVolume = fVolume;

  0004d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00052	83 c4 08	 add	 esp, 8

; 227  : 
; 228  : 	if (!m_isSoundDisable)

  00055	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00059	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  0005e	75 05		 jne	 SHORT $LN6@SetMusicVo

; 229  : 	{
; 230  : 		m_fBackupMusicVolume = fVolume;

  00060	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
$LN6@SetMusicVo:
  00065	56		 push	 esi

; 231  : 	}
; 232  : 
; 233  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00066	33 f6		 xor	 esi, esi
  00068	83 c7 38	 add	 edi, 56			; 00000038H
  0006b	0f 1f 44 00 00	 npad	 5
$LL4@SetMusicVo:

; 234  : 	{
; 235  : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 236  : 		if (MUSIC_STATE_OFF == rMusicInstance.MusicState)

  00070	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00073	85 c0		 test	 eax, eax
  00075	74 2f		 je	 SHORT $LN2@SetMusicVo

; 237  : 			continue;
; 238  : 		if (MUSIC_STATE_FADE_OUT == rMusicInstance.MusicState)

  00077	83 f8 03	 cmp	 eax, 3
  0007a	74 2a		 je	 SHORT $LN2@SetMusicVo

; 239  : 			continue;
; 240  : 
; 241  : 		rMusicInstance.fVolume = fVolume;
; 242  : 
; 243  : 		CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);

  0007c	56		 push	 esi
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00082	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00086	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance

; 244  : 		if (pInstance)

  0008b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	74 12		 je	 SHORT $LN2@SetMusicVo

; 245  : 			pInstance->SetVolume(fVolume);

  00094	8b 10		 mov	 edx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	8b c8		 mov	 ecx, eax
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	ff 52 24	 call	 DWORD PTR [edx+36]
  000a1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
$LN2@SetMusicVo:

; 231  : 	}
; 232  : 
; 233  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  000a6	46		 inc	 esi
  000a7	83 c7 14	 add	 edi, 20			; 00000014H
  000aa	83 fe 03	 cmp	 esi, 3
  000ad	7c c1		 jl	 SHORT $LL4@SetMusicVo
  000af	5e		 pop	 esi
  000b0	5f		 pop	 edi

; 246  : 	}
; 247  : }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?__SetMusicVolume@CSoundManager@@IAEXM@Z ENDP		; CSoundManager::__SetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z
_TEXT	SEGMENT
tv75 = 8						; size = 4
_fRatioVolume$ = 8					; size = 4
?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z PROC ; CSoundManager::__ConvertRatioVolumeToApplyVolume, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  : 	if (0.1f>fRatioVolume)

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0000b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRatioVolume$[ebp]
  00010	0f 2f c1	 comiss	 xmm0, xmm1
  00013	76 07		 jbe	 SHORT $LN2@ConvertRat

; 252  : 		return fRatioVolume;

  00015	d9 45 08	 fld	 DWORD PTR _fRatioVolume$[ebp]

; 255  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@ConvertRat:

; 253  : 
; 254  : 	return (float)pow(10.0f, (-1.0f + fRatioVolume));

  0001c	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00024	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0002c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002f	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 08	 movss	 DWORD PTR tv75[ebp], xmm0
  0003d	d9 45 08	 fld	 DWORD PTR tv75[ebp]

; 255  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ENDP ; CSoundManager::__ConvertRatioVolumeToApplyVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z
_TEXT	SEGMENT
_nGradeVolume$ = 8					; size = 4
?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z PROC ; CSoundManager::__ConvertGradeVolumeToApplyVolume, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _nGradeVolume$[ebp]

; 259  : 	return __ConvertRatioVolumeToApplyVolume(nGradeVolume/5.0f);

  00008	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0000b	51		 push	 ecx
  0000c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume

; 260  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ENDP ; CSoundManager::__ConvertGradeVolumeToApplyVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
_TEXT	SEGMENT
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_pdwIndex$ = 12						; size = 4
?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z PROC		; CSoundManager::GetMusicIndex, COMDAT
; _this$ = ecx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  0002f	8b 7d 0c	 mov	 edi, DWORD PTR _pdwIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00032	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 620  : 	StringPath(c_szFileName, strFileName);

  00044	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	51		 push	 ecx
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00055	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  00059	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 621  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  0005c	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0005f	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 621  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  00069	83 c4 10	 add	 esp, 16			; 00000010H
  0006c	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]

; 622  : 
; 623  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0006f	33 d2		 xor	 edx, edx
$LL4@GetMusicIn:

; 624  : 	{
; 625  : 		const TMusicInstance & c_rMusicInstance = m_MusicInstances[i];
; 626  : 		if (MUSIC_STATE_OFF != c_rMusicInstance.MusicState)

  00071	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00075	74 04		 je	 SHORT $LN2@GetMusicIn

; 627  : 		if (c_rMusicInstance.dwMusicFileNameCRC == dwCRC)

  00077	39 01		 cmp	 DWORD PTR [ecx], eax
  00079	74 3f		 je	 SHORT $LN47@GetMusicIn
$LN2@GetMusicIn:

; 622  : 
; 623  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0007b	42		 inc	 edx
  0007c	83 c1 14	 add	 ecx, 20			; 00000014H
  0007f	83 fa 03	 cmp	 edx, 3
  00082	7c ed		 jl	 SHORT $LL4@GetMusicIn

; 630  : 			return TRUE;
; 631  : 		}
; 632  : 	}
; 633  : 
; 634  : 	return FALSE;

  00084	33 f6		 xor	 esi, esi
$LN9@GetMusicIn:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  00089	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0008c	72 0d		 jb	 SHORT $LN52@GetMusicIn

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0008e	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008f	51		 push	 ecx
  00090	ff 75 d8	 push	 DWORD PTR _strFileName$[ebp]
  00093	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00098	83 c4 08	 add	 esp, 8
$LN52@GetMusicIn:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 635  : }

  0009b	8b c6		 mov	 eax, esi
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	33 cd		 xor	 ecx, ebp
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
$LN47@GetMusicIn:

; 628  : 		{
; 629  : 			*pdwIndex = i;

  000ba	89 17		 mov	 DWORD PTR [edi], edx
  000bc	be 01 00 00 00	 mov	 esi, 1
  000c1	eb c3		 jmp	 SHORT $LN9@GetMusicIn
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ENDP		; CSoundManager::GetMusicIndex
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopMusic@CSoundManager@@IAEXK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?StopMusic@CSoundManager@@IAEXK@Z PROC			; CSoundManager::StopMusic, COMDAT
; _this$ = ecx

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 601  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 fe 03	 cmp	 esi, 3
  0000d	73 39		 jae	 SHORT $LN1@StopMusic

; 602  : 		return;
; 603  : 
; 604  : 	CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(dwIndex);

  0000f	56		 push	 esi
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00015	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance

; 605  : 	if (!pInstance)

  0001a	85 c0		 test	 eax, eax
  0001c	74 2a		 je	 SHORT $LN1@StopMusic

; 606  : 		return;
; 607  : 
; 608  : 	pInstance->Stop();

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	ff 52 1c	 call	 DWORD PTR [edx+28]

; 609  : 
; 610  : 	TMusicInstance & rMusicInstance = m_MusicInstances[dwIndex];

  00025	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]

; 611  : 	rMusicInstance.fVolume = 0.0f;

  00028	c7 44 87 38 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+56], 0

; 612  : 	rMusicInstance.fVolumeSpeed = 0.0f;

  00030	c7 44 87 40 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+64], 0

; 613  : 	rMusicInstance.MusicState = MUSIC_STATE_OFF;

  00038	c7 44 87 34 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+52], 0

; 614  : 	rMusicInstance.dwMusicFileNameCRC = 0;

  00040	c7 44 87 30 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+48], 0
$LN1@StopMusic:

; 615  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?StopMusic@CSoundManager@@IAEXK@Z ENDP			; CSoundManager::StopMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -44					; size = 4
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwIndex$ = 8						; size = 4
_c_szFileName$ = 12					; size = 4
_fVolume$ = 16						; size = 4
_fVolumeSpeed$ = 20					; size = 4
?PlayMusic@CSoundManager@@IAEXKPBDMM@Z PROC		; CSoundManager::PlayMusic, COMDAT
; _this$ = ecx

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _c_szFileName$[ebp]

; 570  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  00034	83 fe 03	 cmp	 esi, 3
  00037	0f 83 d5 00 00
	00		 jae	 $LN27@PlayMusic

; 571  : 		return;
; 572  : 
; 573  : 	if (!ms_SoundManagerStream.SetInstance(dwIndex, c_szFileName))

  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00044	e8 00 00 00 00	 call	 ?SetInstance@CSoundManagerStream@@QAE_NKPBD@Z ; CSoundManagerStream::SetInstance
  00049	84 c0		 test	 al, al
  0004b	75 10		 jne	 SHORT $LN3@PlayMusic

; 574  : 	{
; 575  : 		TraceError("CSoundManager::PlayMusic - Failed to load stream sound : %s", c_szFileName);

  0004d	57		 push	 edi
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@
  00053	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 576  : 		return;

  00058	e9 b2 00 00 00	 jmp	 $LN34@PlayMusic
$LN3@PlayMusic:

; 577  : 	}
; 578  : 
; 579  : 	CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(dwIndex);

  0005d	56		 push	 esi
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00063	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance
  00068	8b d8		 mov	 ebx, eax

; 580  : 	if (!pInstance)

  0006a	85 db		 test	 ebx, ebx
  0006c	75 10		 jne	 SHORT $LN4@PlayMusic

; 581  : 	{
; 582  : 		TraceError("CSoundManager::PlayMusic - There is no stream sound instance : %s", c_szFileName);

  0006e	57		 push	 edi
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@
  00074	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 583  : 		return;

  00079	e9 91 00 00 00	 jmp	 $LN34@PlayMusic
$LN4@PlayMusic:

; 584  : 	}
; 585  : 
; 586  : 	pInstance->SetVolume(fVolume);

  0007e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00080	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00085	51		 push	 ecx
  00086	8b cb		 mov	 ecx, ebx
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	ff 50 24	 call	 DWORD PTR [eax+36]

; 587  : 	pInstance->Play(0);

  00090	8b 03		 mov	 eax, DWORD PTR [ebx]
  00092	8b cb		 mov	 ecx, ebx
  00094	6a 00		 push	 0
  00096	6a 00		 push	 0
  00098	ff 50 10	 call	 DWORD PTR [eax+16]

; 590  : 	rMusicInstance.fVolume = fVolume;

  0009b	8b 5d d4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0009e	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  000a1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4293 :         _Mypair._Myval2._Mysize = 0;

  000a6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000ad	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 590  : 	rMusicInstance.fVolume = fVolume;

  000b4	f3 0f 11 44 b3
	38		 movss	 DWORD PTR [ebx+esi*4+56], xmm0

; 591  : 	rMusicInstance.fVolumeSpeed = fVolumeSpeed;

  000ba	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  000bf	f3 0f 11 44 b3
	40		 movss	 DWORD PTR [ebx+esi*4+64], xmm0

; 592  : 	rMusicInstance.MusicState = MUSIC_STATE_FADE_IN;

  000c5	c7 44 b3 34 02
	00 00 00	 mov	 DWORD PTR [ebx+esi*4+52], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000cd	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 595  : 	StringPath(c_szFileName, strFileName);

  000d1	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  000d4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000db	50		 push	 eax
  000dc	57		 push	 edi
  000dd	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000e2	83 7d ec 10	 cmp	 DWORD PTR _strFileName$[ebp+20], 16 ; 00000010H

; 2144 :         const value_type* _Result = _Bx._Buf;

  000e6	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 596  : 	rMusicInstance.dwMusicFileNameCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  000e9	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  000ec	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFileName$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 596  : 	rMusicInstance.dwMusicFileNameCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  000f6	89 44 b3 30	 mov	 DWORD PTR [ebx+esi*4+48], eax
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000fd	8b 45 ec	 mov	 eax, DWORD PTR _strFileName$[ebp+20]
  00100	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00103	72 0d		 jb	 SHORT $LN27@PlayMusic

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00105	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00106	50		 push	 eax
  00107	ff 75 d8	 push	 DWORD PTR _strFileName$[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
$LN34@PlayMusic:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 597  : }

  0010f	83 c4 08	 add	 esp, 8
$LN27@PlayMusic:
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ENDP		; CSoundManager::PlayMusic
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv301 = -4						; size = 4
_dwcurFrame$ = 8					; size = 4
_c_pSoundInstanceVector$ = 12				; size = 4
?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundInstance, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _c_pSoundInstanceVector$[ebp]
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 171  : {

  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00017	8b f3		 mov	 esi, ebx
  00019	8b 3f		 mov	 edi, DWORD PTR [edi]
  0001b	2b f7		 sub	 esi, edi
  0001d	f7 ee		 imul	 esi
  0001f	03 d6		 add	 edx, esi
  00021	c1 fa 04	 sar	 edx, 4
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 172  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  0002b	74 6c		 je	 SHORT $LN3@UpdateSoun
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv301[ebp], 0
  00034	33 f6		 xor	 esi, esi
$LL4@UpdateSoun:

; 1528 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00036	8b cb		 mov	 ecx, ebx
  00038	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003d	2b cf		 sub	 ecx, edi
  0003f	f7 e9		 imul	 ecx
  00041	03 d1		 add	 edx, ecx
  00043	c1 fa 04	 sar	 edx, 4
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b c6		 cmp	 eax, esi
  0004f	76 51		 jbe	 SHORT $LN21@UpdateSoun

; 1532 :         return _My_data._Myfirst[_Pos];

  00051	8b 45 fc	 mov	 eax, DWORD PTR tv301[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 176  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _dwcurFrame$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1532 :         return _My_data._Myfirst[_Pos];

  00057	03 c7		 add	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 176  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  00059	39 08		 cmp	 DWORD PTR [eax], ecx
  0005b	75 1c		 jne	 SHORT $LN2@UpdateSoun
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  0005d	83 c0 04	 add	 eax, 4

; 2153 :         return _BUF_SIZE <= _Myres;

  00060	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00064	72 02		 jb	 SHORT $LN16@UpdateSoun

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00066	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@UpdateSoun:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 178  : 			PlaySound2D(c_rSoundInstance.strSoundFileName.c_str());

  00068	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
  00071	8b 45 0c	 mov	 eax, DWORD PTR _c_pSoundInstanceVector$[ebp]
  00074	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00077	8b 38		 mov	 edi, DWORD PTR [eax]
$LN2@UpdateSoun:

; 172  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00079	83 45 fc 1c	 add	 DWORD PTR tv301[ebp], 28 ; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007d	8b cb		 mov	 ecx, ebx
  0007f	2b cf		 sub	 ecx, edi
  00081	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00086	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 172  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00088	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00089	03 d1		 add	 edx, ecx
  0008b	c1 fa 04	 sar	 edx, 4
  0008e	8b c2		 mov	 eax, edx
  00090	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00093	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 172  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00095	3b f0		 cmp	 esi, eax
  00097	72 9d		 jb	 SHORT $LL4@UpdateSoun
$LN3@UpdateSoun:
  00099	5f		 pop	 edi

; 181  : }

  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN21@UpdateSoun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1529 :             _Xrange();

  000a2	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN25@UpdateSoun:
  000a7	cc		 int	 3
?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv295 = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_dwcurFrame$ = 20					; size = 4
_c_pSoundInstanceVector$ = 24				; size = 4
_bCheckFrequency$ = 28					; size = 4
?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z PROC ; CSoundManager::UpdateSoundInstance, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00009	8b 7d 18	 mov	 edi, DWORD PTR _c_pSoundInstanceVector$[ebp]
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 158  : {

  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00017	8b f3		 mov	 esi, ebx
  00019	8b 3f		 mov	 edi, DWORD PTR [edi]
  0001b	2b f7		 sub	 esi, edi
  0001d	f7 ee		 imul	 esi
  0001f	03 d6		 add	 edx, esi
  00021	c1 fa 04	 sar	 edx, 4
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  0002b	0f 84 9c 00 00
	00		 je	 $LN3@UpdateSoun
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv295[ebp], 0
  00038	33 f6		 xor	 esi, esi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@UpdateSoun:

; 1528 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	8b cb		 mov	 ecx, ebx
  00042	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00047	2b cf		 sub	 ecx, edi
  00049	f7 e9		 imul	 ecx
  0004b	03 d1		 add	 edx, ecx
  0004d	c1 fa 04	 sar	 edx, 4
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	03 c2		 add	 eax, edx
  00057	3b c6		 cmp	 eax, esi
  00059	76 7b		 jbe	 SHORT $LN21@UpdateSoun

; 1532 :         return _My_data._Myfirst[_Pos];

  0005b	8b 45 fc	 mov	 eax, DWORD PTR tv295[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 162  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  0005e	8b 4d 14	 mov	 ecx, DWORD PTR _dwcurFrame$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1532 :         return _My_data._Myfirst[_Pos];

  00061	03 c7		 add	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 162  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  00063	39 08		 cmp	 DWORD PTR [eax], ecx
  00065	75 42		 jne	 SHORT $LN2@UpdateSoun
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 3668 :         return _Mypair._Myval2._Myptr();

  00067	83 c0 04	 add	 eax, 4

; 2153 :         return _BUF_SIZE <= _Myres;

  0006a	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  0006e	72 02		 jb	 SHORT $LN16@UpdateSoun

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00070	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@UpdateSoun:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 165  : 			PlayCharacterSound3D(fx, fy, fz, c_rSoundInstance.strSoundFileName.c_str(), bCheckFrequency);

  00072	ff 75 1c	 push	 DWORD PTR _bCheckFrequency$[ebp]
  00075	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007d	50		 push	 eax
  0007e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00081	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00087	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0008c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00092	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlayCharacterSound3D
  000a1	8b 45 18	 mov	 eax, DWORD PTR _c_pSoundInstanceVector$[ebp]
  000a4	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  000a7	8b 38		 mov	 edi, DWORD PTR [eax]
$LN2@UpdateSoun:

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000a9	83 45 fc 1c	 add	 DWORD PTR tv295[ebp], 28 ; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ad	8b cb		 mov	 ecx, ebx
  000af	2b cf		 sub	 ecx, edi
  000b1	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000b6	f7 e9		 imul	 ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000b8	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b9	03 d1		 add	 edx, ecx
  000bb	c1 fa 04	 sar	 edx, 4
  000be	8b c2		 mov	 eax, edx
  000c0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c3	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000c5	3b f0		 cmp	 esi, eax
  000c7	0f 82 73 ff ff
	ff		 jb	 $LL4@UpdateSoun
$LN3@UpdateSoun:
  000cd	5f		 pop	 edi

; 168  : }

  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 18 00	 ret	 24			; 00000018H
$LN21@UpdateSoun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1529 :             _Xrange();

  000d6	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN25@UpdateSoun:
  000db	cc		 int	 3
?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z ENDP ; CSoundManager::UpdateSoundInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_dwcurTime$ = 20					; size = 4
_c_pSoundDataVector$ = 24				; size = 4
?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundData, COMDAT
; _this$ = ecx

; 154  : 	assert(!"CSoundManager::UpdateSoundData");
; 155  : }

  00000	c2 14 00	 ret	 20			; 00000014H
?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_dwcurTime$ = 8						; size = 4
_c_pSoundDataVector$ = 12				; size = 4
?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundData, COMDAT
; _this$ = ecx

; 149  : 	assert(!"CSoundManager::UpdateSoundData");
; 150  : }

  00000	c2 08 00	 ret	 8
?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeAll@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?FadeAll@CSoundManager@@QAEXXZ PROC			; CSoundManager::FadeAll, COMDAT
; _this$ = ecx

; 639  : 	FadeOutAllMusic();

  00000	e9 00 00 00 00	 jmp	 ?FadeOutAllMusic@CSoundManager@@QAEXXZ ; CSoundManager::FadeOutAllMusic
?FadeAll@CSoundManager@@QAEXXZ ENDP			; CSoundManager::FadeAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeOutAllMusic@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?FadeOutAllMusic@CSoundManager@@QAEXXZ PROC		; CSoundManager::FadeOutAllMusic, COMDAT
; _this$ = ecx

; 535  : 	//Tracenf("FadeOutAllMusic");
; 536  : 
; 537  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 538  : 	{
; 539  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00000	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00004	74 0e		 je	 SHORT $LN2@FadeOutAll

; 540  : 			continue;
; 541  : 
; 542  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  00006	c7 41 34 03 00
	00 00		 mov	 DWORD PTR [ecx+52], 3

; 543  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  0000d	c7 41 40 0a d7
	23 3c		 mov	 DWORD PTR [ecx+64], 1008981770 ; 3c23d70aH
$LN2@FadeOutAll:

; 535  : 	//Tracenf("FadeOutAllMusic");
; 536  : 
; 537  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 538  : 	{
; 539  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00014	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  00018	74 0e		 je	 SHORT $LN14@FadeOutAll

; 540  : 			continue;
; 541  : 
; 542  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  0001a	c7 41 48 03 00
	00 00		 mov	 DWORD PTR [ecx+72], 3

; 543  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  00021	c7 41 54 0a d7
	23 3c		 mov	 DWORD PTR [ecx+84], 1008981770 ; 3c23d70aH
$LN14@FadeOutAll:

; 535  : 	//Tracenf("FadeOutAllMusic");
; 536  : 
; 537  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 538  : 	{
; 539  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00028	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0002c	74 0e		 je	 SHORT $LN16@FadeOutAll

; 540  : 			continue;
; 541  : 
; 542  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  0002e	c7 41 5c 03 00
	00 00		 mov	 DWORD PTR [ecx+92], 3

; 543  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  00035	c7 41 68 0a d7
	23 3c		 mov	 DWORD PTR [ecx+104], 1008981770 ; 3c23d70aH
$LN16@FadeOutAll:

; 544  : 	}
; 545  : }

  0003c	c3		 ret	 0
?FadeOutAllMusic@CSoundManager@@QAEXXZ ENDP		; CSoundManager::FadeOutAllMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fLimitVolume$ = 12					; size = 4
_fVolumeSpeed$ = 16					; size = 4
?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z PROC	; CSoundManager::FadeLimitOutMusic, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 489  : 	//Tracenf("FadeLimitOutMusic: %s", c_szFileName);
; 490  : 
; 491  : 	DWORD dwIndex;
; 492  : 	if (!GetMusicIndex(c_szFileName, &dwIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	56		 push	 esi
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00015	85 c0		 test	 eax, eax
  00017	75 16		 jne	 SHORT $LN2@FadeLimitO

; 493  : 	{
; 494  : 		Tracenf("FadeOutMusic: %s - ERROR NOT EXIST", c_szFileName);

  00019	56		 push	 esi
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
  0001f	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00024	83 c4 08	 add	 esp, 8
  00027	5f		 pop	 edi

; 508  : 
; 509  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 510  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@FadeLimitO:

; 495  : 		return;
; 496  : 	}
; 497  : 
; 498  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00032	83 f8 03	 cmp	 eax, 3
  00035	72 16		 jb	 SHORT $LN3@FadeLimitO

; 499  : 	{
; 500  : 		Tracenf("FadeOutMusic: %s - ERROR OUT OF RANGE", c_szFileName);

  00037	56		 push	 esi
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
  0003d	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00042	83 c4 08	 add	 esp, 8
  00045	5f		 pop	 edi

; 508  : 
; 509  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 510  : }

  00046	5e		 pop	 esi
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@FadeLimitO:

; 501  : 		return;
; 502  : 	}
; 503  : 
; 504  : 	SMusicInstance& rkMusicInst=m_MusicInstances[dwIndex];
; 505  : 	rkMusicInst.MusicState = MUSIC_STATE_FADE_LIMIT_OUT;
; 506  : 	rkMusicInst.fVolumeSpeed = fVolumeSpeed;

  0004d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  00052	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00055	f3 0f 11 44 b7
	40		 movss	 DWORD PTR [edi+esi*4+64], xmm0

; 507  : 	rkMusicInst.fLimitVolume = __ConvertRatioVolumeToApplyVolume(fLimitVolume);

  0005b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fLimitVolume$[ebp]
  00060	51		 push	 ecx
  00061	8b cf		 mov	 ecx, edi
  00063	c7 44 b7 34 04
	00 00 00	 mov	 DWORD PTR [edi+esi*4+52], 4
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume
  00075	d9 5c b7 3c	 fstp	 DWORD PTR [edi+esi*4+60]
  00079	5f		 pop	 edi

; 508  : 
; 509  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 510  : }

  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z ENDP	; CSoundManager::FadeLimitOutMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeOutMusic@CSoundManager@@QAEXPBDM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fVolumeSpeed$ = 12					; size = 4
?FadeOutMusic@CSoundManager@@QAEXPBDM@Z PROC		; CSoundManager::FadeOutMusic, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 514  : 	//Tracenf("FadeOutMusic: %s", c_szFileName);
; 515  : 
; 516  : 	DWORD dwIndex;
; 517  : 	if (!GetMusicIndex(c_szFileName, &dwIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	56		 push	 esi
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00015	85 c0		 test	 eax, eax
  00017	75 16		 jne	 SHORT $LN2@FadeOutMus

; 518  : 	{
; 519  : 		Tracenf("FadeOutMusic: %s - ERROR NOT EXIST", c_szFileName);

  00019	56		 push	 esi
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
  0001f	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00024	83 c4 08	 add	 esp, 8
  00027	5f		 pop	 edi

; 531  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN2@FadeOutMus:

; 520  : 		return;
; 521  : 	}
; 522  : 
; 523  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00032	83 f8 03	 cmp	 eax, 3
  00035	72 16		 jb	 SHORT $LN3@FadeOutMus

; 524  : 	{
; 525  : 		Tracenf("FadeOutMusic: %s - ERROR OUT OF RANGE", c_szFileName);

  00037	56		 push	 esi
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
  0003d	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00042	83 c4 08	 add	 esp, 8
  00045	5f		 pop	 edi

; 531  : }

  00046	5e		 pop	 esi
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN3@FadeOutMus:

; 526  : 		return;
; 527  : 	}
; 528  : 
; 529  : 	m_MusicInstances[dwIndex].MusicState = MUSIC_STATE_FADE_OUT;
; 530  : 	m_MusicInstances[dwIndex].fVolumeSpeed = fVolumeSpeed;

  0004d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  00052	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00055	c7 44 87 34 03
	00 00 00	 mov	 DWORD PTR [edi+eax*4+52], 3
  0005d	f3 0f 11 44 87
	40		 movss	 DWORD PTR [edi+eax*4+64], xmm0
  00063	5f		 pop	 edi

; 531  : }

  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?FadeOutMusic@CSoundManager@@QAEXPBDM@Z ENDP		; CSoundManager::FadeOutMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeInMusic@CSoundManager@@QAEXPBDM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fVolumeSpeed$ = 12					; size = 4
?FadeInMusic@CSoundManager@@QAEXPBDM@Z PROC		; CSoundManager::FadeInMusic, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 456  : 	DWORD dwIndex;
; 457  : 	if (GetMusicIndex(c_szFileName, &dwIndex))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00013	85 c0		 test	 eax, eax
  00015	74 20		 je	 SHORT $LN5@FadeInMusi

; 458  : 	{
; 459  : 		m_MusicInstances[dwIndex].MusicState = MUSIC_STATE_FADE_IN;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]

; 460  : 		m_MusicInstances[dwIndex].fVolumeSpeed = fVolumeSpeed;

  0001a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  0001f	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00022	c7 44 86 34 02
	00 00 00	 mov	 DWORD PTR [esi+eax*4+52], 2
  0002a	f3 0f 11 44 86
	40		 movss	 DWORD PTR [esi+eax*4+64], xmm0
  00030	5e		 pop	 esi

; 475  : 		return;
; 476  : 	}
; 477  : 
; 478  : 	return;
; 479  : 
; 480  : 	// If there is no empty music slot, then play music on slot 0.
; 481  : 	/*
; 482  : 	StopMusic(0);
; 483  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 484  : 	*/
; 485  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN5@FadeInMusi:

; 461  : 		return;
; 462  : 	}
; 463  : 
; 464  : 	FadeOutAllMusic();

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?FadeOutAllMusic@CSoundManager@@QAEXXZ ; CSoundManager::FadeOutAllMusic

; 465  : 
; 466  : 	//Tracenf("FadeInMusic: %s", c_szFileName);
; 467  : 
; 468  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0003e	33 c0		 xor	 eax, eax
  00040	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
$LL4@FadeInMusi:

; 469  : 	{
; 470  : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 471  : 		if (MUSIC_STATE_OFF != rMusicInstance.MusicState)

  00043	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00046	74 10		 je	 SHORT $LN6@FadeInMusi

; 465  : 
; 466  : 	//Tracenf("FadeInMusic: %s", c_szFileName);
; 467  : 
; 468  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00048	40		 inc	 eax
  00049	83 c1 14	 add	 ecx, 20			; 00000014H
  0004c	83 f8 03	 cmp	 eax, 3
  0004f	7c f2		 jl	 SHORT $LL4@FadeInMusi
  00051	5e		 pop	 esi

; 475  : 		return;
; 476  : 	}
; 477  : 
; 478  : 	return;
; 479  : 
; 480  : 	// If there is no empty music slot, then play music on slot 0.
; 481  : 	/*
; 482  : 	StopMusic(0);
; 483  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 484  : 	*/
; 485  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN6@FadeInMusi:

; 472  : 			continue;
; 473  : 
; 474  : 		PlayMusic(i, c_szFileName, 0.0f, fVolumeSpeed);

  00058	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  0005d	83 ec 08	 sub	 esp, 8
  00060	8b ce		 mov	 ecx, esi
  00062	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00068	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0006f	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ; CSoundManager::PlayMusic
  00078	5e		 pop	 esi

; 475  : 		return;
; 476  : 	}
; 477  : 
; 478  : 	return;
; 479  : 
; 480  : 	// If there is no empty music slot, then play music on slot 0.
; 481  : 	/*
; 482  : 	StopMusic(0);
; 483  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 484  : 	*/
; 485  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
?FadeInMusic@CSoundManager@@QAEXPBDM@Z ENDP		; CSoundManager::FadeInMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayMusic@CSoundManager@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?PlayMusic@CSoundManager@@QAEXPBD@Z PROC		; CSoundManager::PlayMusic, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 451  : 	PlayMusic(0, c_szFileName, GetMusicVolume(), 0.0f);

  00004	51		 push	 ecx
  00005	8b f1		 mov	 esi, ecx
  00007	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0000e	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  00013	51		 push	 ecx
  00014	d9 1c 24	 fstp	 DWORD PTR [esp]
  00017	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	6a 00		 push	 0
  0001e	e8 00 00 00 00	 call	 ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ; CSoundManager::PlayMusic
  00023	5e		 pop	 esi

; 452  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?PlayMusic@CSoundManager@@QAEXPBD@Z ENDP		; CSoundManager::PlayMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopAllSound3D@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?StopAllSound3D@CSoundManager@@QAEXXZ PROC		; CSoundManager::StopAllSound3D, COMDAT
; _this$ = ecx

; 442  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 443  : 	for (int i = 0; i < CSoundManager3D::INSTANCE_MAX_COUNT; ++i)

  00004	33 f6		 xor	 esi, esi
$LL4@StopAllSou:

; 444  : 	{
; 445  : 		StopSound3D(i);

  00006	56		 push	 esi
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?StopSound3D@CSoundManager@@QAEXH@Z ; CSoundManager::StopSound3D
  0000e	46		 inc	 esi
  0000f	83 fe 20	 cmp	 esi, 32			; 00000020H
  00012	7c f2		 jl	 SHORT $LL4@StopAllSou

; 446  : 	}
; 447  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
?StopAllSound3D@CSoundManager@@QAEXXZ ENDP		; CSoundManager::StopAllSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolume3D@CSoundManager@@QAEXHM@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_fVolume$ = 12						; size = 4
?SetSoundVolume3D@CSoundManager@@QAEXHM@Z PROC		; CSoundManager::SetSoundVolume3D, COMDAT
; _this$ = ecx

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 433  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00003	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance

; 434  : 
; 435  : 	if (!pInstance)

  00010	85 c0		 test	 eax, eax
  00012	74 12		 je	 SHORT $LN1@SetSoundVo

; 436  : 		return;
; 437  : 
; 438  : 	pInstance->SetVolume(fVolume);

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  0001b	51		 push	 ecx
  0001c	8b c8		 mov	 ecx, eax
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	ff 52 24	 call	 DWORD PTR [edx+36]
$LN1@SetSoundVo:

; 439  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetSoundVolume3D@CSoundManager@@QAEXHM@Z ENDP		; CSoundManager::SetSoundVolume3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
_TEXT	SEGMENT
$T2 = -136						; size = 4
$T3 = -132						; size = 4
__Result$2$ = -128					; size = 4
$T4 = -124						; size = 4
$T5 = -120						; size = 4
$T6 = -116						; size = 4
$T7 = -112						; size = 4
_pInstance$ = -112					; size = 4
_this$GSCopy$1$ = -108					; size = 4
_c_szFileName$GSCopy$1$ = -104				; size = 4
__Myhead$8 = -100					; size = 4
$T9 = -96						; size = 4
tv1495 = -96						; size = 4
tv1463 = -96						; size = 4
$T10 = -96						; size = 4
_fTime$11 = -96						; size = 4
$T12 = -92						; size = 24
__Loc$13 = -80						; size = 12
__Loc$14 = -80						; size = 12
$T15 = -68						; size = 28
$T16 = -40						; size = 24
$T17 = -28						; size = 12
$T18 = -24						; size = 8
__New_array$19 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_bCheckFrequency$ = 24					; size = 4
?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z PROC	; CSoundManager::PlayCharacterSound3D, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 94	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	8b 7d 14	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00032	89 7d 98	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], edi

; 381  : 	if (0.0f == GetSoundVolume())

  00035	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	d9 5d a0	 fstp	 DWORD PTR tv1495[ebp]
  00040	0f 2e 45 a0	 ucomiss xmm0, DWORD PTR tv1495[ebp]
  00044	9f		 lahf
  00045	f6 c4 44	 test	 ah, 68			; 00000044H
  00048	0f 8b 4d 03 00
	00		 jnp	 $LN1@PlayCharac

; 382  : 		return;
; 383  : 
; 384  : 	if (bCheckFrequency)

  0004e	83 7d 18 00	 cmp	 DWORD PTR _bCheckFrequency$[ebp], 0
  00052	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00057	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fx$[ebp]
  0005c	0f 84 be 02 00
	00		 je	 $LN211@PlayCharac

; 385  : 	{
; 386  : 		static float s_fLimitDistance = 5000*5000;
; 387  : 		float fdx = (fx - m_fxPosition) * (fx - m_fxPosition);
; 388  : 		float fdy = (fy - m_fyPosition) * (fy - m_fyPosition);

  00062	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]
  00067	f3 0f 5c 4e 0c	 subss	 xmm1, DWORD PTR [esi+12]
  0006c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00070	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 389  : 
; 390  : 		if (fdx+fdy > s_fLimitDistance)

  00074	f3 0f 58 c1	 addss	 xmm0, xmm1
  00078	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA
  0007f	0f 87 16 03 00
	00		 ja	 $LN1@PlayCharac
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00085	8b cf		 mov	 ecx, edi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00087	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0008e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00095	c6 45 d8 00	 mov	 BYTE PTR $T16[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00099	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0009c	0f 1f 40 00	 npad	 4
$LL219@PlayCharac:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL219@PlayCharac
  000a7	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a9	51		 push	 ecx
  000aa	57		 push	 edi
  000ab	8d 4d d8	 lea	 ecx, DWORD PTR $T16[ebp]
  000ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000b3	8d 45 d8	 lea	 eax, DWORD PTR $T16[ebp]
  000b6	50		 push	 eax
  000b7	8d 45 b0	 lea	 eax, DWORD PTR __Loc$14[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 393  : 		std::map<std::string, float>::iterator itor = m_PlaySoundHistoryMap.find(c_szFileName);

  000ba	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000bd	50		 push	 eax
  000be	8b cf		 mov	 ecx, edi
  000c0	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000c5	8b 75 b8	 mov	 esi, DWORD PTR __Loc$14[ebp+8]
  000c8	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000cc	75 14		 jne	 SHORT $LN27@PlayCharac
  000ce	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  000d1	50		 push	 eax
  000d2	8d 45 d8	 lea	 eax, DWORD PTR $T16[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000db	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000de	84 c0		 test	 al, al
  000e0	74 02		 je	 SHORT $LN26@PlayCharac
$LN27@PlayCharac:

; 1463 :         return _Get_scary()->_Myhead;

  000e2	8b 37		 mov	 esi, DWORD PTR [edi]
$LN26@PlayCharac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000e4	8b 45 ec	 mov	 eax, DWORD PTR $T16[ebp+20]
  000e7	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ea	72 0d		 jb	 SHORT $LN45@PlayCharac

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ec	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	50		 push	 eax
  000ee	ff 75 d8	 push	 DWORD PTR $T16[ebp]
  000f1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000f6	83 c4 08	 add	 esp, 8
$LN45@PlayCharac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000f9	39 37		 cmp	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 394  : 		if (m_PlaySoundHistoryMap.end() != itor)

  000fb	74 2d		 je	 SHORT $LN6@PlayCharac

; 395  : 		{
; 396  : 			float fTime = itor->second;

  000fd	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]

; 397  : 			if (CTimer::Instance().GetCurrentSecond() - fTime < 0.3f)

  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00108	f3 0f 11 45 a0	 movss	 DWORD PTR _fTime$11[ebp], xmm0
  0010d	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00112	d8 65 a0	 fsub	 DWORD PTR _fTime$11[ebp]
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0011d	d9 5d a0	 fstp	 DWORD PTR tv1463[ebp]
  00120	0f 2f 45 a0	 comiss	 xmm0, DWORD PTR tv1463[ebp]
  00124	0f 87 71 02 00
	00		 ja	 $LN1@PlayCharac
$LN6@PlayCharac:

; 398  : 			{
; 399  : 				return;
; 400  : 			}
; 401  : 		}
; 402  : 
; 403  : 		m_PlaySoundHistoryMap.erase(c_szFileName);

  0012a	8b 75 98	 mov	 esi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  0012d	8d 4d a4	 lea	 ecx, DWORD PTR $T12[ebp]
  00130	56		 push	 esi
  00131	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00136	8d 45 a4	 lea	 eax, DWORD PTR $T12[ebp]
  00139	8b cf		 mov	 ecx, edi
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00141	8b 45 b8	 mov	 eax, DWORD PTR $T12[ebp+20]
  00144	83 f8 10	 cmp	 eax, 16			; 00000010H
  00147	72 0d		 jb	 SHORT $LN73@PlayCharac

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00149	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014a	50		 push	 eax
  0014b	ff 75 a4	 push	 DWORD PTR $T12[ebp]
  0014e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00153	83 c4 08	 add	 esp, 8
$LN73@PlayCharac:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 404  : 		m_PlaySoundHistoryMap.insert(std::map<std::string, float>::value_type(c_szFileName, CTimer::Instance().GetCurrentSecond()));

  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0015c	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00161	8b ce		 mov	 ecx, esi

; 4293 :         _Mypair._Myval2._Mysize = 0;

  00163	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 404  : 		m_PlaySoundHistoryMap.insert(std::map<std::string, float>::value_type(c_szFileName, CTimer::Instance().GetCurrentSecond()));

  0016a	d9 5d a0	 fstp	 DWORD PTR $T10[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0016d	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00174	c6 45 bc 00	 mov	 BYTE PTR $T15[ebp], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00178	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0017b	0f 1f 44 00 00	 npad	 5
$LL220@PlayCharac:
  00180	8a 01		 mov	 al, BYTE PTR [ecx]
  00182	41		 inc	 ecx
  00183	84 c0		 test	 al, al
  00185	75 f9		 jne	 SHORT $LL220@PlayCharac
  00187	2b ca		 sub	 ecx, edx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00189	51		 push	 ecx
  0018a	56		 push	 esi
  0018b	8d 4d bc	 lea	 ecx, DWORD PTR $T15[ebp]
  0018e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00193	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR $T10[ebp]
  00198	f3 0f 11 45 90	 movss	 DWORD PTR $T7[ebp], xmm0
  0019d	f3 0f 11 45 d4	 movss	 DWORD PTR $T15[ebp+24], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  001a2	8d 45 bc	 lea	 eax, DWORD PTR $T15[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 404  : 		m_PlaySoundHistoryMap.insert(std::map<std::string, float>::value_type(c_szFileName, CTimer::Instance().GetCurrentSecond()));

  001a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  001ac	50		 push	 eax
  001ad	8d 45 e4	 lea	 eax, DWORD PTR $T17[ebp]
  001b0	8b cf		 mov	 ecx, edi
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001b8	8b 75 d0	 mov	 esi, DWORD PTR $T15[ebp+20]
  001bb	8b 4d bc	 mov	 ecx, DWORD PTR $T15[ebp]
  001be	89 75 84	 mov	 DWORD PTR $T4[ebp], esi

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  001c1	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001c5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001c8	66 0f d6 45 b0	 movq	 QWORD PTR __Loc$13[ebp], xmm0

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001cd	89 4d a0	 mov	 DWORD PTR $T9[ebp], ecx
  001d0	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001d4	75 18		 jne	 SHORT $LN102@PlayCharac
  001d6	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef

; 127  :         return _Left < _Right;

  001d9	50		 push	 eax
  001da	8d 45 bc	 lea	 eax, DWORD PTR $T15[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  001e3	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001e6	84 c0		 test	 al, al
  001e8	0f 84 11 01 00
	00		 je	 $LN193@PlayCharac
$LN102@PlayCharac:

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  001ee	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  001f5	0f 84 bd 01 00
	00		 je	 $LN225@PlayCharac

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  001fb	8b 07		 mov	 eax, DWORD PTR [edi]
  001fd	89 45 9c	 mov	 DWORD PTR __Myhead$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1040 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00200	89 7d e8	 mov	 DWORD PTR $T18[ebp], edi

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00203	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00205	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 1047 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00209	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+4], 0

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00210	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 1048 :         _Ptr = _Al.allocate(1);

  00215	8b f0		 mov	 esi, eax

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00217	83 c4 04	 add	 esp, 4

; 1048 :         _Ptr = _Al.allocate(1);

  0021a	89 b5 7c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esi
  00220	89 75 ec	 mov	 DWORD PTR $T18[ebp+4], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00223	83 7d 84 10	 cmp	 DWORD PTR $T4[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00227	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0022a	8b 55 cc	 mov	 edx, DWORD PTR $T15[ebp+16]

; 2144 :         const value_type* _Result = _Bx._Buf;

  0022d	8d 4d bc	 lea	 ecx, DWORD PTR $T15[ebp]

; 2145 :         if (_Large_string_engaged()) {

  00230	0f 43 4d a0	 cmovae	 ecx, DWORD PTR $T9[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 805  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00234	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00238	89 45 8c	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  0023b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00242	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2145 :         if (_Large_string_engaged()) {

  00249	89 4d 80	 mov	 DWORD PTR __Result$2$[ebp], ecx

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0024c	89 55 88	 mov	 DWORD PTR $T5[ebp], edx
  0024f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00252	73 0d		 jae	 SHORT $LN143@PlayCharac

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00254	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  00257	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0025c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 2663 :             return;

  0025f	eb 50		 jmp	 SHORT $LN142@PlayCharac
$LN143@PlayCharac:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();
; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00261	8b c2		 mov	 eax, edx
  00263	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00268	83 c8 0f	 or	 eax, 15			; 0000000fH
  0026b	3b c1		 cmp	 eax, ecx
  0026d	0f 47 c1	 cmova	 eax, ecx
  00270	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00276	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0027d	8b f0		 mov	 esi, eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  0027f	8d 45 ec	 lea	 eax, DWORD PTR __New_array$19[ebp]
  00282	50		 push	 eax
  00283	ff 75 8c	 push	 DWORD PTR $T6[ebp]
  00286	89 75 ec	 mov	 DWORD PTR __New_array$19[ebp], esi
  00289	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0028e	8b 4d 88	 mov	 ecx, DWORD PTR $T5[ebp]
  00291	41		 inc	 ecx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00292	51		 push	 ecx
  00293	ff 75 80	 push	 DWORD PTR __Result$2$[ebp]
  00296	56		 push	 esi
  00297	e8 00 00 00 00	 call	 _memcpy
  0029c	8b 45 8c	 mov	 eax, DWORD PTR $T6[ebp]
  0029f	83 c4 18	 add	 esp, 24			; 00000018H
  002a2	8b b5 7c ff ff
	ff		 mov	 esi, DWORD PTR $T3[ebp]
  002a8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  002ae	8b 55 88	 mov	 edx, DWORD PTR $T5[ebp]
$LN142@PlayCharac:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

  002b1	89 50 10	 mov	 DWORD PTR [eax+16], edx
  002b4	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  002b7	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR $T7[ebp]
  002bc	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002c1	8d 45 9c	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  002c4	50		 push	 eax
  002c5	56		 push	 esi
  002c6	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002cb	8d 45 9c	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  002ce	50		 push	 eax
  002cf	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002d8	8d 45 9c	 lea	 eax, DWORD PTR __Myhead$8[ebp]
  002db	50		 push	 eax
  002dc	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * &>
  002e5	83 c4 18	 add	 esp, 24			; 00000018H

; 810  :         this->_Ptr->_Color = _Red;

  002e8	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002ee	8b cf		 mov	 ecx, edi
  002f0	56		 push	 esi
  002f1	ff 75 b4	 push	 DWORD PTR __Loc$13[ebp+4]
  002f4	ff 75 b0	 push	 DWORD PTR __Loc$13[ebp]
  002f7	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
  002fc	8b 75 84	 mov	 esi, DWORD PTR $T4[ebp]
$LN193@PlayCharac:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 404  : 		m_PlaySoundHistoryMap.insert(std::map<std::string, float>::value_type(c_szFileName, CTimer::Instance().GetCurrentSecond()));

  002ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00306	83 fe 10	 cmp	 esi, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00309	72 0f		 jb	 SHORT $LN221@PlayCharac

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0030b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0030e	50		 push	 eax
  0030f	ff 75 a0	 push	 DWORD PTR $T9[ebp]
  00312	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00317	83 c4 08	 add	 esp, 8
$LN221@PlayCharac:
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 409  : 	if (!GetSoundInstance3D(c_szFileName, &pInstance))

  0031a	8b 7d 98	 mov	 edi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  0031d	8b 75 94	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN211@PlayCharac:
  00320	8d 45 90	 lea	 eax, DWORD PTR _pInstance$[ebp]
  00323	8b ce		 mov	 ecx, esi
  00325	50		 push	 eax
  00326	57		 push	 edi
  00327	e8 00 00 00 00	 call	 ?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance3D
  0032c	85 c0		 test	 eax, eax
  0032e	74 6b		 je	 SHORT $LN1@PlayCharac

; 410  : 		return;
; 411  : 
; 412  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fSoundScale,

  00330	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00335	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00338	f3 0f 5c 46 14	 subss	 xmm0, DWORD PTR [esi+20]
  0033d	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  00342	8b 7d 90	 mov	 edi, DWORD PTR _pInstance$[ebp]
  00345	8b cf		 mov	 ecx, edi
  00347	f3 0f 5e c1	 divss	 xmm0, xmm1
  0034b	8b 07		 mov	 eax, DWORD PTR [edi]
  0034d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00353	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00358	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]
  0035d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00361	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00367	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0036c	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]
  00371	f3 0f 5e c1	 divss	 xmm0, xmm1
  00375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037a	ff 50 2c	 call	 DWORD PTR [eax+44]

; 413  : 						   (fy - m_fyPosition) / m_fSoundScale,
; 414  : 						   (fz - m_fzPosition) / m_fSoundScale);
; 415  : 
; 416  : 	pInstance->SetVolume(GetSoundVolume());

  0037d	8b 4d 94	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00380	8b 37		 mov	 esi, DWORD PTR [edi]
  00382	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00387	51		 push	 ecx
  00388	8b cf		 mov	 ecx, edi
  0038a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0038d	ff 56 24	 call	 DWORD PTR [esi+36]

; 417  : 	pInstance->Play(1);

  00390	8b 07		 mov	 eax, DWORD PTR [edi]
  00392	8b cf		 mov	 ecx, edi
  00394	6a 00		 push	 0
  00396	6a 01		 push	 1
  00398	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@PlayCharac:

; 418  : }

  0039b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0039e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a5	59		 pop	 ecx
  003a6	5f		 pop	 edi
  003a7	5e		 pop	 esi
  003a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ab	33 cd		 xor	 ecx, ebp
  003ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c2 14 00	 ret	 20			; 00000014H
$LN225@PlayCharac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 1720 :             _Throw_tree_length_error();

  003b8	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN223@PlayCharac:
  003bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$2:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR $T15[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@QAE@XZ
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$8:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T18[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$7:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR $T18[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ENDP	; CSoundManager::PlayCharacterSound3D
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv203 = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_iPlayCount$ = 24					; size = 4
?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z PROC	; CSoundManager::PlayAmbienceSound3D, COMDAT
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi

; 358  : 	if (0.0f == GetSoundVolume())

  0000e	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00013	d9 5d fc	 fstp	 DWORD PTR tv203[ebp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv203[ebp]
  0001d	9f		 lahf
  0001e	f6 c4 44	 test	 ah, 68			; 00000044H
  00021	0f 8b 9d 00 00
	00		 jnp	 $LN6@PlayAmbien

; 359  : 		return -1;
; 360  : 
; 361  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00027	ff 75 14	 push	 DWORD PTR _c_szFileName$[ebp]
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0002f	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance
  00034	8b f8		 mov	 edi, eax

; 362  : 	if (-1 == iIndex)

  00036	83 ff ff	 cmp	 edi, -1
  00039	0f 84 85 00 00
	00		 je	 $LN6@PlayAmbien

; 363  : 		return -1;
; 364  : 
; 365  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  0003f	57		 push	 edi
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00045	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  0004a	8b d8		 mov	 ebx, eax

; 366  : 	if (!pInstance)

  0004c	85 db		 test	 ebx, ebx
  0004e	74 74		 je	 SHORT $LN6@PlayAmbien

; 367  : 		return -1;
; 368  : 
; 369  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fAmbienceSoundScale,

  00050	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00055	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00058	f3 0f 5c 46 14	 subss	 xmm0, DWORD PTR [esi+20]
  0005d	f3 0f 10 4e 1c	 movss	 xmm1, DWORD PTR [esi+28]
  00062	8b cb		 mov	 ecx, ebx
  00064	8b 13		 mov	 edx, DWORD PTR [ebx]
  00066	f3 0f 5e c1	 divss	 xmm0, xmm1
  0006a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00070	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00075	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]
  0007a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0007e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00084	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00089	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]
  0008e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	ff 52 2c	 call	 DWORD PTR [edx+44]

; 370  : 						   (fy - m_fyPosition) / m_fAmbienceSoundScale,
; 371  : 						   (fz - m_fzPosition) / m_fAmbienceSoundScale);
; 372  : 
; 373  : 	pInstance->SetVolume(GetSoundVolume());

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0009f	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  000a4	51		 push	 ecx
  000a5	8b cb		 mov	 ecx, ebx
  000a7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000aa	ff 56 24	 call	 DWORD PTR [esi+36]

; 374  : 	pInstance->Play(iPlayCount);

  000ad	8b 03		 mov	 eax, DWORD PTR [ebx]
  000af	8b cb		 mov	 ecx, ebx
  000b1	6a 00		 push	 0
  000b3	ff 75 18	 push	 DWORD PTR _iPlayCount$[ebp]
  000b6	ff 50 10	 call	 DWORD PTR [eax+16]

; 375  : 
; 376  : 	return iIndex;

  000b9	8b c7		 mov	 eax, edi
  000bb	5f		 pop	 edi

; 377  : }

  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 14 00	 ret	 20			; 00000014H
$LN6@PlayAmbien:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	83 c8 ff	 or	 eax, -1
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 14 00	 ret	 20			; 00000014H
?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ENDP	; CSoundManager::PlayAmbienceSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopSound3D@CSoundManager@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?StopSound3D@CSoundManager@@QAEXH@Z PROC		; CSoundManager::StopSound3D, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00003	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance

; 423  : 
; 424  : 	if (!pInstance)

  00010	85 c0		 test	 eax, eax
  00012	74 07		 je	 SHORT $LN1@StopSound3

; 425  : 		return;
; 426  : 
; 427  : 	pInstance->Stop();

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	8b c8		 mov	 ecx, eax
  00018	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN1@StopSound3:

; 428  : 	//bool bisDone = pInstance->IsDone();
; 429  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?StopSound3D@CSoundManager@@QAEXH@Z ENDP		; CSoundManager::StopSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z
_TEXT	SEGMENT
tv201 = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_iPlayCount$ = 24					; size = 4
?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z PROC		; CSoundManager::PlaySound3D, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 337  : 	if (0.0f == GetSoundVolume())

  00007	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0000c	d9 5d fc	 fstp	 DWORD PTR tv201[ebp]
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
  00012	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv201[ebp]
  00016	9f		 lahf
  00017	f6 c4 44	 test	 ah, 68			; 00000044H
  0001a	0f 8b 8f 00 00
	00		 jnp	 $LN1@PlaySound3

; 338  : 		return;
; 339  : 
; 340  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00020	ff 75 14	 push	 DWORD PTR _c_szFileName$[ebp]
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00028	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance

; 341  : 	if (-1 == iIndex)

  0002d	83 f8 ff	 cmp	 eax, -1
  00030	74 7d		 je	 SHORT $LN1@PlaySound3

; 342  : 		return;
; 343  : 
; 344  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00039	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  0003e	8b f8		 mov	 edi, eax

; 345  : 	if (!pInstance)

  00040	85 ff		 test	 edi, edi
  00042	74 6a		 je	 SHORT $LN6@PlaySound3

; 346  : 		return;
; 347  : 
; 348  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fSoundScale,

  00044	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00049	8b cf		 mov	 ecx, edi
  0004b	f3 0f 5c 43 14	 subss	 xmm0, DWORD PTR [ebx+20]
  00050	f3 0f 10 4b 18	 movss	 xmm1, DWORD PTR [ebx+24]
  00055	56		 push	 esi
  00056	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00059	8b 17		 mov	 edx, DWORD PTR [edi]
  0005b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0005f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00065	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0006a	f3 0f 5c 43 10	 subss	 xmm0, DWORD PTR [ebx+16]
  0006f	f3 0f 5e c1	 divss	 xmm0, xmm1
  00073	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00079	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0007e	f3 0f 5c 43 0c	 subss	 xmm0, DWORD PTR [ebx+12]
  00083	f3 0f 5e c1	 divss	 xmm0, xmm1
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	ff 52 2c	 call	 DWORD PTR [edx+44]

; 349  : 						   (fy - m_fyPosition) / m_fSoundScale,
; 350  : 						   (fz - m_fzPosition) / m_fSoundScale);
; 351  : 
; 352  : 	pInstance->SetVolume(GetSoundVolume());

  0008f	8b 37		 mov	 esi, DWORD PTR [edi]
  00091	8b cb		 mov	 ecx, ebx
  00093	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00098	51		 push	 ecx
  00099	8b cf		 mov	 ecx, edi
  0009b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009e	ff 56 24	 call	 DWORD PTR [esi+36]

; 353  : 	pInstance->Play(iPlayCount);

  000a1	8b 07		 mov	 eax, DWORD PTR [edi]
  000a3	8b cf		 mov	 ecx, edi
  000a5	6a 00		 push	 0
  000a7	ff 75 18	 push	 DWORD PTR _iPlayCount$[ebp]
  000aa	ff 50 10	 call	 DWORD PTR [eax+16]
  000ad	5e		 pop	 esi
$LN6@PlaySound3:
  000ae	5f		 pop	 edi
$LN1@PlaySound3:
  000af	5b		 pop	 ebx

; 354  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 14 00	 ret	 20			; 00000014H
?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z ENDP		; CSoundManager::PlaySound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlaySound2D@CSoundManager@@QAEXPBD@Z
_TEXT	SEGMENT
tv133 = -4						; size = 4
_pInstance$ = -4					; size = 4
_c_szFileName$ = 8					; size = 4
?PlaySound2D@CSoundManager@@QAEXPBD@Z PROC		; CSoundManager::PlaySound2D, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 324  : 	if (0.0f == GetSoundVolume())

  00007	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	d9 5d fc	 fstp	 DWORD PTR tv133[ebp]
  00012	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv133[ebp]
  00016	9f		 lahf
  00017	f6 c4 44	 test	 ah, 68			; 00000044H
  0001a	7b 36		 jnp	 SHORT $LN1@PlaySound2

; 325  : 		return;
; 326  : 
; 327  : 	ISoundInstance * pInstance;
; 328  : 	if (!GetSoundInstance2D(c_szFileName, &pInstance))

  0001c	8d 45 fc	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0001f	8b cb		 mov	 ecx, ebx
  00021	50		 push	 eax
  00022	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00025	e8 00 00 00 00	 call	 ?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance2D
  0002a	85 c0		 test	 eax, eax
  0002c	74 24		 je	 SHORT $LN1@PlaySound2

; 329  : 		return;
; 330  : 
; 331  : 	pInstance->SetVolume(GetSoundVolume());

  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	8b 7d fc	 mov	 edi, DWORD PTR _pInstance$[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	8b 37		 mov	 esi, DWORD PTR [edi]
  00037	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0003c	51		 push	 ecx
  0003d	8b cf		 mov	 ecx, edi
  0003f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00042	ff 56 24	 call	 DWORD PTR [esi+36]

; 332  : 	pInstance->Play(1);

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	8b cf		 mov	 ecx, edi
  00049	6a 00		 push	 0
  0004b	6a 01		 push	 1
  0004d	ff 50 10	 call	 DWORD PTR [eax+16]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
$LN1@PlaySound2:
  00052	5b		 pop	 ebx

; 333  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?PlaySound2D@CSoundManager@@QAEXPBD@Z ENDP		; CSoundManager::PlaySound2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetMusicVolume@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetMusicVolume@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetMusicVolume, COMDAT
; _this$ = ecx

; 294  : 	return m_fMusicVolume;

  00000	d9 41 24	 fld	 DWORD PTR [ecx+36]

; 295  : }

  00003	c3		 ret	 0
?GetMusicVolume@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundVolume@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetSoundVolume@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetSoundVolume, COMDAT
; _this$ = ecx

; 289  : 	return m_fSoundVolume;

  00000	d9 41 20	 fld	 DWORD PTR [ecx+32]

; 290  : }

  00003	c3		 ret	 0
?GetSoundVolume@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetSoundVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?RestoreVolume@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVolume@CSoundManager@@QAEXXZ PROC		; CSoundManager::RestoreVolume, COMDAT
; _this$ = ecx

; 562  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 563  : 	m_isSoundDisable = FALSE;
; 564  : 	__SetMusicVolume(m_fBackupMusicVolume);

  00003	51		 push	 ecx
  00004	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  00009	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00015	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 565  : 	SetSoundVolume(m_fBackupSoundVolume);

  0001a	f3 0f 10 46 2c	 movss	 xmm0, DWORD PTR [esi+44]
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  0002c	5e		 pop	 esi

; 566  : }

  0002d	c3		 ret	 0
?RestoreVolume@CSoundManager@@QAEXXZ ENDP		; CSoundManager::RestoreVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SaveVolume@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
_fBackupSoundVolume$1$ = -8				; size = 4
_fBackupMusicVolume$1$ = -4				; size = 4
?SaveVolume@CSoundManager@@QAEXXZ PROC			; CSoundManager::SaveVolume, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 549  : 	if (m_isSoundDisable)

  00009	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000d	75 4b		 jne	 SHORT $LN1@SaveVolume

; 550  : 		return;
; 551  : 
; 552  : 	float fBackupMusicVolume = m_fMusicVolume;

  0000f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _fBackupMusicVolume$1$[ebp], xmm0

; 553  : 	float fBackupSoundVolume = m_fSoundVolume;

  00019	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]

; 554  : 	__SetMusicVolume(0.0f);

  0001e	51		 push	 ecx
  0001f	f3 0f 11 45 f8	 movss	 DWORD PTR _fBackupSoundVolume$1$[ebp], xmm0
  00024	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0002b	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 555  : 	SetSoundVolume(0.0f);

  00030	51		 push	 ecx
  00031	8b ce		 mov	 ecx, esi
  00033	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0003a	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume

; 556  : 	m_fBackupMusicVolume = fBackupMusicVolume;

  0003f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fBackupMusicVolume$1$[ebp]
  00044	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0

; 557  : 	m_fBackupSoundVolume = fBackupSoundVolume;

  00049	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBackupSoundVolume$1$[ebp]
  0004e	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0

; 558  : 	m_isSoundDisable = TRUE;

  00053	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
$LN1@SaveVolume:
  0005a	5e		 pop	 esi

; 559  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?SaveVolume@CSoundManager@@QAEXXZ ENDP			; CSoundManager::SaveVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z
_TEXT	SEGMENT
_iGrade$ = 8						; size = 4
?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z PROC	; CSoundManager::SetSoundVolumeGrade, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 265  : 	float fVolume=__ConvertGradeVolumeToApplyVolume(iGrade);

  00004	ff 75 08	 push	 DWORD PTR _iGrade$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ; CSoundManager::__ConvertGradeVolumeToApplyVolume

; 266  : 	SetSoundVolume(fVolume);

  0000e	51		 push	 ecx
  0000f	8b ce		 mov	 ecx, esi
  00011	d9 1c 24	 fstp	 DWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  00019	5e		 pop	 esi

; 267  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z ENDP	; CSoundManager::SetSoundVolumeGrade
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetMusicVolume@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?SetMusicVolume@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetMusicVolume, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 	//float fVolume = __ConvertRatioVolumeToApplyVolume(fRatio);
; 284  : 	__SetMusicVolume(fVolume);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	51		 push	 ecx
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 285  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?SetMusicVolume@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fRatio$ = 8						; size = 4
?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z PROC	; CSoundManager::SetSoundVolumeRatio, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 	float fVolume = __ConvertRatioVolumeToApplyVolume(fRatio);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRatio$[ebp]
  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	8b f1		 mov	 esi, ecx
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume

; 278  : 	SetSoundVolume(fVolume);

  00016	51		 push	 ecx
  00017	8b ce		 mov	 ecx, esi
  00019	d9 1c 24	 fstp	 DWORD PTR [esp]
  0001c	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  00021	5e		 pop	 esi

; 279  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z ENDP	; CSoundManager::SetSoundVolumeRatio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolume@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?SetSoundVolume@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetSoundVolume, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 	if (m_isSoundDisable)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000f	75 45		 jne	 SHORT $LN5@SetSoundVo

; 201  : 	{
; 202  : 		m_fBackupSoundVolume = fVolume;
; 203  : 		return;
; 204  : 	}
; 205  : 
; 206  : 	fVolume = fMAX(fVolume, 0.0f);

  00011	83 ec 08	 sub	 esp, 8
  00014	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00026	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 207  : 	fVolume = fMIN(fVolume, 1.0f);

  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  0002e	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  00040	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 208  : 	m_fSoundVolume = fVolume;

  00043	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00048	83 c4 08	 add	 esp, 8

; 209  : 
; 210  : 	if (!m_isSoundDisable)

  0004b	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0004f	f3 0f 11 46 20	 movss	 DWORD PTR [esi+32], xmm0
  00054	75 05		 jne	 SHORT $LN3@SetSoundVo
$LN5@SetSoundVo:

; 211  : 	{
; 212  : 		m_fBackupSoundVolume = fVolume;
; 213  : 	}
; 214  : }

  00056	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0
$LN3@SetSoundVo:
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?SetSoundVolume@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetSoundVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fScale$ = 8						; size = 4
?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z PROC	; CSoundManager::SetAmbienceSoundScale, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 195  : 	m_fAmbienceSoundScale = fScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00008	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 196  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z ENDP	; CSoundManager::SetAmbienceSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundScale@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fScale$ = 8						; size = 4
?SetSoundScale@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetSoundScale, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	m_fSoundScale = fScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00008	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 191  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetSoundScale@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundScale@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetSoundScale@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetSoundScale, COMDAT
; _this$ = ecx

; 185  : 	return m_fSoundScale;

  00000	d9 41 18	 fld	 DWORD PTR [ecx+24]

; 186  : }

  00003	c3		 ret	 0
?GetSoundScale@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Update@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
tv616 = -8						; size = 4
tv588 = -4						; size = 4
?Update@CSoundManager@@QAEXXZ PROC			; CSoundManager::Update, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	// Update Information about 3D Sound
; 86   : 	ms_SoundManager3D.SetListenerPosition(0.0f, 0.0f, 0.0f);

  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	8b d9		 mov	 ebx, ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0001b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00023	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0002a	e8 00 00 00 00	 call	 ?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z ; CSoundManager3D::SetListenerPosition

; 87   : 
; 88   : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0002f	33 ff		 xor	 edi, edi
  00031	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
$LL4@Update:

; 89   : 	{
; 90   : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 91   : 		if (MUSIC_STATE_OFF == rMusicInstance.MusicState)

  00034	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00037	85 c0		 test	 eax, eax
  00039	0f 84 c1 00 00
	00		 je	 $LN2@Update

; 92   : 			continue;
; 93   : 
; 94   : 		switch (rMusicInstance.MusicState)

  0003f	83 e8 02	 sub	 eax, 2
  00042	74 5e		 je	 SHORT $LN8@Update
  00044	83 e8 01	 sub	 eax, 1
  00047	74 26		 je	 SHORT $LN14@Update
  00049	83 e8 01	 sub	 eax, 1
  0004c	0f 85 ae 00 00
	00		 jne	 $LN2@Update

; 102  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 103  : 					rMusicInstance.MusicState = MUSIC_STATE_PLAY;
; 104  : 				}
; 105  : 
; 106  : 				{
; 107  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 108  : 					if (pInstance)
; 109  : 						pInstance->SetVolume(rMusicInstance.fVolume);
; 110  : 				}
; 111  : 				break;
; 112  : 
; 113  : 			case MUSIC_STATE_FADE_LIMIT_OUT:
; 114  : 				rMusicInstance.fVolume -= rMusicInstance.fVolumeSpeed;

  00052	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00056	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 115  : 				if (rMusicInstance.fVolume <= rMusicInstance.fLimitVolume)

  0005b	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00060	0f 2f c8	 comiss	 xmm1, xmm0
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	72 77		 jb	 SHORT $LN22@Update

; 116  : 				{
; 117  : 					rMusicInstance.fVolume = rMusicInstance.fLimitVolume;

  00069	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 118  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 119  : 					rMusicInstance.MusicState = MUSIC_STATE_PLAY;
; 120  : 				}
; 121  : 				{
; 122  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 123  : 					if (pInstance)
; 124  : 						pInstance->SetVolume(rMusicInstance.fVolume);
; 125  : 				}
; 126  : 				break;

  0006d	eb 63		 jmp	 SHORT $LN25@Update
$LN14@Update:

; 127  : 			case MUSIC_STATE_FADE_OUT:
; 128  : 				rMusicInstance.fVolume -= rMusicInstance.fVolumeSpeed;

  0006f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00073	0f 57 c9	 xorps	 xmm1, xmm1
  00076	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 129  : 				if (rMusicInstance.fVolume <= 0.0f)

  0007b	0f 2f c8	 comiss	 xmm1, xmm0
  0007e	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00082	72 5c		 jb	 SHORT $LN22@Update

; 130  : 				{
; 131  : 					rMusicInstance.fVolume = 0.0f;
; 132  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 133  : 					rMusicInstance.MusicState = MUSIC_STATE_OFF;
; 134  : 
; 135  : 					StopMusic(i);

  00084	57		 push	 edi
  00085	8b cb		 mov	 ecx, ebx
  00087	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0008d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00094	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  0009b	e8 00 00 00 00	 call	 ?StopMusic@CSoundManager@@IAEXK@Z ; CSoundManager::StopMusic

; 136  : 				}
; 137  : 				{
; 138  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 139  : 					if (pInstance)
; 140  : 						pInstance->SetVolume(rMusicInstance.fVolume);

  000a0	eb 3e		 jmp	 SHORT $LN22@Update
$LN8@Update:

; 95   : 		{
; 96   : 			case MUSIC_STATE_FADE_IN:
; 97   : 				rMusicInstance.fVolume += rMusicInstance.fVolumeSpeed;

  000a2	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]

; 98   : 
; 99   : 				if (rMusicInstance.fVolume >= GetMusicVolume())

  000a7	8b cb		 mov	 ecx, ebx
  000a9	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  000ad	f3 0f 11 45 fc	 movss	 DWORD PTR tv588[ebp], xmm0
  000b2	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  000b6	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  000bb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv588[ebp]
  000c0	d9 5d f8	 fstp	 DWORD PTR tv616[ebp]
  000c3	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv616[ebp]
  000c7	72 17		 jb	 SHORT $LN22@Update

; 100  : 				{
; 101  : 					rMusicInstance.fVolume = GetMusicVolume();

  000c9	8b cb		 mov	 ecx, ebx
  000cb	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  000d0	d9 1e		 fstp	 DWORD PTR [esi]
$LN25@Update:

; 87   : 
; 88   : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  000d2	c7 46 fc 01 00
	00 00		 mov	 DWORD PTR [esi-4], 1
  000d9	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN22@Update:
  000e0	57		 push	 edi
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  000e6	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance
  000eb	85 c0		 test	 eax, eax
  000ed	74 11		 je	 SHORT $LN2@Update
  000ef	8b 10		 mov	 edx, DWORD PTR [eax]
  000f1	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000f5	51		 push	 ecx
  000f6	8b c8		 mov	 ecx, eax
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	ff 52 24	 call	 DWORD PTR [edx+36]
$LN2@Update:
  00100	47		 inc	 edi
  00101	83 c6 14	 add	 esi, 20			; 00000014H
  00104	83 ff 03	 cmp	 edi, 3
  00107	0f 8c 27 ff ff
	ff		 jl	 $LL4@Update

; 141  : 				}
; 142  : 				break;
; 143  : 		}
; 144  : 	}
; 145  : }

  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
?Update@CSoundManager@@QAEXXZ ENDP			; CSoundManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetDirection@CSoundManager@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_fxDir$ = 8						; size = 4
_fyDir$ = 12						; size = 4
_fzDir$ = 16						; size = 4
_fxUp$ = 20						; size = 4
_fyUp$ = 24						; size = 4
_fzUp$ = 28						; size = 4
?SetDirection@CSoundManager@@QAEXMMMMMM@Z PROC		; CSoundManager::SetDirection, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	ms_SoundManager3D.SetListenerDirection(fxDir, fyDir, fzDir, fxUp, fyUp, fzUp);

  00003	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fzUp$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00010	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00016	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fyUp$[ebp]
  0001b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00021	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fxUp$[ebp]
  00026	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0002c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fzDir$[ebp]
  00031	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00037	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyDir$[ebp]
  0003c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxDir$[ebp]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	e8 00 00 00 00	 call	 ?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z ; CSoundManager3D::SetListenerDirection

; 81   : }

  00051	5d		 pop	 ebp
  00052	c2 18 00	 ret	 24			; 00000018H
?SetDirection@CSoundManager@@QAEXMMMMMM@Z ENDP		; CSoundManager::SetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetPosition@CSoundManager@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CSoundManager@@QAEXMMM@Z PROC		; CSoundManager::SetPosition, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	m_fxPosition = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 74   : 	m_fyPosition = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 75   : 	m_fzPosition = fz;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001c	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 76   : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSoundManager@@QAEXMMM@Z ENDP		; CSoundManager::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Destroy@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundManager@@QAEXXZ PROC			; CSoundManager::Destroy, COMDAT
; _this$ = ecx

; 66   : 	ms_SoundManagerStream.Destroy();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e8 00 00 00 00	 call	 ?Destroy@CSoundManagerStream@@QAEXXZ ; CSoundManagerStream::Destroy

; 67   : 	ms_SoundManager3D.Destroy();

  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000f	e8 00 00 00 00	 call	 ?Destroy@CSoundManager3D@@QAEXXZ ; CSoundManager3D::Destroy

; 68   : 	ms_SoundManager2D.Destroy();

  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00019	e9 00 00 00 00	 jmp	 ?Destroy@CSoundManager2D@@QAEXXZ ; CSoundManager2D::Destroy
?Destroy@CSoundManager@@QAEXXZ ENDP			; CSoundManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Create@CSoundManager@@QAEHXZ
_TEXT	SEGMENT
?Create@CSoundManager@@QAEHXZ PROC			; CSoundManager::Create, COMDAT
; _this$ = ecx

; 44   : 	if (!ms_SoundManager2D.Initialize()) {

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e8 00 00 00 00	 call	 ?Initialize@CSoundManager2D@@QAE_NXZ ; CSoundManager2D::Initialize
  0000a	84 c0		 test	 al, al
  0000c	75 10		 jne	 SHORT $LN2@Create

; 45   : 		Tracen("CSoundManager::Create - Sound2D::Initialize - FAILURE");

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@
  00013	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00018	83 c4 04	 add	 esp, 4

; 46   : 		return FALSE;

  0001b	33 c0		 xor	 eax, eax

; 62   : }

  0001d	c3		 ret	 0
$LN2@Create:

; 47   : 	}
; 48   : 
; 49   : 	if (!ms_SoundManagerStream.Initialize())

  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00023	e8 00 00 00 00	 call	 ?Initialize@CSoundManagerStream@@QAE_NXZ ; CSoundManagerStream::Initialize
  00028	84 c0		 test	 al, al
  0002a	75 10		 jne	 SHORT $LN3@Create

; 50   : 	{
; 51   : 		Tracen("CSoundManager::Create - SoundStream::Initialize - FAILURE");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@
  00031	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00036	83 c4 04	 add	 esp, 4

; 52   : 		return FALSE;

  00039	33 c0		 xor	 eax, eax

; 62   : }

  0003b	c3		 ret	 0
$LN3@Create:

; 53   : 	}
; 54   : 
; 55   : 	if (!ms_SoundManager3D.Initialize())

  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00041	e8 00 00 00 00	 call	 ?Initialize@CSoundManager3D@@QAE_NXZ ; CSoundManager3D::Initialize
  00046	84 c0		 test	 al, al
  00048	75 10		 jne	 SHORT $LN4@Create

; 56   : 	{
; 57   : 		Tracen("CSoundManager::Create - Sound3D::Initialize - FAILURE");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@
  0004f	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00054	83 c4 04	 add	 esp, 4

; 58   : 		return FALSE;

  00057	33 c0		 xor	 eax, eax

; 62   : }

  00059	c3		 ret	 0
$LN4@Create:

; 59   : 	}
; 60   : 
; 61   : 	return TRUE;

  0005a	b8 01 00 00 00	 mov	 eax, 1

; 62   : }

  0005f	c3		 ret	 0
?Create@CSoundManager@@QAEHXZ ENDP			; CSoundManager::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ??1CSoundManager@@UAE@XZ
_TEXT	SEGMENT
??1CSoundManager@@UAE@XZ PROC				; CSoundManager::~CSoundManager, COMDAT
; _this$ = ecx

; 39   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 40   : }

  00004	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b ce		 mov	 ecx, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 39   : {

  00009	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSoundManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	ff 70 04	 push	 DWORD PTR [eax+4]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 689  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0001a	6a 2c		 push	 44			; 0000002cH
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00023	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 19   : 	{

  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 40   : }

  00038	c3		 ret	 0
??1CSoundManager@@UAE@XZ ENDP				; CSoundManager::~CSoundManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp
;	COMDAT ??0CSoundManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Pnode$2 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSoundManager@@QAE@XZ PROC				; CSoundManager::CSoundManager, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSoundManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, ebx ; CSingleton<CSoundManager>::ms_singleton
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 12   : {

  00033	8d 7b 6c	 lea	 edi, DWORD PTR [ebx+108]
  00036	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CSoundManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003c	6a 2c		 push	 44			; 0000002cH
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 12   : {

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00048	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0004e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00055	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  0005a	8b f0		 mov	 esi, eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0005f	50		 push	 eax
  00060	56		 push	 esi
  00061	89 75 f0	 mov	 DWORD PTR __Pnode$2[ebp], esi
  00064	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00069	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  0006c	50		 push	 eax
  0006d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00076	8d 45 f0	 lea	 eax, DWORD PTR __Pnode$2[ebp]
  00079	50		 push	 eax
  0007a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> * const &>

; 347  :         _Pnode->_Color = _Black;

  00083	66 c7 46 0c 01
	01		 mov	 WORD PTR [esi+12], 257	; 00000101H
  00089	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0008c	89 37		 mov	 DWORD PTR [edi], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundManager.cpp

; 36   : }

  0008e	8b c3		 mov	 eax, ebx
  00090	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00097	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  0009e	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  000a5	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  000ac	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  000b3	c7 43 18 00 00
	48 43		 mov	 DWORD PTR [ebx+24], 1128792064 ; 43480000H
  000ba	c7 43 1c 00 00
	7a 44		 mov	 DWORD PTR [ebx+28], 1148846080 ; 447a0000H
  000c1	c7 43 20 00 00
	80 3f		 mov	 DWORD PTR [ebx+32], 1065353216 ; 3f800000H
  000c8	c7 43 24 00 00
	80 3f		 mov	 DWORD PTR [ebx+36], 1065353216 ; 3f800000H
  000cf	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0
  000d6	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  000dd	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], 0
  000e4	c7 43 44 00 00
	00 00		 mov	 DWORD PTR [ebx+68], 0
  000eb	c7 43 34 00 00
	00 00		 mov	 DWORD PTR [ebx+52], 0
  000f2	c7 43 38 00 00
	00 00		 mov	 DWORD PTR [ebx+56], 0
  000f9	c7 43 40 00 00
	00 00		 mov	 DWORD PTR [ebx+64], 0
  00100	c7 43 48 00 00
	00 00		 mov	 DWORD PTR [ebx+72], 0
  00107	c7 43 4c 00 00
	00 00		 mov	 DWORD PTR [ebx+76], 0
  0010e	c7 43 54 00 00
	00 00		 mov	 DWORD PTR [ebx+84], 0
  00115	c7 43 58 00 00
	00 00		 mov	 DWORD PTR [ebx+88], 0
  0011c	c7 43 5c 00 00
	00 00		 mov	 DWORD PTR [ebx+92], 0
  00123	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0
  0012a	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [ebx+104], 0
  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSoundManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCSoundManager@@@@UAE@XZ ; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CSoundManager@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSoundManager@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSoundManager@@QAE@XZ ENDP				; CSoundManager::CSoundManager
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z PROC	; CSingleton<CSoundManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z ENDP	; CSingleton<CSoundManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCSoundManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCSoundManager@@@@UAE@XZ PROC		; CSingleton<CSoundManager>::~CSingleton<CSoundManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCSoundManager@@@@UAE@XZ ENDP		; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2135 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2153 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2981 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4221 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4203 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4207 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0008c	50		 push	 eax

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00093	e8 00 00 00 00	 call	 _memcpy

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2981 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 2981 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2981 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4222 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL13@basic_stri:

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL13@basic_stri
  00027	2b c7		 sub	 eax, edi

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  00032	5f		 pop	 edi
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
