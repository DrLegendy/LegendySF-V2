; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1ISoundInstance@@UAE@XZ			; ISoundInstance::~ISoundInstance
PUBLIC	??_GISoundInstance@@UAEPAXI@Z			; ISoundInstance::`scalar deleting destructor'
PUBLIC	??0CSoundInstance3D@@QAE@XZ			; CSoundInstance3D::CSoundInstance3D
PUBLIC	??1CSoundInstance3D@@UAE@XZ			; CSoundInstance3D::~CSoundInstance3D
PUBLIC	?Initialize@CSoundInstance3D@@UAE_NXZ		; CSoundInstance3D::Initialize
PUBLIC	?Destroy@CSoundInstance3D@@UAEXXZ		; CSoundInstance3D::Destroy
PUBLIC	?SetSound@CSoundInstance3D@@UAE_NPAVCSoundData@@@Z ; CSoundInstance3D::SetSound
PUBLIC	?Play@CSoundInstance3D@@UBEXHK@Z		; CSoundInstance3D::Play
PUBLIC	?Pause@CSoundInstance3D@@UBEXXZ			; CSoundInstance3D::Pause
PUBLIC	?Resume@CSoundInstance3D@@UBEXXZ		; CSoundInstance3D::Resume
PUBLIC	?Stop@CSoundInstance3D@@UAEXXZ			; CSoundInstance3D::Stop
PUBLIC	?GetVolume@CSoundInstance3D@@UBEXAAM@Z		; CSoundInstance3D::GetVolume
PUBLIC	?SetVolume@CSoundInstance3D@@UBEXM@Z		; CSoundInstance3D::SetVolume
PUBLIC	?IsDone@CSoundInstance3D@@UBE_NXZ		; CSoundInstance3D::IsDone
PUBLIC	?SetPosition@CSoundInstance3D@@UBEXMMM@Z	; CSoundInstance3D::SetPosition
PUBLIC	?SetOrientation@CSoundInstance3D@@UBEXMMMMMM@Z	; CSoundInstance3D::SetOrientation
PUBLIC	?SetVelocity@CSoundInstance3D@@UBEXMMMM@Z	; CSoundInstance3D::SetVelocity
PUBLIC	?UpdatePosition@CSoundInstance3D@@QAEXM@Z	; CSoundInstance3D::UpdatePosition
PUBLIC	??_GCSoundInstance3D@@UAEPAXI@Z			; CSoundInstance3D::`scalar deleting destructor'
PUBLIC	??_7ISoundInstance@@6B@				; ISoundInstance::`vftable'
PUBLIC	??_7CSoundInstance3D@@6B@			; CSoundInstance3D::`vftable'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs@			; `string'
PUBLIC	??_R4ISoundInstance@@6B@			; ISoundInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVISoundInstance@@@8			; ISoundInstance `RTTI Type Descriptor'
PUBLIC	??_R3ISoundInstance@@8				; ISoundInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISoundInstance@@8				; ISoundInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISoundInstance@@8			; ISoundInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSoundBase@@8			; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSoundBase@@@8				; CSoundBase `RTTI Type Descriptor'
PUBLIC	??_R3CSoundBase@@8				; CSoundBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundBase@@8				; CSoundBase::`RTTI Base Class Array'
PUBLIC	??_R4CSoundInstance3D@@6B@			; CSoundInstance3D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundInstance3D@@@8			; CSoundInstance3D `RTTI Type Descriptor'
PUBLIC	??_R3CSoundInstance3D@@8			; CSoundInstance3D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundInstance3D@@8			; CSoundInstance3D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundInstance3D@@8		; CSoundInstance3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__AIL_last_error@0:PROC
EXTRN	__imp__AIL_allocate_3D_sample_handle@4:PROC
EXTRN	__imp__AIL_release_3D_sample_handle@4:PROC
EXTRN	__imp__AIL_start_3D_sample@4:PROC
EXTRN	__imp__AIL_stop_3D_sample@4:PROC
EXTRN	__imp__AIL_resume_3D_sample@4:PROC
EXTRN	__imp__AIL_end_3D_sample@4:PROC
EXTRN	__imp__AIL_set_3D_sample_file@8:PROC
EXTRN	__imp__AIL_set_3D_sample_volume@8:PROC
EXTRN	__imp__AIL_set_3D_sample_loop_count@8:PROC
EXTRN	__imp__AIL_3D_sample_status@4:PROC
EXTRN	__imp__AIL_3D_sample_volume@4:PROC
EXTRN	__imp__AIL_set_3D_position@16:PROC
EXTRN	__imp__AIL_set_3D_velocity@20:PROC
EXTRN	__imp__AIL_update_3D_position@8:PROC
EXTRN	__imp__AIL_auto_update_3D_position@8:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?Get@CSoundData@@QAEPAXXZ:PROC			; CSoundData::Get
EXTRN	?Release@CSoundData@@QAEXXZ:PROC		; CSoundData::Release
EXTRN	?GetFileName@CSoundData@@QAEPBDXZ:PROC		; CSoundData::GetFileName
EXTRN	?SetPlayTime@CSoundData@@QAEXK@Z:PROC		; CSoundData::SetPlayTime
EXTRN	?GetPlayTime@CSoundData@@QAEKXZ:PROC		; CSoundData::GetPlayTime
EXTRN	??0CSoundBase@@QAE@XZ:PROC			; CSoundBase::CSoundBase
EXTRN	??1CSoundBase@@UAE@XZ:PROC			; CSoundBase::~CSoundBase
EXTRN	??_EISoundInstance@@UAEPAXI@Z:PROC		; ISoundInstance::`vector deleting destructor'
EXTRN	??_ECSoundInstance3D@@UAEPAXI@Z:PROC		; CSoundInstance3D::`vector deleting destructor'
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A:DWORD ; CSoundBase::ms_pProviderDefault
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundInstance3D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundInstance3D@@8 DD FLAT:??_R0?AVCSoundInstance3D@@@8 ; CSoundInstance3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundInstance3D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundInstance3D@@8
rdata$r	SEGMENT
??_R2CSoundInstance3D@@8 DD FLAT:??_R1A@?0A@EA@CSoundInstance3D@@8 ; CSoundInstance3D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISoundInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSoundInstance3D@@8
rdata$r	SEGMENT
??_R3CSoundInstance3D@@8 DD 00H				; CSoundInstance3D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CSoundInstance3D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundInstance3D@@@8
data$r	SEGMENT
??_R0?AVCSoundInstance3D@@@8 DD FLAT:??_7type_info@@6B@	; CSoundInstance3D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundInstance3D@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSoundInstance3D@@6B@
rdata$r	SEGMENT
??_R4CSoundInstance3D@@6B@ DD 00H			; CSoundInstance3D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundInstance3D@@@8
	DD	FLAT:??_R3CSoundInstance3D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundBase@@8
rdata$r	SEGMENT
??_R2CSoundBase@@8 DD FLAT:??_R1A@?0A@EA@CSoundBase@@8	; CSoundBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSoundBase@@8
rdata$r	SEGMENT
??_R3CSoundBase@@8 DD 00H				; CSoundBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundBase@@@8
data$r	SEGMENT
??_R0?AVCSoundBase@@@8 DD FLAT:??_7type_info@@6B@	; CSoundBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundBase@@8 DD FLAT:??_R0?AVCSoundBase@@@8 ; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISoundInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISoundInstance@@8 DD FLAT:??_R0?AVISoundInstance@@@8 ; ISoundInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2ISoundInstance@@8
rdata$r	SEGMENT
??_R2ISoundInstance@@8 DD FLAT:??_R1A@?0A@EA@ISoundInstance@@8 ; ISoundInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R3ISoundInstance@@8
rdata$r	SEGMENT
??_R3ISoundInstance@@8 DD 00H				; ISoundInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVISoundInstance@@@8
data$r	SEGMENT
??_R0?AVISoundInstance@@@8 DD FLAT:??_7type_info@@6B@	; ISoundInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVISoundInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4ISoundInstance@@6B@
rdata$r	SEGMENT
??_R4ISoundInstance@@6B@ DD 00H				; ISoundInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVISoundInstance@@@8
	DD	FLAT:??_R3ISoundInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CSoundInstance3D@@6B@
CONST	SEGMENT
??_7CSoundInstance3D@@6B@ DD FLAT:??_R4CSoundInstance3D@@6B@ ; CSoundInstance3D::`vftable'
	DD	FLAT:??_ECSoundInstance3D@@UAEPAXI@Z
	DD	FLAT:?Initialize@CSoundInstance3D@@UAE_NXZ
	DD	FLAT:?Destroy@CSoundInstance3D@@UAEXXZ
	DD	FLAT:?SetSound@CSoundInstance3D@@UAE_NPAVCSoundData@@@Z
	DD	FLAT:?Play@CSoundInstance3D@@UBEXHK@Z
	DD	FLAT:?Pause@CSoundInstance3D@@UBEXXZ
	DD	FLAT:?Resume@CSoundInstance3D@@UBEXXZ
	DD	FLAT:?Stop@CSoundInstance3D@@UAEXXZ
	DD	FLAT:?GetVolume@CSoundInstance3D@@UBEXAAM@Z
	DD	FLAT:?SetVolume@CSoundInstance3D@@UBEXM@Z
	DD	FLAT:?IsDone@CSoundInstance3D@@UBE_NXZ
	DD	FLAT:?SetPosition@CSoundInstance3D@@UBEXMMM@Z
	DD	FLAT:?SetOrientation@CSoundInstance3D@@UBEXMMMMMM@Z
	DD	FLAT:?SetVelocity@CSoundInstance3D@@UBEXMMMM@Z
CONST	ENDS
;	COMDAT ??_7ISoundInstance@@6B@
CONST	SEGMENT
??_7ISoundInstance@@6B@ DD FLAT:??_R4ISoundInstance@@6B@ ; ISoundInstance::`vftable'
	DD	FLAT:??_EISoundInstance@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSoundInstance3D@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundInstance3D@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundInstance3D@@UAEPAXI@Z PROC			; CSoundInstance3D::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundInstance3D@@UAE@XZ ; CSoundInstance3D::~CSoundInstance3D
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSoundInstance3D@@UAEPAXI@Z ENDP			; CSoundInstance3D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?UpdatePosition@CSoundInstance3D@@QAEXM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
?UpdatePosition@CSoundInstance3D@@QAEXM@Z PROC		; CSoundInstance3D::UpdatePosition, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : 	AIL_update_3D_position(m_sample, fElapsedTime);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00008	51		 push	 ecx
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	ff 71 04	 push	 DWORD PTR [ecx+4]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_update_3D_position@8

; 131  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?UpdatePosition@CSoundInstance3D@@QAEXM@Z ENDP		; CSoundInstance3D::UpdatePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?SetVelocity@CSoundInstance3D@@UBEXMMMM@Z
_TEXT	SEGMENT
_fDistanceX$ = 8					; size = 4
_fDistanceY$ = 12					; size = 4
_fDistanceZ$ = 16					; size = 4
_fNagnitude$ = 20					; size = 4
?SetVelocity@CSoundInstance3D@@UBEXMMMM@Z PROC		; CSoundInstance3D::SetVelocity, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 124  : 	AIL_set_3D_velocity(m_sample, fDistanceX, fDistanceY, fDistanceZ, fNagnitude);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fNagnitude$[ebp]
  00008	56		 push	 esi
  00009	83 ec 10	 sub	 esp, 16			; 00000010H
  0000c	8b f1		 mov	 esi, ecx
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fDistanceZ$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fDistanceY$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistanceX$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 76 04	 push	 DWORD PTR [esi+4]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_velocity@20

; 125  : 	AIL_auto_update_3D_position(m_sample, 1);

  0003d	6a 01		 push	 1
  0003f	ff 76 04	 push	 DWORD PTR [esi+4]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_auto_update_3D_position@8
  00048	5e		 pop	 esi

; 126  : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
?SetVelocity@CSoundInstance3D@@UBEXMMMM@Z ENDP		; CSoundInstance3D::SetVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?SetOrientation@CSoundInstance3D@@UBEXMMMMMM@Z
_TEXT	SEGMENT
_x_face$ = 8						; size = 4
_y_face$ = 12						; size = 4
_z_face$ = 16						; size = 4
_x_normal$ = 20						; size = 4
_y_normal$ = 24						; size = 4
_z_normal$ = 28						; size = 4
?SetOrientation@CSoundInstance3D@@UBEXMMMMMM@Z PROC	; CSoundInstance3D::SetOrientation, COMDAT
; _this$ = ecx

; 116  : 	assert(!" CSoundInstance3D::SetOrientation - Don't use this function");
; 117  : //	AIL_set_3D_orientation(m_sample,
; 118  : //						   x_face, y_face, z_face,
; 119  : //						   x_normal, y_normal, z_normal);
; 120  : }

  00000	c2 18 00	 ret	 24			; 00000018H
?SetOrientation@CSoundInstance3D@@UBEXMMMMMM@Z ENDP	; CSoundInstance3D::SetOrientation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?SetPosition@CSoundInstance3D@@UBEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CSoundInstance3D@@UBEXMMM@Z PROC		; CSoundInstance3D::SetPosition, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 	AIL_set_3D_position(m_sample, x, y, -z);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00012	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00018	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0001d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_position@16

; 111  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSoundInstance3D@@UBEXMMM@Z ENDP		; CSoundInstance3D::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?IsDone@CSoundInstance3D@@UBE_NXZ
_TEXT	SEGMENT
?IsDone@CSoundInstance3D@@UBE_NXZ PROC			; CSoundInstance3D::IsDone, COMDAT
; _this$ = ecx

; 62   : 	return AIL_3D_sample_status(m_sample) == SMP_DONE;

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_3D_sample_status@4
  00009	83 f8 02	 cmp	 eax, 2
  0000c	0f 94 c0	 sete	 al

; 63   : }

  0000f	c3		 ret	 0
?IsDone@CSoundInstance3D@@UBE_NXZ ENDP			; CSoundInstance3D::IsDone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?SetVolume@CSoundInstance3D@@UBEXM@Z
_TEXT	SEGMENT
_volume$ = 8						; size = 4
?SetVolume@CSoundInstance3D@@UBEXM@Z PROC		; CSoundInstance3D::SetVolume, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	volume = max(0.0f, min(1.0f, volume));

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000b	0f 57 c9	 xorps	 xmm1, xmm1
  0000e	f3 0f 5d 45 08	 minss	 xmm0, DWORD PTR _volume$[ebp]
  00013	0f 2f c8	 comiss	 xmm1, xmm0
  00016	77 03		 ja	 SHORT $LN5@SetVolume
  00018	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@SetVolume:

; 105  : 	AIL_set_3D_sample_volume(m_sample, volume);

  0001b	51		 push	 ecx
  0001c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00021	ff 71 04	 push	 DWORD PTR [ecx+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_sample_volume@8

; 106  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetVolume@CSoundInstance3D@@UBEXM@Z ENDP		; CSoundInstance3D::SetVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?GetVolume@CSoundInstance3D@@UBEXAAM@Z
_TEXT	SEGMENT
_rfVolume$ = 8						; size = 4
?GetVolume@CSoundInstance3D@@UBEXAAM@Z PROC		; CSoundInstance3D::GetVolume, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 	rfVolume = AIL_3D_sample_volume(m_sample);

  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_3D_sample_volume@4
  0000c	8b 45 08	 mov	 eax, DWORD PTR _rfVolume$[ebp]
  0000f	d9 18		 fstp	 DWORD PTR [eax]

; 100  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetVolume@CSoundInstance3D@@UBEXAAM@Z ENDP		; CSoundInstance3D::GetVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Stop@CSoundInstance3D@@UAEXXZ
_TEXT	SEGMENT
?Stop@CSoundInstance3D@@UAEXXZ PROC			; CSoundInstance3D::Stop, COMDAT
; _this$ = ecx

; 93   : 	AIL_end_3D_sample(m_sample);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_end_3D_sample@4

; 94   : //	m_sample = NULL;
; 95   : }

  00009	c3		 ret	 0
?Stop@CSoundInstance3D@@UAEXXZ ENDP			; CSoundInstance3D::Stop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Resume@CSoundInstance3D@@UBEXXZ
_TEXT	SEGMENT
?Resume@CSoundInstance3D@@UBEXXZ PROC			; CSoundInstance3D::Resume, COMDAT
; _this$ = ecx

; 88   : 	AIL_resume_3D_sample(m_sample);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_resume_3D_sample@4

; 89   : }

  00009	c3		 ret	 0
?Resume@CSoundInstance3D@@UBEXXZ ENDP			; CSoundInstance3D::Resume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Pause@CSoundInstance3D@@UBEXXZ
_TEXT	SEGMENT
?Pause@CSoundInstance3D@@UBEXXZ PROC			; CSoundInstance3D::Pause, COMDAT
; _this$ = ecx

; 83   : 	AIL_stop_3D_sample(m_sample);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_stop_3D_sample@4

; 84   : }

  00009	c3		 ret	 0
?Pause@CSoundInstance3D@@UBEXXZ ENDP			; CSoundInstance3D::Pause
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Play@CSoundInstance3D@@UBEXHK@Z
_TEXT	SEGMENT
_iLoopCount$ = 8					; size = 4
_dwPlayCycleTimeLimit$ = 12				; size = 4
?Play@CSoundInstance3D@@UBEXHK@Z PROC			; CSoundInstance3D::Play, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 67   : 	if (!m_pSoundData)

  00006	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000a	74 38		 je	 SHORT $LN1@Play

; 68   : 		return;
; 69   : 
; 70   : 	DWORD dwCurTime = ELTimer_GetMSec();

  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 71   : 
; 72   : 	if (dwCurTime - m_pSoundData->GetPlayTime() < dwPlayCycleTimeLimit)

  00012	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 ?GetPlayTime@CSoundData@@QAEKXZ ; CSoundData::GetPlayTime
  0001c	8b cf		 mov	 ecx, edi
  0001e	2b c8		 sub	 ecx, eax
  00020	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwPlayCycleTimeLimit$[ebp]
  00023	72 1e		 jb	 SHORT $LN5@Play

; 73   : 		return;
; 74   : 
; 75   : 	m_pSoundData->SetPlayTime(dwCurTime);

  00025	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ?SetPlayTime@CSoundData@@QAEXK@Z ; CSoundData::SetPlayTime

; 76   : 
; 77   : 	AIL_set_3D_sample_loop_count(m_sample, iLoopCount);

  0002e	ff 75 08	 push	 DWORD PTR _iLoopCount$[ebp]
  00031	ff 76 04	 push	 DWORD PTR [esi+4]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_sample_loop_count@8

; 78   : 	AIL_start_3D_sample(m_sample);

  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_start_3D_sample@4
$LN5@Play:
  00043	5f		 pop	 edi
$LN1@Play:
  00044	5e		 pop	 esi

; 79   : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?Play@CSoundInstance3D@@UBEXHK@Z ENDP			; CSoundInstance3D::Play
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?SetSound@CSoundInstance3D@@UAE_NPAVCSoundData@@@Z
_TEXT	SEGMENT
_pSoundData$ = 8					; size = 4
?SetSound@CSoundInstance3D@@UAE_NPAVCSoundData@@@Z PROC	; CSoundInstance3D::SetSound, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 36   : 	assert(m_sample != NULL && pSoundData != NULL);
; 37   : 
; 38   : 	LPVOID lpData = pSoundData->Get();

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pSoundData$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 ?Get@CSoundData@@QAEPAXXZ ; CSoundData::Get

; 39   : 
; 40   : 	if (m_pSoundData != NULL)

  00012	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00015	8b d8		 mov	 ebx, eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 0c		 je	 SHORT $LN2@SetSound

; 41   : 	{
; 42   : 		m_pSoundData->Release();

  0001b	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release

; 43   : 		m_pSoundData = NULL;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@SetSound:

; 44   : 	}
; 45   : 
; 46   : 	if (AIL_set_3D_sample_file(m_sample, lpData) == NULL)

  00027	53		 push	 ebx
  00028	ff 76 04	 push	 DWORD PTR [esi+4]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_sample_file@8
  00031	85 c0		 test	 eax, eax
  00033	75 2c		 jne	 SHORT $LN3@SetSound

; 47   : 	{
; 48   : 		TraceError("%s: %s", AIL_last_error(), pSoundData->GetFileName());

  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?GetFileName@CSoundData@@QAEPBDXZ ; CSoundData::GetFileName
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_last_error@0
  00043	50		 push	 eax
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
  00049	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 		pSoundData->Release();

  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release
  00058	5f		 pop	 edi

; 57   : 	return true;
; 58   : }

  00059	5e		 pop	 esi
  0005a	32 c0		 xor	 al, al
  0005c	5b		 pop	 ebx
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN3@SetSound:

; 50   : 		return false;
; 51   : 	}
; 52   : 
; 53   : 	m_pSoundData = pSoundData;
; 54   : 
; 55   : 	AIL_set_3D_position(m_sample, 0.0F, 0.0F, 0.0F);

  00061	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00067	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0006f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00077	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007e	ff 76 04	 push	 DWORD PTR [esi+4]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_position@16

; 56   : 	AIL_auto_update_3D_position(m_sample, 0);

  00087	6a 00		 push	 0
  00089	ff 76 04	 push	 DWORD PTR [esi+4]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_auto_update_3D_position@8
  00092	5f		 pop	 edi

; 57   : 	return true;
; 58   : }

  00093	5e		 pop	 esi
  00094	b0 01		 mov	 al, 1
  00096	5b		 pop	 ebx
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?SetSound@CSoundInstance3D@@UAE_NPAVCSoundData@@@Z ENDP	; CSoundInstance3D::SetSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Destroy@CSoundInstance3D@@UAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundInstance3D@@UAEXXZ PROC			; CSoundInstance3D::Destroy, COMDAT
; _this$ = ecx

; 15   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 16   : 	SAFE_RELEASE(m_pSoundData);

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0c		 je	 SHORT $LN2@Destroy
  0000a	e8 00 00 00 00	 call	 ?Release@CSoundData@@QAEXXZ ; CSoundData::Release
  0000f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Destroy:

; 17   : 
; 18   : 	if (m_sample)

  00016	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00019	85 c0		 test	 eax, eax
  0001b	74 0e		 je	 SHORT $LN3@Destroy

; 19   : 	{
; 20   : 		AIL_release_3D_sample_handle(m_sample);

  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_release_3D_sample_handle@4

; 21   : 		m_sample = NULL;

  00024	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@Destroy:

; 22   : 	}
; 23   : }

  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
?Destroy@CSoundInstance3D@@UAEXXZ ENDP			; CSoundInstance3D::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ?Initialize@CSoundInstance3D@@UAE_NXZ
_TEXT	SEGMENT
?Initialize@CSoundInstance3D@@UAE_NXZ PROC		; CSoundInstance3D::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 27   : 	if (m_sample)

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 04		 je	 SHORT $LN2@Initialize

; 28   : 		return true;

  00009	b0 01		 mov	 al, 1
  0000b	5e		 pop	 esi

; 32   : }

  0000c	c3		 ret	 0
$LN2@Initialize:

; 29   : 
; 30   : 	m_sample = AIL_allocate_3D_sample_handle(ms_pProviderDefault->hProvider);

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A ; CSoundBase::ms_pProviderDefault
  00012	ff 70 04	 push	 DWORD PTR [eax+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_allocate_3D_sample_handle@4

; 31   : 	return m_sample ? true : false;

  0001b	85 c0		 test	 eax, eax
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00020	5e		 pop	 esi
  00021	0f 95 c0	 setne	 al

; 32   : }

  00024	c3		 ret	 0
?Initialize@CSoundInstance3D@@UAE_NXZ ENDP		; CSoundInstance3D::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ??1CSoundInstance3D@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSoundInstance3D@@UAE@XZ PROC			; CSoundInstance3D::~CSoundInstance3D, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSoundInstance3D@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundInstance3D@@6B@

; 11   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CSoundInstance3D@@UAEXXZ ; CSoundInstance3D::Destroy
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h

; 10   : 	virtual ~ISoundInstance() {}

  00030	8b ce		 mov	 ecx, esi
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ISoundInstance@@6B@
  00038	e8 00 00 00 00	 call	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp

; 12   : }

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
  00051	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSoundInstance3D@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSoundInstance3D@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSoundInstance3D@@UAE@XZ ENDP			; CSoundInstance3D::~CSoundInstance3D
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp
;	COMDAT ??0CSoundInstance3D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSoundInstance3D@@QAE@XZ PROC			; CSoundInstance3D::CSoundInstance3D, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h

; 9    : 	ISoundInstance() {}

  0000a	e8 00 00 00 00	 call	 ??0CSoundBase@@QAE@XZ	; CSoundBase::CSoundBase
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance3D.cpp

; 6    : {

  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundInstance3D@@6B@

; 7    : }

  00015	8b c6		 mov	 eax, esi
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00025	5e		 pop	 esi
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CSoundInstance3D@@QAE@XZ ENDP			; CSoundInstance3D::CSoundInstance3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
;	COMDAT ??_GISoundInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GISoundInstance@@UAEPAXI@Z PROC			; ISoundInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	virtual ~ISoundInstance() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ISoundInstance@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0b		 je	 SHORT $LN7@scalar
  00017	6a 04		 push	 4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GISoundInstance@@UAEPAXI@Z ENDP			; ISoundInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\MilesLib\SoundInstance.h
;	COMDAT ??1ISoundInstance@@UAE@XZ
_TEXT	SEGMENT
??1ISoundInstance@@UAE@XZ PROC				; ISoundInstance::~ISoundInstance, COMDAT
; _this$ = ecx

; 10   : 	virtual ~ISoundInstance() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ISoundInstance@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
??1ISoundInstance@@UAE@XZ ENDP				; ISoundInstance::~ISoundInstance
_TEXT	ENDS
END
