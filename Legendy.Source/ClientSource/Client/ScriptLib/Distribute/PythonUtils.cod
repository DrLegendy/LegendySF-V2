; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
_BSS	SEGMENT
?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A DD 01H DUP (?) ; g_pkExceptionSender
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z	; PyTuple_GetString
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z	; PyTuple_GetByte
PUBLIC	?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z ; PyTuple_GetUnsignedInteger
PUBLIC	?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z	; PyTuple_GetLong
PUBLIC	?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z ; PyTuple_GetUnsignedLong
PUBLIC	?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z	; PyTuple_GetFloat
PUBLIC	?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z	; PyTuple_GetDouble
PUBLIC	?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z	; PyTuple_GetObject
PUBLIC	?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z	; PyTuple_GetBoolean
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z	; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z ; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z ; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z ; PyCallClassMemberFunc_ByPyString
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z	; PyCallClassMemberFunc
PUBLIC	?Py_BuildException@@YAPAU_object@@PBDZZ		; Py_BuildException
PUBLIC	?Py_BadArgument@@YAPAU_object@@XZ		; Py_BadArgument
PUBLIC	?Py_BuildNone@@YAPAU_object@@XZ			; Py_BuildNone
PUBLIC	?Clear@IPythonExceptionSender@@QAEXXZ		; IPythonExceptionSender::Clear
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
PUBLIC	?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc_ByPyString
PUBLIC	?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc
PUBLIC	?Py_ReleaseNone@@YAXXZ				; Py_ReleaseNone
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__PyObject_GetAttrString:PROC
EXTRN	__imp__PyObject_GetAttr:PROC
EXTRN	__imp__PyCallable_Check:PROC
EXTRN	__imp__PyLong_AsLongLong:PROC
EXTRN	__imp__PyFloat_AsDouble:PROC
EXTRN	__imp__PyString_AsString:PROC
EXTRN	__imp__PyTuple_Size:PROC
EXTRN	__imp__PyTuple_GetItem:PROC
EXTRN	__imp__PyErr_SetString:PROC
EXTRN	__imp__PyErr_Clear:PROC
EXTRN	__imp__PyErr_BadArgument:PROC
EXTRN	__imp__PyErr_Print:PROC
EXTRN	__imp__PyObject_CallObject:PROC
EXTRN	__imp__PyNumber_Check:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp___Py_NoneStruct:QWORD
EXTRN	__imp__PyExc_RuntimeError:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_ReleaseNone@@YAXXZ
_TEXT	SEGMENT
?Py_ReleaseNone@@YAXXZ PROC				; Py_ReleaseNone, COMDAT

; 44   : 	Py_DECREF(Py_None);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct
  00005	83 00 ff	 add	 DWORD PTR [eax], -1
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___Py_NoneStruct
  0000e	75 0a		 jne	 SHORT $LN2@Py_Release
  00010	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00013	51		 push	 ecx
  00014	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00017	ff d0		 call	 eax
  00019	59		 pop	 ecx
$LN2@Py_Release:

; 45   : }

  0001a	c3		 ret	 0
?Py_ReleaseNone@@YAXXZ ENDP				; Py_ReleaseNone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_poFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z PROC ; __PyCallClassMemberFunc, COMDAT

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 384  : 	if (!poClass)

  00003	83 7d 08 00	 cmp	 DWORD PTR _poClass$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	74 0d		 je	 SHORT $LN73@PyCallClas

; 385  : 	{
; 386  : 		Py_XDECREF(poArgs);
; 387  : 		return false;
; 388  : 	}
; 389  : 
; 390  : 	if (!poFunc)

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _poFunc$[ebp]
  0000e	85 f6		 test	 esi, esi
  00010	75 2c		 jne	 SHORT $LN46@PyCallClas

; 391  : 	{
; 392  : 		PyErr_Clear();

  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN73@PyCallClas:

; 411  : 		return false;

  00018	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0001b	85 c9		 test	 ecx, ecx
  0001d	0f 84 98 00 00
	00		 je	 $LN30@PyCallClas
  00023	83 01 ff	 add	 DWORD PTR [ecx], -1
  00026	0f 85 8f 00 00
	00		 jne	 $LN30@PyCallClas
  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	51		 push	 ecx
  00030	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00033	ff d0		 call	 eax
  00035	83 c4 04	 add	 esp, 4
  00038	32 c0		 xor	 al, al
  0003a	5f		 pop	 edi

; 419  : }

  0003b	5e		 pop	 esi
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN46@PyCallClas:

; 393  : 		Py_XDECREF(poArgs);
; 394  : 		return false;
; 395  : 	}
; 396  : 
; 397  : 	if (!PyCallable_Check(poFunc))

  0003e	56		 push	 esi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00045	83 c4 04	 add	 esp, 4
  00048	85 c0		 test	 eax, eax
  0004a	75 2f		 jne	 SHORT $LN51@PyCallClas

; 398  : 	{
; 399  : 		Py_DECREF(poFunc);

  0004c	83 06 ff	 add	 DWORD PTR [esi], -1
  0004f	75 0c		 jne	 SHORT $LN14@PyCallClas
  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	56		 push	 esi
  00055	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00058	ff d0		 call	 eax
  0005a	83 c4 04	 add	 esp, 4
$LN14@PyCallClas:

; 400  : 		Py_XDECREF(poArgs);

  0005d	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  00060	85 c9		 test	 ecx, ecx
  00062	74 57		 je	 SHORT $LN30@PyCallClas
  00064	83 01 ff	 add	 DWORD PTR [ecx], -1
  00067	75 52		 jne	 SHORT $LN30@PyCallClas
  00069	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006c	51		 push	 ecx

; 411  : 		return false;

  0006d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00070	ff d0		 call	 eax
  00072	83 c4 04	 add	 esp, 4
  00075	32 c0		 xor	 al, al
  00077	5f		 pop	 edi

; 419  : }

  00078	5e		 pop	 esi
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN51@PyCallClas:

; 401  : 		return false;
; 402  : 	}
; 403  : 
; 404  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  0007b	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  0007e	57		 push	 edi
  0007f	56		 push	 esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  00086	8b c8		 mov	 ecx, eax
  00088	83 c4 08	 add	 esp, 8

; 405  : 
; 406  : 	if (!poRet)

  0008b	85 c9		 test	 ecx, ecx
  0008d	75 32		 jne	 SHORT $LN58@PyCallClas

; 407  : 	{
; 408  : 		PyErr_Print();

  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 409  : 		Py_DECREF(poFunc);

  00095	83 06 ff	 add	 DWORD PTR [esi], -1
  00098	75 0c		 jne	 SHORT $LN23@PyCallClas
  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	56		 push	 esi
  0009e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000a1	ff d0		 call	 eax
  000a3	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 410  : 		Py_XDECREF(poArgs);

  000a6	85 ff		 test	 edi, edi
  000a8	74 11		 je	 SHORT $LN30@PyCallClas
  000aa	83 07 ff	 add	 DWORD PTR [edi], -1
  000ad	75 0c		 jne	 SHORT $LN30@PyCallClas
  000af	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b2	57		 push	 edi

; 411  : 		return false;

  000b3	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000b6	ff d0		 call	 eax
  000b8	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000bb	5f		 pop	 edi
  000bc	32 c0		 xor	 al, al

; 419  : }

  000be	5e		 pop	 esi
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN58@PyCallClas:

; 412  : 	}
; 413  : 
; 414  : 	*ppoRet = poRet;

  000c1	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 415  : 
; 416  : 	Py_DECREF(poFunc);

  000c6	83 06 ff	 add	 DWORD PTR [esi], -1
  000c9	75 0c		 jne	 SHORT $LN32@PyCallClas
  000cb	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ce	56		 push	 esi
  000cf	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000d2	ff d0		 call	 eax
  000d4	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 417  : 	Py_XDECREF(poArgs);

  000d7	85 ff		 test	 edi, edi
  000d9	74 11		 je	 SHORT $LN39@PyCallClas
  000db	83 07 ff	 add	 DWORD PTR [edi], -1
  000de	75 0c		 jne	 SHORT $LN39@PyCallClas
  000e0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e3	57		 push	 edi
  000e4	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000e7	ff d0		 call	 eax
  000e9	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 418  : 	return true;

  000ec	5f		 pop	 edi
  000ed	b0 01		 mov	 al, 1

; 419  : }

  000ef	5e		 pop	 esi
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ENDP ; __PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_poFuncName$ = 12					; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z PROC ; __PyCallClassMemberFunc_ByPyString, COMDAT

; 335  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 336  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN75@PyCallClas

; 337  : 	{
; 338  : 		Py_XDECREF(poArgs);
; 339  : 		return false;
; 340  : 	}
; 341  : 
; 342  : 	PyObject * poFunc = PyObject_GetAttr(poClass, poFuncName);	// New Reference

  0000c	ff 75 0c	 push	 DWORD PTR _poFuncName$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_GetAttr
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 08	 add	 esp, 8

; 343  : 
; 344  : 	if (!poFunc)

  0001b	85 f6		 test	 esi, esi
  0001d	75 2c		 jne	 SHORT $LN46@PyCallClas

; 345  : 	{
; 346  : 		PyErr_Clear();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN75@PyCallClas:

; 372  : 		return false;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 b5 00 00
	00		 je	 $LN30@PyCallClas
  00030	83 01 ff	 add	 DWORD PTR [ecx], -1
  00033	0f 85 ac 00 00
	00		 jne	 $LN30@PyCallClas
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	51		 push	 ecx
  0003d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00040	ff d0		 call	 eax
  00042	83 c4 04	 add	 esp, 4
  00045	32 c0		 xor	 al, al
  00047	5f		 pop	 edi

; 380  : }

  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN46@PyCallClas:

; 347  : 		Py_XDECREF(poArgs);
; 348  : 		return false;
; 349  : 	}
; 350  : 
; 351  : 	if (!PyCallable_Check(poFunc))

  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00052	83 c4 04	 add	 esp, 4
  00055	85 c0		 test	 eax, eax
  00057	75 2f		 jne	 SHORT $LN51@PyCallClas

; 352  : 	{
; 353  : 		Py_DECREF(poFunc);

  00059	83 06 ff	 add	 DWORD PTR [esi], -1
  0005c	75 0c		 jne	 SHORT $LN14@PyCallClas
  0005e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00061	56		 push	 esi
  00062	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00065	ff d0		 call	 eax
  00067	83 c4 04	 add	 esp, 4
$LN14@PyCallClas:

; 354  : 		Py_XDECREF(poArgs);

  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 74		 je	 SHORT $LN30@PyCallClas
  00071	83 01 ff	 add	 DWORD PTR [ecx], -1
  00074	75 6f		 jne	 SHORT $LN30@PyCallClas
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	51		 push	 ecx

; 372  : 		return false;

  0007a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0007d	ff d0		 call	 eax
  0007f	83 c4 04	 add	 esp, 4
  00082	32 c0		 xor	 al, al
  00084	5f		 pop	 edi

; 380  : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN51@PyCallClas:

; 355  : 		return false;
; 356  : 	}
; 357  : 
; 358  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  00088	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  0008b	57		 push	 edi
  0008c	56		 push	 esi
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  00093	8b c8		 mov	 ecx, eax
  00095	83 c4 08	 add	 esp, 8

; 359  : 
; 360  : 	if (!poRet)

  00098	85 c9		 test	 ecx, ecx
  0009a	75 4f		 jne	 SHORT $LN58@PyCallClas

; 361  : 	{
; 362  : 		if (g_pkExceptionSender)

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  000a2	85 c9		 test	 ecx, ecx
  000a4	74 05		 je	 SHORT $LN59@PyCallClas

; 363  : 			g_pkExceptionSender->Clear();

  000a6	e8 00 00 00 00	 call	 ?Clear@IPythonExceptionSender@@QAEXXZ ; IPythonExceptionSender::Clear
$LN59@PyCallClas:

; 364  : 
; 365  : 		PyErr_Print();

  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 366  : 
; 367  : 		if (g_pkExceptionSender)

  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  000b7	85 c9		 test	 ecx, ecx
  000b9	74 04		 je	 SHORT $LN25@PyCallClas

; 368  : 			g_pkExceptionSender->Send();

  000bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bd	ff 10		 call	 DWORD PTR [eax]
$LN25@PyCallClas:

; 369  : 
; 370  : 		Py_DECREF(poFunc);

  000bf	83 06 ff	 add	 DWORD PTR [esi], -1
  000c2	75 0c		 jne	 SHORT $LN23@PyCallClas
  000c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c7	56		 push	 esi
  000c8	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cb	ff d0		 call	 eax
  000cd	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 371  : 		Py_XDECREF(poArgs);

  000d0	85 ff		 test	 edi, edi
  000d2	74 11		 je	 SHORT $LN30@PyCallClas
  000d4	83 07 ff	 add	 DWORD PTR [edi], -1
  000d7	75 0c		 jne	 SHORT $LN30@PyCallClas
  000d9	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000dc	57		 push	 edi

; 372  : 		return false;

  000dd	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000e0	ff d0		 call	 eax
  000e2	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000e5	5f		 pop	 edi
  000e6	32 c0		 xor	 al, al

; 380  : }

  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN58@PyCallClas:

; 373  : 	}
; 374  : 
; 375  : 	*ppoRet = poRet;

  000eb	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000ee	89 08		 mov	 DWORD PTR [eax], ecx

; 376  : 
; 377  : 	Py_DECREF(poFunc);

  000f0	83 06 ff	 add	 DWORD PTR [esi], -1
  000f3	75 0c		 jne	 SHORT $LN32@PyCallClas
  000f5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f8	56		 push	 esi
  000f9	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000fc	ff d0		 call	 eax
  000fe	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 378  : 	Py_XDECREF(poArgs);

  00101	85 ff		 test	 edi, edi
  00103	74 11		 je	 SHORT $LN39@PyCallClas
  00105	83 07 ff	 add	 DWORD PTR [edi], -1
  00108	75 0c		 jne	 SHORT $LN39@PyCallClas
  0010a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010d	57		 push	 edi
  0010e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00111	ff d0		 call	 eax
  00113	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 379  : 	return true;

  00116	5f		 pop	 edi
  00117	b0 01		 mov	 al, 1

; 380  : }

  00119	5e		 pop	 esi
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ENDP ; __PyCallClassMemberFunc_ByPyString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z PROC ; __PyCallClassMemberFunc_ByCString, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN75@PyCallClas

; 289  : 	{
; 290  : 		Py_XDECREF(poArgs);
; 291  : 		return false;
; 292  : 	}
; 293  : 
; 294  : 	PyObject * poFunc = PyObject_GetAttrString(poClass, (char *)c_szFunc);	// New Reference

  0000c	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_GetAttrString
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 08	 add	 esp, 8

; 295  : 
; 296  : 	if (!poFunc)

  0001b	85 f6		 test	 esi, esi
  0001d	75 2c		 jne	 SHORT $LN46@PyCallClas

; 297  : 	{
; 298  : 		PyErr_Clear();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN75@PyCallClas:

; 324  : 		return false;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 b5 00 00
	00		 je	 $LN30@PyCallClas
  00030	83 01 ff	 add	 DWORD PTR [ecx], -1
  00033	0f 85 ac 00 00
	00		 jne	 $LN30@PyCallClas
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	51		 push	 ecx
  0003d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00040	ff d0		 call	 eax
  00042	83 c4 04	 add	 esp, 4
  00045	32 c0		 xor	 al, al
  00047	5f		 pop	 edi

; 332  : }

  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN46@PyCallClas:

; 299  : 		Py_XDECREF(poArgs);
; 300  : 		return false;
; 301  : 	}
; 302  : 
; 303  : 	if (!PyCallable_Check(poFunc))

  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00052	83 c4 04	 add	 esp, 4
  00055	85 c0		 test	 eax, eax
  00057	75 2f		 jne	 SHORT $LN51@PyCallClas

; 304  : 	{
; 305  : 		Py_DECREF(poFunc);

  00059	83 06 ff	 add	 DWORD PTR [esi], -1
  0005c	75 0c		 jne	 SHORT $LN14@PyCallClas
  0005e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00061	56		 push	 esi
  00062	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00065	ff d0		 call	 eax
  00067	83 c4 04	 add	 esp, 4
$LN14@PyCallClas:

; 306  : 		Py_XDECREF(poArgs);

  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 74		 je	 SHORT $LN30@PyCallClas
  00071	83 01 ff	 add	 DWORD PTR [ecx], -1
  00074	75 6f		 jne	 SHORT $LN30@PyCallClas
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	51		 push	 ecx

; 324  : 		return false;

  0007a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0007d	ff d0		 call	 eax
  0007f	83 c4 04	 add	 esp, 4
  00082	32 c0		 xor	 al, al
  00084	5f		 pop	 edi

; 332  : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN51@PyCallClas:

; 307  : 		return false;
; 308  : 	}
; 309  : 
; 310  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  00088	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  0008b	57		 push	 edi
  0008c	56		 push	 esi
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  00093	8b c8		 mov	 ecx, eax
  00095	83 c4 08	 add	 esp, 8

; 311  : 
; 312  : 	if (!poRet)

  00098	85 c9		 test	 ecx, ecx
  0009a	75 4f		 jne	 SHORT $LN58@PyCallClas

; 313  : 	{
; 314  : 		if (g_pkExceptionSender)

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  000a2	85 c9		 test	 ecx, ecx
  000a4	74 05		 je	 SHORT $LN59@PyCallClas

; 315  : 			g_pkExceptionSender->Clear();

  000a6	e8 00 00 00 00	 call	 ?Clear@IPythonExceptionSender@@QAEXXZ ; IPythonExceptionSender::Clear
$LN59@PyCallClas:

; 316  : 
; 317  : 		PyErr_Print();

  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 318  : 
; 319  : 		if (g_pkExceptionSender)

  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  000b7	85 c9		 test	 ecx, ecx
  000b9	74 04		 je	 SHORT $LN25@PyCallClas

; 320  : 			g_pkExceptionSender->Send();

  000bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bd	ff 10		 call	 DWORD PTR [eax]
$LN25@PyCallClas:

; 321  : 
; 322  : 		Py_DECREF(poFunc);

  000bf	83 06 ff	 add	 DWORD PTR [esi], -1
  000c2	75 0c		 jne	 SHORT $LN23@PyCallClas
  000c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c7	56		 push	 esi
  000c8	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cb	ff d0		 call	 eax
  000cd	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 323  : 		Py_XDECREF(poArgs);

  000d0	85 ff		 test	 edi, edi
  000d2	74 11		 je	 SHORT $LN30@PyCallClas
  000d4	83 07 ff	 add	 DWORD PTR [edi], -1
  000d7	75 0c		 jne	 SHORT $LN30@PyCallClas
  000d9	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000dc	57		 push	 edi

; 324  : 		return false;

  000dd	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000e0	ff d0		 call	 eax
  000e2	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000e5	5f		 pop	 edi
  000e6	32 c0		 xor	 al, al

; 332  : }

  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN58@PyCallClas:

; 325  : 	}
; 326  : 
; 327  : 	*ppoRet = poRet;

  000eb	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000ee	89 08		 mov	 DWORD PTR [eax], ecx

; 328  : 
; 329  : 	Py_DECREF(poFunc);

  000f0	83 06 ff	 add	 DWORD PTR [esi], -1
  000f3	75 0c		 jne	 SHORT $LN32@PyCallClas
  000f5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f8	56		 push	 esi
  000f9	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000fc	ff d0		 call	 eax
  000fe	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 330  : 	Py_XDECREF(poArgs);

  00101	85 ff		 test	 edi, edi
  00103	74 11		 je	 SHORT $LN39@PyCallClas
  00105	83 07 ff	 add	 DWORD PTR [edi], -1
  00108	75 0c		 jne	 SHORT $LN39@PyCallClas
  0010a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010d	57		 push	 edi
  0010e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00111	ff d0		 call	 eax
  00113	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 331  : 	return true;

  00116	5f		 pop	 edi
  00117	b0 01		 mov	 al, 1

; 332  : }

  00119	5e		 pop	 esi
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ENDP ; __PyCallClassMemberFunc_ByCString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\stdafx.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\stdafx.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\stdafx.h
;	COMDAT ?Clear@IPythonExceptionSender@@QAEXXZ
_TEXT	SEGMENT
?Clear@IPythonExceptionSender@@QAEXXZ PROC		; IPythonExceptionSender::Clear, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 2136 :         if (_Large_string_engaged()) {

  00004	72 0e		 jb	 SHORT $LN44@Clear

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00010	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\stdafx.h

; 46   : 		}

  00013	c3		 ret	 0
$LN44@Clear:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00014	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0001b	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\stdafx.h

; 46   : 		}

  0001f	c3		 ret	 0
?Clear@IPythonExceptionSender@@QAEXXZ ENDP		; IPythonExceptionSender::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BuildNone@@YAPAU_object@@XZ
_TEXT	SEGMENT
?Py_BuildNone@@YAPAU_object@@XZ PROC			; Py_BuildNone, COMDAT

; 38   : 	Py_INCREF(Py_None);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct
  00005	ff 00		 inc	 DWORD PTR [eax]

; 39   : 	return Py_None;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct

; 40   : }

  0000c	c3		 ret	 0
?Py_BuildNone@@YAPAU_object@@XZ ENDP			; Py_BuildNone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BadArgument@@YAPAU_object@@XZ
_TEXT	SEGMENT
?Py_BadArgument@@YAPAU_object@@XZ PROC			; Py_BadArgument, COMDAT

; 13   : 	PyErr_BadArgument();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_BadArgument

; 14   : 	return NULL;

  00006	33 c0		 xor	 eax, eax

; 15   : }

  00008	c3		 ret	 0
?Py_BadArgument@@YAPAU_object@@XZ ENDP			; Py_BadArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BuildException@@YAPAU_object@@PBDZZ
_TEXT	SEGMENT
_szErrBuf$1 = -520					; size = 513
__$ArrayPad$ = -4					; size = 4
_c_pszErr$ = 8						; size = 4
?Py_BuildException@@YAPAU_object@@PBDZZ PROC		; Py_BuildException, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19   : 	if (!c_pszErr)

  00013	8b 45 08	 mov	 eax, DWORD PTR _c_pszErr$[ebp]
  00016	85 c0		 test	 eax, eax
  00018	75 19		 jne	 SHORT $LN2@Py_BuildEx

; 20   : 		PyErr_Clear();

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear

; 30   : 	}
; 31   : 
; 32   : 	return Py_BuildNone();

  00020	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 33   : 	//return NULL;
; 34   : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN2@Py_BuildEx:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00033	8d 4d 0c	 lea	 ecx, DWORD PTR _c_pszErr$[ebp+4]
  00036	51		 push	 ecx
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szErrBuf$1[ebp]
  00040	68 01 02 00 00	 push	 513			; 00000201H
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	ff 70 04	 push	 DWORD PTR [eax+4]
  00050	83 c9 01	 or	 ecx, 1
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp

; 29   : 		PyErr_SetString(PyExc_RuntimeError, szErrBuf);

  00059	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szErrBuf$1[ebp]
  0005f	50		 push	 eax
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  00065	ff 30		 push	 DWORD PTR [eax]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  0006d	83 c4 24	 add	 esp, 36			; 00000024H

; 30   : 	}
; 31   : 
; 32   : 	return Py_BuildNone();

  00070	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 33   : 	//return NULL;
; 34   : }

  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?Py_BuildException@@YAPAU_object@@PBDZZ ENDP		; Py_BuildException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z
_TEXT	SEGMENT
_poRet$ = 8						; size = 4
_poClass$ = 8						; size = 4
_poFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z PROC	; PyCallClassMemberFunc, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 	PyObject* poRet;
; 203  : 
; 204  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1c		 jne	 SHORT $LN11@PyCallClas

; 205  : 	{
; 206  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2c		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	75 27		 jne	 SHORT $LN20@PyCallClas
  00016	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00019	51		 push	 ecx
  0001a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001d	ff d0		 call	 eax
  0001f	83 c4 04	 add	 esp, 4

; 211  : 		return false;

  00022	32 c0		 xor	 al, al

; 215  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN11@PyCallClas:

; 207  : 		return false;
; 208  : 	}
; 209  : 
; 210  : 	if (!__PyCallClassMemberFunc(poClass, poFunc, poArgs, &poRet))

  00026	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  00029	51		 push	 ecx
  0002a	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _poFunc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	84 c0		 test	 al, al
  0003b	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 211  : 		return false;

  0003d	32 c0		 xor	 al, al

; 215  : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN10@PyCallClas:

; 212  : 
; 213  : 	Py_DECREF(poRet);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00044	83 01 ff	 add	 DWORD PTR [ecx], -1
  00047	75 0c		 jne	 SHORT $LN8@PyCallClas
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	51		 push	 ecx
  0004d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00050	ff d0		 call	 eax
  00052	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 214  : 	return true;

  00055	b0 01		 mov	 al, 1

; 215  : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z
_TEXT	SEGMENT
_poRet$ = 8						; size = 4
_poClass$ = 8						; size = 4
_poFuncName$ = 12					; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z PROC ; PyCallClassMemberFunc_ByPyString, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 	PyObject* poRet;
; 237  : 
; 238  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1c		 jne	 SHORT $LN11@PyCallClas

; 239  : 	{
; 240  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2c		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	75 27		 jne	 SHORT $LN20@PyCallClas
  00016	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00019	51		 push	 ecx
  0001a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001d	ff d0		 call	 eax
  0001f	83 c4 04	 add	 esp, 4

; 245  : 		return false;

  00022	32 c0		 xor	 al, al

; 249  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN11@PyCallClas:

; 241  : 		return false;
; 242  : 	}
; 243  : 
; 244  : 	if (!__PyCallClassMemberFunc_ByPyString(poClass, poFuncName, poArgs, &poRet))

  00026	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  00029	51		 push	 ecx
  0002a	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _poFuncName$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc_ByPyString
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	84 c0		 test	 al, al
  0003b	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 245  : 		return false;

  0003d	32 c0		 xor	 al, al

; 249  : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN10@PyCallClas:

; 246  : 
; 247  : 	Py_DECREF(poRet);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00044	83 01 ff	 add	 DWORD PTR [ecx], -1
  00047	75 0c		 jne	 SHORT $LN8@PyCallClas
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	51		 push	 ecx
  0004d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00050	ff d0		 call	 eax
  00052	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 248  : 	return true;

  00055	b0 01		 mov	 al, 1

; 249  : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z ENDP ; PyCallClassMemberFunc_ByPyString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z
_TEXT	SEGMENT
_poRet$ = -4						; size = 4
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_plRetValue$ = 20					; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z PROC	; PyCallClassMemberFunc, COMDAT

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 269  : 	PyObject* poRet;
; 270  : 
; 271  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _poRet$[ebp]
  00008	50		 push	 eax
  00009	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _poClass$[ebp]
  00012	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00017	83 c4 10	 add	 esp, 16			; 00000010H
  0001a	84 c0		 test	 al, al
  0001c	74 49		 je	 SHORT $LN5@PyCallClas

; 272  : 		return false;
; 273  : 
; 274  : 	if (PyNumber_Check(poRet))

  0001e	8b 75 fc	 mov	 esi, DWORD PTR _poRet$[ebp]
  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyNumber_Check
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	74 27		 je	 SHORT $LN7@PyCallClas

; 275  : 	{
; 276  : 		*plRetValue = PyLong_AsLong(poRet);

  0002f	56		 push	 esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  00036	8b 4d 14	 mov	 ecx, DWORD PTR _plRetValue$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 277  : 		Py_DECREF(poRet);

  0003e	83 06 ff	 add	 DWORD PTR [esi], -1
  00041	75 0c		 jne	 SHORT $LN2@PyCallClas
  00043	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00046	56		 push	 esi
  00047	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0004a	ff d0		 call	 eax
  0004c	83 c4 04	 add	 esp, 4
$LN2@PyCallClas:

; 278  : 		return true;

  0004f	b0 01		 mov	 al, 1
  00051	5e		 pop	 esi

; 283  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN7@PyCallClas:

; 279  : 	}
; 280  : 
; 281  : 	Py_DECREF(poRet);

  00056	83 06 ff	 add	 DWORD PTR [esi], -1
  00059	75 0c		 jne	 SHORT $LN5@PyCallClas
  0005b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005e	56		 push	 esi
  0005f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00062	ff d0		 call	 eax
  00064	83 c4 04	 add	 esp, 4
$LN5@PyCallClas:

; 282  : 	return false;

  00067	32 c0		 xor	 al, al
  00069	5e		 pop	 esi

; 283  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z
_TEXT	SEGMENT
_poRet$ = -4						; size = 4
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_pisRet$ = 20						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z PROC	; PyCallClassMemberFunc, COMDAT

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 253  : 	PyObject* poRet;
; 254  : 
; 255  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _poRet$[ebp]
  00007	50		 push	 eax
  00008	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _poClass$[ebp]
  00011	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	84 c0		 test	 al, al
  0001b	75 04		 jne	 SHORT $LN5@PyCallClas

; 265  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN5@PyCallClas:
  00021	56		 push	 esi

; 256  : 		return false;
; 257  : 
; 258  : 	if (PyNumber_Check(poRet))

  00022	8b 75 fc	 mov	 esi, DWORD PTR _poRet$[ebp]
  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyNumber_Check
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 12		 je	 SHORT $LN6@PyCallClas

; 259  : 		*pisRet = (PyLong_AsLong(poRet) != 0);

  00033	56		 push	 esi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0003a	83 c4 04	 add	 esp, 4
  0003d	0b c2		 or	 eax, edx
  0003f	75 04		 jne	 SHORT $LN6@PyCallClas
  00041	32 c9		 xor	 cl, cl
  00043	eb 02		 jmp	 SHORT $LN4@PyCallClas
$LN6@PyCallClas:

; 260  : 	else
; 261  : 		*pisRet = true;
; 262  : 
; 263  : 	Py_DECREF(poRet);

  00045	b1 01		 mov	 cl, 1
$LN4@PyCallClas:
  00047	8b 45 14	 mov	 eax, DWORD PTR _pisRet$[ebp]
  0004a	88 08		 mov	 BYTE PTR [eax], cl
  0004c	83 06 ff	 add	 DWORD PTR [esi], -1
  0004f	75 0c		 jne	 SHORT $LN2@PyCallClas
  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	56		 push	 esi
  00055	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00058	ff d0		 call	 eax
  0005a	83 c4 04	 add	 esp, 4
$LN2@PyCallClas:

; 264  : 	return true;

  0005d	b0 01		 mov	 al, 1
  0005f	5e		 pop	 esi

; 265  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z
_TEXT	SEGMENT
_poRet$ = 8						; size = 4
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z PROC	; PyCallClassMemberFunc, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	PyObject* poRet;
; 220  : 
; 221  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1c		 jne	 SHORT $LN11@PyCallClas

; 222  : 	{
; 223  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2c		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	75 27		 jne	 SHORT $LN20@PyCallClas
  00016	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00019	51		 push	 ecx
  0001a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001d	ff d0		 call	 eax
  0001f	83 c4 04	 add	 esp, 4

; 228  : 		return false;

  00022	32 c0		 xor	 al, al

; 232  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN11@PyCallClas:

; 224  : 		return false;
; 225  : 	}
; 226  : 
; 227  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00026	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  00029	51		 push	 ecx
  0002a	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	84 c0		 test	 al, al
  0003b	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 228  : 		return false;

  0003d	32 c0		 xor	 al, al

; 232  : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN10@PyCallClas:

; 229  : 
; 230  : 	Py_DECREF(poRet);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00044	83 01 ff	 add	 DWORD PTR [ecx], -1
  00047	75 0c		 jne	 SHORT $LN8@PyCallClas
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	51		 push	 ecx
  0004d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00050	ff d0		 call	 eax
  00052	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 231  : 	return true;

  00055	b0 01		 mov	 al, 1

; 232  : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z PROC	; PyTuple_GetBoolean, COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 35		 jge	 SHORT $LN7@PyTuple_Ge

; 189  : 		return false;
; 190  : 
; 191  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 192  : 
; 193  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 24		 je	 SHORT $LN7@PyTuple_Ge

; 195  : 
; 196  : 	*ret = PyLong_AsLong(poItem) ? true : false;

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	83 c4 04	 add	 esp, 4
  00031	0b c2		 or	 eax, edx
  00033	74 0b		 je	 SHORT $LN5@PyTuple_Ge
  00035	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00038	b1 01		 mov	 cl, 1
  0003a	88 08		 mov	 BYTE PTR [eax], cl

; 197  : 	return true;

  0003c	8a c1		 mov	 al, cl

; 198  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@PyTuple_Ge:

; 195  : 
; 196  : 	*ret = PyLong_AsLong(poItem) ? true : false;

  00040	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00043	32 c9		 xor	 cl, cl
  00045	88 08		 mov	 BYTE PTR [eax], cl

; 197  : 	return true;

  00047	b0 01		 mov	 al, 1

; 198  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN7@PyTuple_Ge:

; 194  : 		return false;

  0004b	32 c0		 xor	 al, al

; 198  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ENDP	; PyTuple_GetBoolean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z PROC	; PyTuple_GetObject, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 1a		 jge	 SHORT $LN5@PyTuple_Ge

; 50   : 		return false;
; 51   : 
; 52   : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 53   : 
; 54   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 09		 je	 SHORT $LN5@PyTuple_Ge

; 56   : 
; 57   : 	*ret = poItem;

  00027	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  0002a	89 01		 mov	 DWORD PTR [ecx], eax

; 58   : 	return true;

  0002c	b0 01		 mov	 al, 1

; 59   : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN5@PyTuple_Ge:

; 55   : 		return false;

  00030	32 c0		 xor	 al, al

; 59   : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ENDP	; PyTuple_GetObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z PROC		; PyTuple_GetDouble, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 78   : 		return false;
; 79   : 
; 80   : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 81   : 
; 82   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 84   : 
; 85   : 	*ret = PyFloat_AsDouble(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyFloat_AsDouble
  0002e	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	dd 18		 fstp	 QWORD PTR [eax]

; 86   : 	return true;

  00036	b0 01		 mov	 al, 1

; 87   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 83   : 		return false;

  0003a	32 c0		 xor	 al, al

; 87   : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z ENDP		; PyTuple_GetDouble
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z PROC		; PyTuple_GetFloat, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 92   : 		return false;
; 93   : 
; 94   : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 95   : 
; 96   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 98   : 
; 99   : 	*ret = float(PyFloat_AsDouble(poItem));

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyFloat_AsDouble
  0002e	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	d9 18		 fstp	 DWORD PTR [eax]

; 100  : 	return true;

  00036	b0 01		 mov	 al, 1

; 101  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 97   : 		return false;

  0003a	32 c0		 xor	 al, al

; 101  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ENDP		; PyTuple_GetFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z PROC	; PyTuple_GetUnsignedLong, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 144  : 		return false;
; 145  : 
; 146  : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 147  : 
; 148  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 150  : 
; 151  : 	*ret = PyLong_AsUnsignedLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 152  : 	return true;

  00036	b0 01		 mov	 al, 1

; 153  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 149  : 		return false;

  0003a	32 c0		 xor	 al, al

; 153  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z ENDP	; PyTuple_GetUnsignedLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z PROC		; PyTuple_GetLong, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 64   : 		return false;
; 65   : 
; 66   : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 67   : 
; 68   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 70   : 
; 71   : 	*ret = PyLong_AsLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 	return true;

  00036	b0 01		 mov	 al, 1

; 73   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 69   : 		return false;

  0003a	32 c0		 xor	 al, al

; 73   : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z ENDP		; PyTuple_GetLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z PROC ; PyTuple_GetUnsignedInteger, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 157  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 158  : 		return false;
; 159  : 
; 160  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 161  : 
; 162  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 164  : 
; 165  : 	*ret = PyLong_AsUnsignedLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 166  : 	return true;

  00036	b0 01		 mov	 al, 1

; 167  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 163  : 		return false;

  0003a	32 c0		 xor	 al, al

; 167  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z ENDP ; PyTuple_GetUnsignedInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z PROC		; PyTuple_GetByte, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 105  : 	int val;
; 106  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 107  : 	*ret = unsigned char(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8a 4d fc	 mov	 cl, BYTE PTR _val$[ebp]
  0001c	88 0a		 mov	 BYTE PTR [edx], cl

; 108  : 	return result;
; 109  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z ENDP		; PyTuple_GetByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z PROC	; PyTuple_GetInteger, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 121  : 	int val;
; 122  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 123  : 	*ret = WORD(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	66 8b 4d fc	 mov	 cx, WORD PTR _val$[ebp]
  0001d	66 89 0a	 mov	 WORD PTR [edx], cx

; 124  : 	return result;
; 125  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z PROC	; PyTuple_GetInteger, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 129  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 130  : 		return false;
; 131  : 
; 132  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 133  : 
; 134  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 136  : 
; 137  : 	*ret = PyLong_AsLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 138  : 	return true;

  00036	b0 01		 mov	 al, 1

; 139  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 135  : 		return false;

  0003a	32 c0		 xor	 al, al

; 139  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z PROC	; PyTuple_GetInteger, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 113  : 	int val;
; 114  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 115  : 	*ret = unsigned char(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8a 4d fc	 mov	 cl, BYTE PTR _val$[ebp]
  0001c	88 0a		 mov	 BYTE PTR [edx], cl

; 116  : 	return result;
; 117  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z PROC	; PyTuple_GetString, COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 171  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 30		 jge	 SHORT $LN6@PyTuple_Ge

; 172  : 		return false;
; 173  : 
; 174  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 175  : 
; 176  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 1f		 je	 SHORT $LN6@PyTuple_Ge

; 177  : 		return false;
; 178  : 
; 179  : 	if (!PyString_Check(poItem))

  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	f7 41 54 00 00
	00 08		 test	 DWORD PTR [ecx+84], 134217728 ; 08000000H
  00031	74 13		 je	 SHORT $LN6@PyTuple_Ge

; 181  : 
; 182  : 	*ret = PyString_AsString(poItem);

  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyString_AsString
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  0003d	83 c4 04	 add	 esp, 4
  00040	89 01		 mov	 DWORD PTR [ecx], eax

; 183  : 	return true;

  00042	b0 01		 mov	 al, 1

; 184  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN6@PyTuple_Ge:

; 180  : 		return false;

  00046	32 c0		 xor	 al, al

; 184  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ENDP	; PyTuple_GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
