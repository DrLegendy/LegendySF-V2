; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CEffectElementBase@@QAE@XZ			; CEffectElementBase::CEffectElementBase
PUBLIC	??1CEffectElementBase@@UAE@XZ			; CEffectElementBase::~CEffectElementBase
PUBLIC	?Clear@CEffectElementBase@@QAEXXZ		; CEffectElementBase::Clear
PUBLIC	?isData@CEffectElementBase@@QAE_NXZ		; CEffectElementBase::isData
PUBLIC	?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ; CEffectElementBase::LoadScript
PUBLIC	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition
PUBLIC	?GetStartTime@CEffectElementBase@@QAEMXZ	; CEffectElementBase::GetStartTime
PUBLIC	?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
PUBLIC	??_GCEffectElementBase@@UAEPAXI@Z		; CEffectElementBase::`scalar deleting destructor'
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ; std::_Const_cast<SEffectPosition const >
PUBLIC	??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
PUBLIC	??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
PUBLIC	??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
PUBLIC	??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ; std::_Refancy<SEffectPosition *,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CEffectElementBase@@6B@			; CEffectElementBase::`vftable'
PUBLIC	??_C@_09EJLICMCM@starttime@			; `string'
PUBLIC	??_C@_0BC@KPMBIEBE@timeeventposition@		; `string'
PUBLIC	??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@	; `string'
PUBLIC	??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectElementBase@@6B@			; CEffectElementBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectElementBase@@@8			; CEffectElementBase `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBase@@8			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBase@@8			; CEffectElementBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectElementBase@@8		; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	??_ECEffectElementBase@@UAEPAXI@Z:PROC		; CEffectElementBase::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBase@@8 DD FLAT:??_R0?AVCEffectElementBase@@@8 ; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectElementBase@@8
rdata$r	SEGMENT
??_R2CEffectElementBase@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBase@@8 ; CEffectElementBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBase@@8
rdata$r	SEGMENT
??_R3CEffectElementBase@@8 DD 00H			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBase@@@8
data$r	SEGMENT
??_R0?AVCEffectElementBase@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBase@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEffectElementBase@@6B@
rdata$r	SEGMENT
??_R4CEffectElementBase@@6B@ DD 00H			; CEffectElementBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectElementBase@@@8
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
CONST	SEGMENT
??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@ DB 'MOVING_TYPE_DIRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
CONST	SEGMENT
??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@ DB 'MOVING_TYPE_BEZIER_CURVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPMBIEBE@timeeventposition@
CONST	SEGMENT
??_C@_0BC@KPMBIEBE@timeeventposition@ DB 'timeeventposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJLICMCM@starttime@
CONST	SEGMENT
??_C@_09EJLICMCM@starttime@ DB 'starttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CEffectElementBase@@6B@
CONST	SEGMENT
??_7CEffectElementBase@@6B@ DD FLAT:??_R4CEffectElementBase@@6B@ ; CEffectElementBase::`vftable'
	DD	FLAT:??_ECEffectElementBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1
__ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z PROC ; std::_Refancy<SEffectPosition *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ENDP ; std::_Refancy<SEffectPosition *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z PROC ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 18		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00010	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00013	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00016	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1509 :         ++_Last;

  0001a	83 c1 20	 add	 ecx, 32			; 00000020H

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0001d	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 1509 :         ++_Last;

  00021	83 c0 20	 add	 eax, 32			; 00000020H

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);
; 1652 :     const auto _ULast = _Get_unwrapped(_Last);
; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  00024	3b ca		 cmp	 ecx, edx
  00026	75 e8		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ENDP ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SEffectPosition> >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SEffectPosition> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Newvec$1$ = -8					; size = 4
tv431 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b c2		 sub	 eax, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00015	2b fa		 sub	 edi, edx
  00017	c1 f8 05	 sar	 eax, 5
  0001a	c1 ff 05	 sar	 edi, 5
  0001d	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00020	81 ff ff ff ff
	07		 cmp	 edi, 134217727		; 07ffffffH
  00026	0f 84 bf 00 00
	00		 je	 $LN41@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0002f	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00034	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00036	47		 inc	 edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00037	c1 f9 05	 sar	 ecx, 5

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0003a	8b d1		 mov	 edx, ecx
  0003c	d1 ea		 shr	 edx, 1
  0003e	2b c2		 sub	 eax, edx
  00040	3b c8		 cmp	 ecx, eax
  00042	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  00044	8b df		 mov	 ebx, edi
  00046	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00048	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0004b	3b df		 cmp	 ebx, edi
  0004d	0f 42 df	 cmovb	 ebx, edi
$LN13@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00050	81 fb ff ff ff
	07		 cmp	 ebx, 134217727		; 07ffffffH
  00056	0f 87 94 00 00
	00		 ja	 $LN42@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005c	c1 e3 05	 shl	 ebx, 5

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	53		 push	 ebx
  00060	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00068	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0006b	8b 55 fc	 mov	 edx, DWORD PTR __Whereoff$1$[ebp]
  0006e	c1 e2 05	 shl	 edx, 5
  00071	03 d0		 add	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00073	89 45 f8	 mov	 DWORD PTR __Newvec$1$[ebp], eax

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00076	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00079	89 55 fc	 mov	 DWORD PTR tv431[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0007c	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0007f	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00083	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00086	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0008a	8b 16		 mov	 edx, DWORD PTR [esi]
  0008c	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0008f	74 15		 je	 SHORT $LN5@Emplace_re

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00091	56		 push	 esi
  00092	50		 push	 eax
  00093	51		 push	 ecx
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0009a	8b 45 fc	 mov	 eax, DWORD PTR tv431[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a3	83 c0 20	 add	 eax, 32			; 00000020H
$LN5@Emplace_re:
  000a6	56		 push	 esi
  000a7	50		 push	 eax
  000a8	ff 76 04	 push	 DWORD PTR [esi+4]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b1	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee
; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000b3	83 c4 10	 add	 esp, 16			; 00000010H

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c9		 test	 ecx, ecx
  000b8	74 12		 je	 SHORT $LN35@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ba	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bd	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c9	83 c4 08	 add	 esp, 8
$LN35@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1680 :         _Myfirst = _Newvec;

  000cc	8b 45 f8	 mov	 eax, DWORD PTR __Newvec$1$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  000cf	c1 e7 05	 shl	 edi, 5
  000d2	89 06		 mov	 DWORD PTR [esi], eax
  000d4	03 f8		 add	 edi, eax
  000d6	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000d9	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR tv431[ebp]
  000df	5f		 pop	 edi

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  000e0	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx

; 767  :     }

  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 08 00	 ret	 8
$LN41@Emplace_re:

; 738  :             _Xlength();

  000eb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
$LN42@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN39@Emplace_re:
  000f5	cc		 int	 3
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z PROC ; std::_Const_cast<SEffectPosition const >, COMDAT

; 282  : auto _Const_cast(_Ty* _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  :     return const_cast<remove_const_t<_Ty>*>(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ENDP ; std::_Const_cast<SEffectPosition const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4480 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]

; 4480 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00007	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL18@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL18@operator

; 2144 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2153 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@operator:

; 4096 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN14@operator

; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN21@operator
$LL22@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN20@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL22@operator
$LN21@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN19@operator
$LN20@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN23@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN19@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN23@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN19@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN23@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN19@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN19@operator
$LN23@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN24@operator
$LN19@operator:
  0007c	33 c0		 xor	 eax, eax
$LN24@operator:

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN14@operator
  00082	5f		 pop	 edi
  00083	b0 01		 mov	 al, 1

; 4481 :     return _Left._Equal(_Right);
; 4482 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN14@operator:
  00088	5f		 pop	 edi

; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 4481 :     return _Left._Equal(_Right);
; 4482 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectElementBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectElementBase@@UAEPAXI@Z PROC			; CEffectElementBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectElementBase@@UAE@XZ ; CEffectElementBase::~CEffectElementBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectElementBase@@UAEPAXI@Z ENDP			; CEffectElementBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetStartTime@CEffectElementBase@@QAEMXZ
_TEXT	SEGMENT
?GetStartTime@CEffectElementBase@@QAEMXZ PROC		; CEffectElementBase::GetStartTime, COMDAT
; _this$ = ecx

; 159  : 	return m_fStartTime;

  00000	d9 41 04	 fld	 DWORD PTR [ecx+4]

; 160  : }

  00003	c3		 ret	 0
?GetStartTime@CEffectElementBase@@QAEMXZ ENDP		; CEffectElementBase::GetStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fTime$ = 8						; size = 4
_rPosition$ = 12					; size = 4
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z PROC ; CEffectElementBase::GetPosition, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00017	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001a	3b f0		 cmp	 esi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 7    : 	if (m_TimeEventTablePosition.empty())

  0001c	75 29		 jne	 SHORT $LN2@GetPositio

; 8    : 	{
; 9    : 		rPosition = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  00021	5f		 pop	 edi

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  00022	5e		 pop	 esi
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00030	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00047	2b c6		 sub	 eax, esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 12   : 	if (m_TimeEventTablePosition.size()==1)

  00049	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0004c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0004f	0f 84 2f 02 00
	00		 je	 $LN149@GetPositio

; 13   : 	{
; 14   : 		rPosition = m_TimeEventTablePosition[0].m_vecPosition;
; 15   : 		return;
; 16   : 	}
; 17   : 	if (m_TimeEventTablePosition.front().m_fTime > fTime)

  00055	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00059	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
  0005e	0f 2f c1	 comiss	 xmm0, xmm1
  00061	0f 87 1d 02 00
	00		 ja	 $LN149@GetPositio

; 20   : 		return;
; 21   : 	}
; 22   : 	if (m_TimeEventTablePosition.back().m_fTime < fTime)

  00067	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0006a	0f 2f 4a e0	 comiss	 xmm1, DWORD PTR [edx-32]
  0006e	76 14		 jbe	 SHORT $LN5@GetPositio

; 23   : 	{
; 24   : 		rPosition = m_TimeEventTablePosition.back().m_vecPosition;

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  00073	f3 0f 7e 42 e4	 movq	 xmm0, QWORD PTR [edx-28]
  00078	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0007c	8b 42 ec	 mov	 eax, DWORD PTR [edx-20]

; 25   : 		return;

  0007f	e9 0f 02 00 00	 jmp	 $LN150@GetPositio
$LN5@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5681 :     auto _UFirst                = _Get_unwrapped(_First);

  00084	2b d6		 sub	 edx, esi

; 5682 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  00086	89 75 f8	 mov	 DWORD PTR $T1[ebp], esi

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  00089	c1 fa 05	 sar	 edx, 5

; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0008c	85 d2		 test	 edx, edx
  0008e	7e 29		 jle	 SHORT $LN40@GetPositio
$LL39@GetPositio:

; 5685 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00090	8b ca		 mov	 ecx, edx
  00092	d1 e9		 shr	 ecx, 1

; 1644 :         _Where += _Off;

  00094	8b c1		 mov	 eax, ecx
  00096	c1 e0 05	 shl	 eax, 5
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 112  : 	return lhs.m_fTime < rhs;

  00099	0f 2f 0c 30	 comiss	 xmm1, DWORD PTR [eax+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5687 :         if (_Pred(*_UMid, _Val)) { // try top half

  0009d	76 0e		 jbe	 SHORT $LN41@GetPositio

; 5688 :             _UFirst = _Next_iter(_UMid);

  0009f	83 c0 20	 add	 eax, 32			; 00000020H
  000a2	03 f0		 add	 esi, eax

; 5689 :             _Count -= _Count2 + 1;

  000a4	83 c8 ff	 or	 eax, -1
  000a7	2b c1		 sub	 eax, ecx
  000a9	03 d0		 add	 edx, eax

; 5690 :         } else {

  000ab	eb 02		 jmp	 SHORT $LN42@GetPositio
$LN41@GetPositio:

; 5691 :             _Count = _Count2;

  000ad	8b d1		 mov	 edx, ecx
$LN42@GetPositio:

; 5683 : 
; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000af	85 d2		 test	 edx, edx
  000b1	7f dd		 jg	 SHORT $LL39@GetPositio
  000b3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000b6	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
$LN40@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 195  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 ??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ; std::_Refancy<SEffectPosition *,0>
  000bf	83 c4 04	 add	 esp, 4

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000c2	39 45 f8	 cmp	 DWORD PTR $T1[ebp], eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 33   : 	if (m_TimeEventTablePosition.begin() != result)

  000c5	0f 84 9f 01 00
	00		 je	 $LN6@GetPositio

; 40   : 		return;
; 41   : 	}
; 42   : 	TEffectPosition & rPrevEffectPosition = *rPrev;
; 43   : 	int iMovingType = rPrevEffectPosition.m_iMovingType;

  000cb	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]

; 44   : 
; 45   : 	if (MOVING_TYPE_DIRECT == iMovingType)

  000ce	85 c9		 test	 ecx, ecx
  000d0	0f 85 94 00 00
	00		 jne	 $LN8@GetPositio

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000d6	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000da	0f 28 e9	 movaps	 xmm5, xmm1

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000dd	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  000e5	f3 0f 5c 48 e0	 subss	 xmm1, DWORD PTR [eax-32]
  000ea	f3 0f 5c 6d 08	 subss	 xmm5, DWORD PTR _fTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000ef	f3 0f 10 40 e8	 movss	 xmm0, DWORD PTR [eax-24]
  000f4	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  000f9	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [eax+12]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  000fe	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00105	0f 54 2d 00 00
	00 00		 andps	 xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  0010c	f3 0f 5e e9	 divss	 xmm5, xmm1
  00110	5f		 pop	 edi

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  00111	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00112	f3 0f 10 48 e4	 movss	 xmm1, DWORD PTR [eax-28]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00117	f3 0f 5c e5	 subss	 xmm4, xmm5
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0011b	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0011f	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00123	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00127	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 180  :     x = fx;

  0012b	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0012f	f3 0f 10 40 ec	 movss	 xmm0, DWORD PTR [eax-20]
  00134	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 181  :     y = fy;

  00138	f3 0f 58 d0	 addss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0013c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  00141	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00144	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 182  :     z = fz;

  00148	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  0014c	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00150	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  00155	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  0015a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015d	33 cd		 xor	 ecx, ebp
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 08 00	 ret	 8
$LN8@GetPositio:

; 50   : 	}
; 51   : 	else if (MOVING_TYPE_BEZIER_CURVE == iMovingType)

  0016a	83 f9 01	 cmp	 ecx, 1
  0016d	0f 85 23 01 00
	00		 jne	 $LN10@GetPositio

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00173	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00177	f3 0f 5c 40 e0	 subss	 xmm0, DWORD PTR [eax-32]
  0017c	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fTime$[ebp]
  00181	f3 0f 5c 58 e0	 subss	 xmm3, DWORD PTR [eax-32]

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00186	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0018e	f3 0f 10 48 fc	 movss	 xmm1, DWORD PTR [eax-4]
  00193	f3 0f 58 48 ec	 addss	 xmm1, DWORD PTR [eax-20]
  00198	f3 0f 10 68 f4	 movss	 xmm5, DWORD PTR [eax-12]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  0019d	f3 0f 5e d8	 divss	 xmm3, xmm0
  001a1	5f		 pop	 edi

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  001a2	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001a3	f3 0f 10 40 f8	 movss	 xmm0, DWORD PTR [eax-8]
  001a8	f3 0f 58 40 e8	 addss	 xmm0, DWORD PTR [eax-24]
  001ad	f3 0f 58 68 e4	 addss	 xmm5, DWORD PTR [eax-28]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001b2	f3 0f 5c f3	 subss	 xmm6, xmm3
  001b6	f3 0f 11 5d 08	 movss	 DWORD PTR _fTime$[ebp], xmm3
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001bb	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fTime$[ebp]

; 180  :     x = fx;

  001c0	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001c4	0f 28 d6	 movaps	 xmm2, xmm6
  001c7	f3 0f 59 50 ec	 mulss	 xmm2, DWORD PTR [eax-20]

; 180  :     x = fx;

  001cc	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 181  :     y = fy;

  001d0	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001d4	f3 0f 59 ee	 mulss	 xmm5, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001d8	f3 0f 58 c0	 addss	 xmm0, xmm0

; 181  :     y = fy;

  001dc	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 182  :     z = fz;

  001e0	f3 0f 59 eb	 mulss	 xmm5, xmm3

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001e4	0f 28 de	 movaps	 xmm3, xmm6
  001e7	f3 0f 59 58 e8	 mulss	 xmm3, DWORD PTR [eax-24]

; 181  :     y = fy;

  001ec	f3 0f 58 c9	 addss	 xmm1, xmm1
  001f0	f3 0f 59 d6	 mulss	 xmm2, xmm6

; 182  :     z = fz;

  001f4	f3 0f 58 ed	 addss	 xmm5, xmm5

; 180  :     x = fx;

  001f8	f3 0f 59 de	 mulss	 xmm3, xmm6

; 181  :     y = fy;

  001fc	f3 0f 58 d1	 addss	 xmm2, xmm1

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00200	0f 28 ce	 movaps	 xmm1, xmm6
  00203	f3 0f 59 48 e4	 mulss	 xmm1, DWORD PTR [eax-28]

; 180  :     x = fx;

  00208	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0020c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00211	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fTime$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00216	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0021a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fTime$[ebp]

; 182  :     z = fz;

  0021f	f3 0f 58 cd	 addss	 xmm1, xmm5

; 180  :     x = fx;

  00223	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00227	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0022c	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 181  :     y = fy;

  00230	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00234	f3 0f 58 d0	 addss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00238	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  0023d	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00240	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 182  :     z = fz;

  00244	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00248	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  0024c	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00250	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  00255	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  0025a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025d	33 cd		 xor	 ecx, ebp
  0025f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c2 08 00	 ret	 8
$LN6@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ; std::_Const_cast<SEffectPosition const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 39   : 		rPosition = result->m_vecPosition;

  00270	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00273	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 39   : 		rPosition = result->m_vecPosition;

  00276	f3 0f 7e 40 04	 movq	 xmm0, QWORD PTR [eax+4]
  0027b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0027f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00282	eb 0f		 jmp	 SHORT $LN150@GetPositio
$LN149@GetPositio:

; 18   : 	{
; 19   : 		rPosition = m_TimeEventTablePosition.front().m_vecPosition;

  00284	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  00287	f3 0f 7e 46 04	 movq	 xmm0, QWORD PTR [esi+4]
  0028c	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00290	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN150@GetPositio:

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  00293	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@GetPositio:
  00296	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00299	5f		 pop	 edi
  0029a	33 cd		 xor	 ecx, ebp
  0029c	5e		 pop	 esi
  0029d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a2	8b e5		 mov	 esp, ebp
  002a4	5d		 pop	 ebp
  002a5	c2 08 00	 ret	 8
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ENDP ; CEffectElementBase::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -72					; size = 4
_rTextFileLoader$GSCopy$1$ = -68			; size = 4
tv1413 = -61						; size = 1
_pTokenVector$ = -60					; size = 4
tv1409 = -56						; size = 4
tv1408 = -56						; size = 4
tv1407 = -56						; size = 4
tv1406 = -56						; size = 4
tv1404 = -56						; size = 4
tv1403 = -56						; size = 4
$T2 = -52						; size = 4
$T3 = -52						; size = 4
$T4 = -52						; size = 4
$T5 = -52						; size = 4
$T6 = -52						; size = 4
tv1405 = -52						; size = 4
tv1402 = -52						; size = 4
tv1401 = -52						; size = 4
tv1400 = -52						; size = 4
_EffectPosition$7 = -48					; size = 32
$T8 = -40						; size = 24
$T9 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z PROC ; CEffectElementBase::LoadScript, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _rTextFileLoader$[ebp]

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00032	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09EJLICMCM@starttime@
  0003a	89 45 bc	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], eax
  0003d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00042	8b 4d bc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00045	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00048	56		 push	 esi
  00049	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
  00059	85 c0		 test	 eax, eax
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00062	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00065	0f 94 45 c3	 sete	 BYTE PTR tv1413[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00069	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006c	72 0d		 jb	 SHORT $LN18@LoadScript

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0006e	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006f	50		 push	 eax
  00070	ff 75 d8	 push	 DWORD PTR $T9[ebp]
  00073	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00078	83 c4 08	 add	 esp, 8
$LN18@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  0007b	80 7d c3 00	 cmp	 BYTE PTR tv1413[ebp], 0
  0007f	74 06		 je	 SHORT $LN5@LoadScript

; 107  : 	{
; 108  : 		m_fStartTime = 0.0f;

  00081	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN5@LoadScript:

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KPMBIEBE@timeeventposition@
  0008c	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  0008f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00094	8b 4d bc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00097	8d 45 c4	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  0009a	50		 push	 eax
  0009b	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
  0009e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000ab	8b 4d ec	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000ae	8b f0		 mov	 esi, eax
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  000b7	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ba	72 0d		 jb	 SHORT $LN28@LoadScript

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000bc	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bd	51		 push	 ecx
  000be	ff 75 d8	 push	 DWORD PTR $T8[ebp]
  000c1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000c6	83 c4 08	 add	 esp, 8
$LN28@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000c9	85 f6		 test	 esi, esi
  000cb	0f 84 8b 03 00
	00		 je	 $LN3@LoadScript

; 111  : 	{
; 112  : 		m_TimeEventTablePosition.clear();

  000d1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  000d4	33 f6		 xor	 esi, esi
  000d6	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d9	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  000dc	8b 10		 mov	 edx, DWORD PTR [eax]
  000de	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000e6	2b ca		 sub	 ecx, edx
  000e8	89 55 cc	 mov	 DWORD PTR tv1401[ebp], edx
  000eb	f7 e9		 imul	 ecx
  000ed	c1 fa 02	 sar	 edx, 2
  000f0	8b c2		 mov	 eax, edx
  000f2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f5	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  000f7	0f 84 5f 03 00
	00		 je	 $LN3@LoadScript
  000fd	33 ff		 xor	 edi, edi
  000ff	90		 npad	 1
$LL4@LoadScript:

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00100	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00102	3b c6		 cmp	 eax, esi
  00104	0f 86 7f 03 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  0010a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  0010d	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  0010e	8b 4d cc	 mov	 ecx, DWORD PTR tv1401[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00111	83 c7 18	 add	 edi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00114	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00119	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0011c	72 02		 jb	 SHORT $LN43@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  0011e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN43@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00126	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00129	83 c4 04	 add	 esp, 4
  0012c	d9 5d d0	 fstp	 DWORD PTR _EffectPosition$7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0012f	8b 10		 mov	 edx, DWORD PTR [eax]
  00131	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00134	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00139	2b ca		 sub	 ecx, edx
  0013b	89 55 c8	 mov	 DWORD PTR tv1404[ebp], edx
  0013e	f7 e9		 imul	 ecx
  00140	c1 fa 02	 sar	 edx, 2
  00143	8b c2		 mov	 eax, edx
  00145	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00148	03 c2		 add	 eax, edx
  0014a	89 45 cc	 mov	 DWORD PTR tv1400[ebp], eax
  0014d	3b c6		 cmp	 eax, esi
  0014f	0f 86 34 03 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00155	8b 45 c8	 mov	 eax, DWORD PTR tv1404[ebp]
  00158	03 c7		 add	 eax, edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 119  : 			if (pTokenVector->at(i)=="MOVING_TYPE_BEZIER_CURVE")

  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00165	83 c4 08	 add	 esp, 8
  00168	84 c0		 test	 al, al
  0016a	0f 84 a4 01 00
	00		 je	 $LN7@LoadScript

; 120  : 			{
; 121  : 				i++;

  00170	46		 inc	 esi

; 122  : 
; 123  : 				EffectPosition.m_iMovingType = MOVING_TYPE_BEZIER_CURVE;

  00171	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EffectPosition$7[ebp+16], 1

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00178	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0017a	39 75 cc	 cmp	 DWORD PTR tv1400[ebp], esi
  0017d	0f 86 06 03 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00183	8b 4d c8	 mov	 ecx, DWORD PTR tv1404[ebp]
  00186	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00189	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0018c	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0018d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00191	72 02		 jb	 SHORT $LN56@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00193	8b 00		 mov	 eax, DWORD PTR [eax]
$LN56@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0019b	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0019e	83 c4 04	 add	 esp, 4
  001a1	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$7[ebp+4]

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001a4	89 75 cc	 mov	 DWORD PTR $T6[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  001a7	8b 10		 mov	 edx, DWORD PTR [eax]
  001a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001ac	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001b1	2b ca		 sub	 ecx, edx
  001b3	89 55 c8	 mov	 DWORD PTR tv1409[ebp], edx
  001b6	f7 e9		 imul	 ecx
  001b8	c1 fa 02	 sar	 edx, 2
  001bb	8b c2		 mov	 eax, edx
  001bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001c0	03 c2		 add	 eax, edx
  001c2	3b c6		 cmp	 eax, esi
  001c4	0f 86 bf 02 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  001ca	8b 45 cc	 mov	 eax, DWORD PTR $T6[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001cd	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  001ce	8b 4d c8	 mov	 ecx, DWORD PTR tv1409[ebp]
  001d1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  001d4	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  001d9	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  001dc	72 02		 jb	 SHORT $LN66@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  001de	8b 00		 mov	 eax, DWORD PTR [eax]
$LN66@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  001e6	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001e9	83 c4 04	 add	 esp, 4
  001ec	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$7[ebp+8]

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  001ef	89 75 cc	 mov	 DWORD PTR $T5[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  001f2	8b 10		 mov	 edx, DWORD PTR [eax]
  001f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001f7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001fc	2b ca		 sub	 ecx, edx
  001fe	89 55 c8	 mov	 DWORD PTR tv1408[ebp], edx
  00201	f7 e9		 imul	 ecx
  00203	c1 fa 02	 sar	 edx, 2
  00206	8b c2		 mov	 eax, edx
  00208	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0020b	03 c2		 add	 eax, edx
  0020d	3b c6		 cmp	 eax, esi
  0020f	0f 86 74 02 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00215	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  00218	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00219	8b 4d c8	 mov	 ecx, DWORD PTR tv1408[ebp]
  0021c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0021f	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00224	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00227	72 02		 jb	 SHORT $LN76@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00229	8b 00		 mov	 eax, DWORD PTR [eax]
$LN76@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00231	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  00234	83 c4 04	 add	 esp, 4
  00237	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$7[ebp+12]

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  0023a	89 75 cc	 mov	 DWORD PTR $T4[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0023d	8b 10		 mov	 edx, DWORD PTR [eax]
  0023f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00242	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00247	2b ca		 sub	 ecx, edx
  00249	89 55 c8	 mov	 DWORD PTR tv1407[ebp], edx
  0024c	f7 e9		 imul	 ecx
  0024e	c1 fa 02	 sar	 edx, 2
  00251	8b c2		 mov	 eax, edx
  00253	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00256	03 c2		 add	 eax, edx
  00258	3b c6		 cmp	 eax, esi
  0025a	0f 86 29 02 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00260	8b 45 cc	 mov	 eax, DWORD PTR $T4[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  00263	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00264	8b 4d c8	 mov	 ecx, DWORD PTR tv1407[ebp]
  00267	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0026a	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  0026f	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  00272	72 02		 jb	 SHORT $LN86@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00274	8b 00		 mov	 eax, DWORD PTR [eax]
$LN86@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0027c	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  0027f	83 c4 04	 add	 esp, 4
  00282	d9 5d e4	 fstp	 DWORD PTR _EffectPosition$7[ebp+20]

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00285	89 75 cc	 mov	 DWORD PTR $T3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00288	8b 10		 mov	 edx, DWORD PTR [eax]
  0028a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0028d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00292	2b ca		 sub	 ecx, edx
  00294	89 55 c8	 mov	 DWORD PTR tv1406[ebp], edx
  00297	f7 e9		 imul	 ecx
  00299	c1 fa 02	 sar	 edx, 2
  0029c	8b c2		 mov	 eax, edx
  0029e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a1	03 c2		 add	 eax, edx
  002a3	3b c6		 cmp	 eax, esi
  002a5	0f 86 de 01 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  002ab	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  002ae	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  002af	8b 4d c8	 mov	 ecx, DWORD PTR tv1406[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  002b2	81 c7 90 00 00
	00		 add	 edi, 144		; 00000090H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  002b8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  002bb	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  002c0	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  002c3	72 02		 jb	 SHORT $LN96@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  002c5	8b 00		 mov	 eax, DWORD PTR [eax]
$LN96@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002cd	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  002d0	83 c4 04	 add	 esp, 4
  002d3	d9 5d e8	 fstp	 DWORD PTR _EffectPosition$7[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002d6	8b 10		 mov	 edx, DWORD PTR [eax]
  002d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002db	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002e0	2b ca		 sub	 ecx, edx
  002e2	89 55 cc	 mov	 DWORD PTR tv1405[ebp], edx
  002e5	f7 e9		 imul	 ecx
  002e7	c1 fa 02	 sar	 edx, 2
  002ea	8b c2		 mov	 eax, edx
  002ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ef	03 c2		 add	 eax, edx
  002f1	3b c6		 cmp	 eax, esi
  002f3	0f 86 90 01 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  002f9	8b 45 cc	 mov	 eax, DWORD PTR tv1405[ebp]
  002fc	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  002fe	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00302	72 02		 jb	 SHORT $LN106@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00304	8b 00		 mov	 eax, DWORD PTR [eax]
$LN106@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 131  : 				EffectPosition.m_vecControlPoint.z = atof(pTokenVector->at(i++).c_str());

  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 _atof
  0030c	d9 5d ec	 fstp	 DWORD PTR _EffectPosition$7[ebp+28]

; 132  : 			}

  0030f	e9 eb 00 00 00	 jmp	 $LN172@LoadScript
$LN7@LoadScript:

; 133  : 			else if (pTokenVector->at(i) == "MOVING_TYPE_DIRECT")

  00314	8b 45 c8	 mov	 eax, DWORD PTR tv1404[ebp]
  00317	03 c7		 add	 eax, edi
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00324	83 c4 08	 add	 esp, 8
  00327	84 c0		 test	 al, al
  00329	0f 84 56 01 00
	00		 je	 $LN9@LoadScript

; 134  : 			{
; 135  : 				i++;

  0032f	46		 inc	 esi

; 136  : 
; 137  : 				EffectPosition.m_iMovingType = MOVING_TYPE_DIRECT;

  00330	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$7[ebp+16], 0

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00337	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00339	39 75 cc	 cmp	 DWORD PTR tv1400[ebp], esi
  0033c	0f 86 47 01 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00342	8b 4d c8	 mov	 ecx, DWORD PTR tv1404[ebp]
  00345	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00348	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0034b	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  0034c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  00350	72 02		 jb	 SHORT $LN119@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00352	8b 00		 mov	 eax, DWORD PTR [eax]
$LN119@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0035a	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0035d	83 c4 04	 add	 esp, 4
  00360	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$7[ebp+4]

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00363	89 75 cc	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00366	8b 10		 mov	 edx, DWORD PTR [eax]
  00368	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0036b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00370	2b ca		 sub	 ecx, edx
  00372	89 55 c8	 mov	 DWORD PTR tv1403[ebp], edx
  00375	f7 e9		 imul	 ecx
  00377	c1 fa 02	 sar	 edx, 2
  0037a	8b c2		 mov	 eax, edx
  0037c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0037f	03 c2		 add	 eax, edx
  00381	3b c6		 cmp	 eax, esi
  00383	0f 86 00 01 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  00389	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  0038c	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  0038d	8b 4d c8	 mov	 ecx, DWORD PTR tv1403[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00390	83 c7 48	 add	 edi, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  00393	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  00396	83 7c c1 14 10	 cmp	 DWORD PTR [ecx+eax*8+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1523 :         return _My_data._Myfirst[_Pos];

  0039b	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2145 :         if (_Large_string_engaged()) {

  0039e	72 02		 jb	 SHORT $LN129@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  003a0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN129@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003a8	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  003ab	83 c4 04	 add	 esp, 4
  003ae	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$7[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003b1	8b 10		 mov	 edx, DWORD PTR [eax]
  003b3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003b6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  003bb	2b ca		 sub	 ecx, edx
  003bd	89 55 cc	 mov	 DWORD PTR tv1402[ebp], edx
  003c0	f7 e9		 imul	 ecx
  003c2	c1 fa 02	 sar	 edx, 2
  003c5	8b c2		 mov	 eax, edx
  003c7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003ca	03 c2		 add	 eax, edx
  003cc	3b c6		 cmp	 eax, esi
  003ce	0f 86 b5 00 00
	00		 jbe	 $LN166@LoadScript

; 1523 :         return _My_data._Myfirst[_Pos];

  003d4	8b 45 cc	 mov	 eax, DWORD PTR tv1402[ebp]
  003d7	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 2153 :         return _BUF_SIZE <= _Myres;

  003d9	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2145 :         if (_Large_string_engaged()) {

  003dd	72 02		 jb	 SHORT $LN139@LoadScript

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  003df	8b 00		 mov	 eax, DWORD PTR [eax]
$LN139@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 141  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _atof
  003e7	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$7[ebp+12]

; 142  : 
; 143  : 				EffectPosition.m_vecControlPoint = D3DXVECTOR3(0.0f,0.0f,0.0f);

  003ea	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$7[ebp+20], 0
  003f1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$7[ebp+24], 0
  003f8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$7[ebp+28], 0
$LN172@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  003ff	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  00402	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00405	83 c1 08	 add	 ecx, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  00408	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00409	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0040c	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0040f	74 15		 je	 SHORT $LN148@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00411	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR _EffectPosition$7[ebp]
  00415	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00418	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _EffectPosition$7[ebp+16]
  0041c	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 690  :         ++_Mylast;

  00420	83 41 04 20	 add	 DWORD PTR [ecx+4], 32	; 00000020H

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00424	eb 0a		 jmp	 SHORT $LN2@LoadScript
$LN148@LoadScript:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00426	8d 55 d0	 lea	 edx, DWORD PTR _EffectPosition$7[ebp]
  00429	52		 push	 edx
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
$LN2@LoadScript:

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00430	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00433	83 c7 18	 add	 edi, 24			; 00000018H
  00436	8b 10		 mov	 edx, DWORD PTR [eax]
  00438	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0043b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00440	2b ca		 sub	 ecx, edx
  00442	89 55 cc	 mov	 DWORD PTR tv1401[ebp], edx
  00445	f7 e9		 imul	 ecx
  00447	c1 fa 02	 sar	 edx, 2
  0044a	8b c2		 mov	 eax, edx
  0044c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0044f	03 c2		 add	 eax, edx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00451	3b f0		 cmp	 esi, eax
  00453	0f 82 a7 fc ff
	ff		 jb	 $LL4@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00459	8b 7d b8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@LoadScript:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 154  : 	return OnLoadScript(rTextFileLoader);

  0045c	8b 07		 mov	 eax, DWORD PTR [edi]
  0045e	8b cf		 mov	 ecx, edi
  00460	ff 75 bc	 push	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00463	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00466	ff d0		 call	 eax
$LN1@LoadScript:

; 155  : }

  00468	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0046b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00472	59		 pop	 ecx
  00473	5f		 pop	 edi
  00474	5e		 pop	 esi
  00475	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00478	33 cd		 xor	 ecx, ebp
  0047a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0047f	8b e5		 mov	 esp, ebp
  00481	5d		 pop	 ebp
  00482	c2 04 00	 ret	 4
$LN9@LoadScript:

; 144  : 			}
; 145  : 			else
; 146  : 			{
; 147  : 				return FALSE;

  00485	33 c0		 xor	 eax, eax
  00487	eb df		 jmp	 SHORT $LN1@LoadScript
$LN166@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1520 :             _Xrange();

  00489	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN171@LoadScript:
  0048e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ENDP ; CEffectElementBase::LoadScript
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?isData@CEffectElementBase@@QAE_NXZ
_TEXT	SEGMENT
?isData@CEffectElementBase@@QAE_NXZ PROC		; CEffectElementBase::isData, COMDAT
; _this$ = ecx

; 93   : 	return OnIsData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?isData@CEffectElementBase@@QAE_NXZ ENDP		; CEffectElementBase::isData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?Clear@CEffectElementBase@@QAEXXZ
_TEXT	SEGMENT
?Clear@CEffectElementBase@@QAEXXZ PROC			; CEffectElementBase::Clear, COMDAT
; _this$ = ecx

; 98   : 	m_fStartTime = 0.0f;
; 99   : 
; 100  : 	OnClear();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00009	ff 60 04	 jmp	 DWORD PTR [eax+4]
?Clear@CEffectElementBase@@QAEXXZ ENDP			; CEffectElementBase::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??1CEffectElementBase@@UAE@XZ
_TEXT	SEGMENT
??1CEffectElementBase@@UAE@XZ PROC			; CEffectElementBase::~CEffectElementBase, COMDAT
; _this$ = ecx

; 167  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectElementBase@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CEffectEle

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00029	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1699 :             _Myend   = pointer();

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN6@CEffectEle:
  00037	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 168  : }

  00038	c3		 ret	 0
??1CEffectElementBase@@UAE@XZ ENDP			; CEffectElementBase::~CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??0CEffectElementBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEffectElementBase@@QAE@XZ PROC			; CEffectElementBase::CEffectElementBase, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CEffectElementBase@@6B@

; 165  : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EffectElementBase.cpp

; 163  : {

  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 	m_fStartTime = 0.0f;

  00024	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 165  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CEffectElementBase@@QAE@XZ ENDP			; CEffectElementBase::CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 268  :     _Obj.~_Ty();
; 269  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 1708 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4303 :             auto& _Al          = _Getal();
; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4308 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2723 :         _Tidy_deallocate();
; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__New_ptr$1 = -8					; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  0000c	57		 push	 edi

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000d	8b f9		 mov	 edi, ecx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000f	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0001d	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL47@basic_stri:
  00023	8a 07		 mov	 al, BYTE PTR [edi]
  00025	47		 inc	 edi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL47@basic_stri
  0002a	2b fa		 sub	 edi, edx

; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002c	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0002f	77 1c		 ja	 SHORT $LN14@basic_stri

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00031	57		 push	 edi
  00032	51		 push	 ecx
  00033	53		 push	 ebx

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00034	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00037	e8 00 00 00 00	 call	 _memmove
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  00043	8b c3		 mov	 eax, ebx
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN14@basic_stri:

; 4221 :         if (_New_size > max_size()) {

  0004d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00053	77 5c		 ja	 SHORT $LN51@basic_stri

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00055	8b c7		 mov	 eax, edi
  00057	83 c8 0f	 or	 eax, 15			; 0000000fH
  0005a	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0005f	76 07		 jbe	 SHORT $LN31@basic_stri

; 4203 :             return _Max;

  00061	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00066	eb 0a		 jmp	 SHORT $LN49@basic_stri
$LN31@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00068	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0006d	3b c1		 cmp	 eax, ecx
  0006f	0f 42 c1	 cmovb	 eax, ecx
$LN49@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00072	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  00075	40		 inc	 eax
  00076	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  0007d	57		 push	 edi
  0007e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00081	8b f0		 mov	 esi, eax

; 4229 :         _Mypair._Myval2._Orphan_all();
; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  00083	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00086	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00089	56		 push	 esi

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008a	89 75 f8	 mov	 DWORD PTR __New_ptr$1[ebp], esi

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  0008d	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00090	e8 00 00 00 00	 call	 _memcpy

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00095	8d 45 f8	 lea	 eax, DWORD PTR __New_ptr$1[ebp]

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0009c	50		 push	 eax
  0009d	53		 push	 ebx
  0009e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000a3	83 c4 18	 add	 esp, 24			; 00000018H

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  000a6	8b c3		 mov	 eax, ebx

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000a8	5e		 pop	 esi

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2338 :         _Tidy_init();
; 2339 :         assign(_Ptr);
; 2340 :         _Proxy._Release();
; 2341 :     }

  000a9	5f		 pop	 edi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN51@basic_stri:

; 4222 :             _Xlen_string(); // result too long

  000b1	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN48@basic_stri:
  000b6	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2201 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
