; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??0CEmitterProperty@@QAE@XZ			; CEmitterProperty::CEmitterProperty
PUBLIC	??1CEmitterProperty@@UAE@XZ			; CEmitterProperty::~CEmitterProperty
PUBLIC	?Clear@CEmitterProperty@@QAEXXZ			; CEmitterProperty::Clear
PUBLIC	?GetEmitterShape@CEmitterProperty@@QAEEXZ	; CEmitterProperty::GetEmitterShape
PUBLIC	?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
PUBLIC	?isEmitFromEdge@CEmitterProperty@@QAEHXZ	; CEmitterProperty::isEmitFromEdge
PUBLIC	?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetEmittingSize
PUBLIC	?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingAngularVelocity
PUBLIC	?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionX
PUBLIC	?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionY
PUBLIC	?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionZ
PUBLIC	?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingVelocity
PUBLIC	?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmissionCountPerSecond
PUBLIC	?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleLifeTime
PUBLIC	?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetParticleSizeX
PUBLIC	?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetParticleSizeY
PUBLIC	??_GCEmitterProperty@@UAEPAXI@Z			; CEmitterProperty::`scalar deleting destructor'
PUBLIC	??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >
PUBLIC	??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
PUBLIC	??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
PUBLIC	??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z ; std::_Refancy<CTimeEvent<float> *,0>
PUBLIC	??_7CEmitterProperty@@6B@			; CEmitterProperty::`vftable'
PUBLIC	??_R4CEmitterProperty@@6B@			; CEmitterProperty::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEmitterProperty@@@8			; CEmitterProperty `RTTI Type Descriptor'
PUBLIC	??_R3CEmitterProperty@@8			; CEmitterProperty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEmitterProperty@@8			; CEmitterProperty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEmitterProperty@@8		; CEmitterProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_ECEmitterProperty@@UAEPAXI@Z:PROC		; CEmitterProperty::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CEmitterProperty@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEmitterProperty@@8 DD FLAT:??_R0?AVCEmitterProperty@@@8 ; CEmitterProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_R2CEmitterProperty@@8
rdata$r	SEGMENT
??_R2CEmitterProperty@@8 DD FLAT:??_R1A@?0A@EA@CEmitterProperty@@8 ; CEmitterProperty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEmitterProperty@@8
rdata$r	SEGMENT
??_R3CEmitterProperty@@8 DD 00H				; CEmitterProperty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEmitterProperty@@@8
data$r	SEGMENT
??_R0?AVCEmitterProperty@@@8 DD FLAT:??_7type_info@@6B@	; CEmitterProperty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEmitterProperty@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEmitterProperty@@6B@
rdata$r	SEGMENT
??_R4CEmitterProperty@@6B@ DD 00H			; CEmitterProperty::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEmitterProperty@@@8
	DD	FLAT:??_R3CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_7CEmitterProperty@@6B@
CONST	SEGMENT
??_7CEmitterProperty@@6B@ DD FLAT:??_R4CEmitterProperty@@6B@ ; CEmitterProperty::`vftable'
	DD	FLAT:??_ECEmitterProperty@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z PROC ; std::_Refancy<CTimeEvent<float> *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z ENDP ; std::_Refancy<CTimeEvent<float> *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z PROC ; std::_Const_cast<CTimeEvent<float> const >, COMDAT

; 282  : auto _Const_cast(_Ty* _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  :     return const_cast<remove_const_t<_Ty>*>(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ENDP ; std::_Const_cast<CTimeEvent<float> const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z
_TEXT	SEGMENT
__UMid$1$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z PROC ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>, COMDAT

; 3601 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3601 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx

; 3567 :     auto _UFirst      = _Get_unwrapped(_First);

  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  0000d	2b d3		 sub	 edx, ebx
  0000f	c1 fa 03	 sar	 edx, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3601 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00012	56		 push	 esi
  00013	57		 push	 edi

; 3574 :         if (_Count <= 0) {

  00014	85 d2		 test	 edx, edx
  00016	7e 33		 jle	 SHORT $LN82@equal_rang
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00018	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001f	90		 npad	 1
$LL4@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3580 :         _Diff _Count2    = _Count / 2;

  00020	8b ca		 mov	 ecx, edx
  00022	d1 e9		 shr	 ecx, 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00024	f3 0f 10 04 cb	 movss	 xmm0, DWORD PTR [ebx+ecx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  00029	8d 04 cb	 lea	 eax, DWORD PTR [ebx+ecx*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  0002c	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  0002f	89 45 f8	 mov	 DWORD PTR __UMid$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3582 :         if (_DEBUG_LT_PRED(_Pred, *_UMid, _Val)) { // range begins above _UMid, loop

  00032	76 0c		 jbe	 SHORT $LN8@equal_rang

; 3583 :             _UFirst = _Next_iter(_UMid);

  00034	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 3584 :             _Count -= _Count2 + 1;

  00037	83 c8 ff	 or	 eax, -1
  0003a	2b c1		 sub	 eax, ecx
  0003c	03 d0		 add	 edx, eax

; 3585 :         } else if (_Pred(_Val, *_UMid)) {

  0003e	eb 07		 jmp	 SHORT $LN11@equal_rang
$LN8@equal_rang:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  00040	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3585 :         } else if (_Pred(_Val, *_UMid)) {

  00043	76 2a		 jbe	 SHORT $LN10@equal_rang

; 3586 :             _Count = _Count2; // range in first half, loop

  00045	8b d1		 mov	 edx, ecx
$LN11@equal_rang:

; 3568 :     const auto _ULast = _Get_unwrapped(_Last);
; 3569 : 
; 3570 :     using _Diff  = _Iter_diff_t<_FwdIt>;
; 3571 :     _Diff _Count = _STD distance(_UFirst, _ULast);
; 3572 : 
; 3573 :     for (;;) { // divide and conquer, check midpoint
; 3574 :         if (_Count <= 0) {

  00047	85 d2		 test	 edx, edx
  00049	7f d5		 jg	 SHORT $LL4@equal_rang
$LN82@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 195  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  0004b	8b c3		 mov	 eax, ebx
  0004d	8b fb		 mov	 edi, ebx
$LN5@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z ; std::_Refancy<CTimeEvent<float> *,0>
  00055	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00058	57		 push	 edi
  00059	89 06		 mov	 DWORD PTR [esi], eax
  0005b	e8 00 00 00 00	 call	 ??$_Refancy@PAV?$CTimeEvent@M@@$0A@@std@@YAPAV?$CTimeEvent@M@@PAV1@@Z ; std::_Refancy<CTimeEvent<float> *,0>
  00060	83 c4 08	 add	 esp, 8
  00063	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3603 :     return _STD equal_range(_First, _Last, _Val, less<>());

  00066	8b c6		 mov	 eax, esi
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx

; 3604 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN10@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 5681 :     auto _UFirst                = _Get_unwrapped(_First);

  0006f	8b fb		 mov	 edi, ebx
  00071	89 7d fc	 mov	 DWORD PTR $T1[ebp], edi

; 5682 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));
; 5683 : 
; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  00074	85 c9		 test	 ecx, ecx
  00076	74 25		 je	 SHORT $LN37@equal_rang
$LL36@equal_rang:

; 5685 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00078	8b f1		 mov	 esi, ecx
  0007a	d1 ee		 shr	 esi, 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  0007c	0f 2f 0c f7	 comiss	 xmm1, DWORD PTR [edi+esi*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  00080	8d 04 f7	 lea	 eax, DWORD PTR [edi+esi*8]

; 5687 :         if (_Pred(*_UMid, _Val)) { // try top half

  00083	76 0c		 jbe	 SHORT $LN38@equal_rang

; 5688 :             _UFirst = _Next_iter(_UMid);

  00085	8d 78 08	 lea	 edi, DWORD PTR [eax+8]

; 5689 :             _Count -= _Count2 + 1;

  00088	83 c8 ff	 or	 eax, -1
  0008b	2b c6		 sub	 eax, esi
  0008d	03 c8		 add	 ecx, eax

; 5690 :         } else {

  0008f	eb 02		 jmp	 SHORT $LN39@equal_rang
$LN38@equal_rang:

; 5691 :             _Count = _Count2;

  00091	8b ce		 mov	 ecx, esi
$LN39@equal_rang:

; 5682 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));
; 5683 : 
; 5684 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  00093	85 c9		 test	 ecx, ecx
  00095	7f e1		 jg	 SHORT $LL36@equal_rang
  00097	8b 45 f8	 mov	 eax, DWORD PTR __UMid$1$[ebp]
  0009a	89 7d fc	 mov	 DWORD PTR $T1[ebp], edi
$LN37@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3590 :             auto _ULast2 = _STD upper_bound(_Next_iter(_UMid), _UFirst, _Val, _Pass_fn(_Pred));

  0009d	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  000a0	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3539 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  000a7	2b cf		 sub	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1724 :         return _Last - _First; // assume the iterator will do debug checking

  000a9	03 cb		 add	 ecx, ebx
  000ab	c1 f9 03	 sar	 ecx, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3541 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000ae	85 c9		 test	 ecx, ecx
  000b0	7e 23		 jle	 SHORT $LN55@equal_rang
$LL54@equal_rang:

; 3542 :         _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  000b2	8b d1		 mov	 edx, ecx
  000b4	d1 ea		 shr	 edx, 1
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000b6	f3 0f 10 04 d7	 movss	 xmm0, DWORD PTR [edi+edx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility

; 1644 :         _Where += _Off;

  000bb	8d 04 d7	 lea	 eax, DWORD PTR [edi+edx*8]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000be	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm

; 3544 :         if (_Pred(_Val, *_UMid)) {

  000c1	76 04		 jbe	 SHORT $LN56@equal_rang

; 3545 :             _Count = _Count2;

  000c3	8b ca		 mov	 ecx, edx

; 3546 :         } else { // try top half

  000c5	eb 0a		 jmp	 SHORT $LN57@equal_rang
$LN56@equal_rang:

; 3547 :             _UFirst = _Next_iter(_UMid);

  000c7	8d 78 08	 lea	 edi, DWORD PTR [eax+8]

; 3548 :             _Count -= _Count2 + 1;

  000ca	83 c8 ff	 or	 eax, -1
  000cd	2b c2		 sub	 eax, edx
  000cf	03 c8		 add	 ecx, eax
$LN57@equal_rang:

; 3541 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000d1	85 c9		 test	 ecx, ecx
  000d3	7f dd		 jg	 SHORT $LL54@equal_rang
$LN55@equal_rang:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 195  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  000d5	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000d8	e9 72 ff ff ff	 jmp	 $LN5@equal_rang
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ENDP ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >, COMDAT

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {
; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 961  :         }
; 962  :     }
; 963  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEmitterProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEmitterProperty@@UAEPAXI@Z PROC			; CEmitterProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEmitterProperty@@UAE@XZ ; CEmitterProperty::~CEmitterProperty
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 b0 00 00 00	 push	 176			; 000000b0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCEmitterProperty@@UAEPAXI@Z ENDP			; CEmitterProperty::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleSizeY, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 65   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeY, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 65   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeY, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	75 12		 jne	 SHORT $LN5@GetParticl
$LN72@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00037	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0003f	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00049	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004d	0f 2f c1	 comiss	 xmm0, xmm1
  00050	77 e5		 ja	 SHORT $LN72@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00052	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00056	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00058	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  0005b	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00060	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN7@GetParticl:
  0006a	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006b	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0006e	52		 push	 edx
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0007d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  00083	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00085	74 1c		 je	 SHORT $LN8@GetParticl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  0008d	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  00090	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00095	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00098	5f		 pop	 edi
  00099	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN8@GetParticl:
  000a3	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000aa	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000ad	8b f0		 mov	 esi, eax
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b5	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b9	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000bc	0f 28 d0	 movaps	 xmm2, xmm0
  000bf	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000c4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c8	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000cc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000d1	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d9	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000dd	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000e2	5e		 pop	 esi
  000e3	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  000e4	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleSizeY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleSizeX, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 60   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeX, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 60   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeX, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	75 12		 jne	 SHORT $LN5@GetParticl
$LN72@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00037	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0003f	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00049	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004d	0f 2f c1	 comiss	 xmm0, xmm1
  00050	77 e5		 ja	 SHORT $LN72@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00052	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00056	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00058	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  0005b	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00060	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN7@GetParticl:
  0006a	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006b	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0006e	52		 push	 edx
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0007d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  00083	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00085	74 1c		 je	 SHORT $LN8@GetParticl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  0008d	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  00090	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00095	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00098	5f		 pop	 edi
  00099	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN8@GetParticl:
  000a3	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000aa	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000ad	8b f0		 mov	 esi, eax
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b5	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b9	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000bc	0f 28 d0	 movaps	 xmm2, xmm0
  000bf	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000c4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c8	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000cc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000d1	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d9	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000dd	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000e2	5e		 pop	 esi
  000e3	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  000e4	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleSizeX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleLifeTime, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 55   : 	GetTimeEventBlendValue(fTime, m_TimeEventLifeTime, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 55   : 	GetTimeEventBlendValue(fTime, m_TimeEventLifeTime, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	75 12		 jne	 SHORT $LN5@GetParticl
$LN72@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00037	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0003f	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@GetParticl:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00049	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004d	0f 2f c1	 comiss	 xmm0, xmm1
  00050	77 e5		 ja	 SHORT $LN72@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00052	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00056	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00058	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  0005b	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00060	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN7@GetParticl:
  0006a	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006b	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0006e	52		 push	 edx
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0007d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  00083	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00085	74 1c		 je	 SHORT $LN8@GetParticl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  0008d	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  00090	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00095	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00098	5f		 pop	 edi
  00099	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN8@GetParticl:
  000a3	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000aa	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000ad	8b f0		 mov	 esi, eax
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b5	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b9	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000bc	0f 28 d0	 movaps	 xmm2, xmm0
  000bf	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000c4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c8	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000cc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000d1	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d9	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000dd	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000e2	5e		 pop	 esi
  000e3	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  000e4	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleLifeTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmissionCountPerSecond, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 50   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmissionCountPerSecond, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 50   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmissionCountPerSecond, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetEmissio
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetEmissio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	75 12		 jne	 SHORT $LN5@GetEmissio
$LN72@GetEmissio:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00037	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0003f	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@GetEmissio:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00049	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004d	0f 2f c1	 comiss	 xmm0, xmm1
  00050	77 e5		 ja	 SHORT $LN72@GetEmissio

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00052	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00056	76 12		 jbe	 SHORT $LN7@GetEmissio
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00058	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  0005b	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00060	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN7@GetEmissio:
  0006a	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006b	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0006e	52		 push	 edx
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0007d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  00083	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00085	74 1c		 je	 SHORT $LN8@GetEmissio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  0008d	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  00090	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00095	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00098	5f		 pop	 edi
  00099	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN8@GetEmissio:
  000a3	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000aa	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000ad	8b f0		 mov	 esi, eax
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b5	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b9	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000bc	0f 28 d0	 movaps	 xmm2, xmm0
  000bf	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000c4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c8	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000cc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000d1	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d9	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000dd	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000e2	5e		 pop	 esi
  000e3	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  000e4	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmissionCountPerSecond
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetEmittingVelocity, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 45   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingVelocity, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 78	 mov	 ecx, DWORD PTR [ecx+120]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 45   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingVelocity, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetEmittingVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionZ, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 40   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionZ, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 40   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionZ, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionZ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionY, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 35   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionY, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 35   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionY, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionX, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 30   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionX, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 30   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionX, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingAngularVelocity, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 25   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingAngularVelocity, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 25   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingAngularVelocity, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingAngularVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetEmittingSize, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 20   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingSize, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 20   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingSize, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 120  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	75 12		 jne	 SHORT $LN5@GetEmittin
$LN72@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  00031	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00039	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN5@GetEmittin:
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	0f 2f c1	 comiss	 xmm0, xmm1
  0004a	77 e5		 ja	 SHORT $LN72@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0004c	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00050	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00055	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0005a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN7@GetEmittin:
  00064	57		 push	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00065	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  00074	8b 7d f4	 mov	 edi, DWORD PTR _result$1[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00077	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 149  :         return _Ptr == _Right._Ptr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _result$1[ebp+4]
  0007d	3b f8		 cmp	 edi, eax
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0007f	74 1c		 je	 SHORT $LN8@GetEmittin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
  00087	83 c4 04	 add	 esp, 4
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 255  : 		*pReturnValue = result.first->m_Value;

  0008a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00092	5f		 pop	 edi
  00093	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN8@GetEmittin:
  0009d	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >

; 92   :         --_Ptr;

  000a4	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]

; 256  :         return _Const_cast(_Mybase::operator->());

  000a7	8b f0		 mov	 esi, eax
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBV?$CTimeEvent@M@@@std@@YAPAV?$CTimeEvent@M@@PBV1@@Z ; std::_Const_cast<CTimeEvent<float> const >
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000af	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 256  :         return _Const_cast(_Mybase::operator->());

  000b3	83 c4 08	 add	 esp, 8
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  000b6	0f 28 d0	 movaps	 xmm2, xmm0
  000b9	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  000be	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cb	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000d3	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d7	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  000dc	5e		 pop	 esi
  000dd	5f		 pop	 edi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  000de	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetEmittingSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?isEmitFromEdge@CEmitterProperty@@QAEHXZ
_TEXT	SEGMENT
?isEmitFromEdge@CEmitterProperty@@QAEHXZ PROC		; CEmitterProperty::isEmitFromEdge, COMDAT
; _this$ = ecx

; 14   : 	return m_bEmitFromEdgeFlag;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 15   : }

  00003	c3		 ret	 0
?isEmitFromEdge@CEmitterProperty@@QAEHXZ ENDP		; CEmitterProperty::isEmitFromEdge
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ
_TEXT	SEGMENT
?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ PROC	; CEmitterProperty::GetEmitterAdvancedType, COMDAT
; _this$ = ecx

; 10   : 	return m_byEmitterAdvancedType;

  00000	8a 41 15	 mov	 al, BYTE PTR [ecx+21]

; 11   : }

  00003	c3		 ret	 0
?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ENDP	; CEmitterProperty::GetEmitterAdvancedType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmitterShape@CEmitterProperty@@QAEEXZ
_TEXT	SEGMENT
?GetEmitterShape@CEmitterProperty@@QAEEXZ PROC		; CEmitterProperty::GetEmitterShape, COMDAT
; _this$ = ecx

; 6    : 	return m_byEmitterShape;

  00000	8a 41 14	 mov	 al, BYTE PTR [ecx+20]

; 7    : }

  00003	c3		 ret	 0
?GetEmitterShape@CEmitterProperty@@QAEEXZ ENDP		; CEmitterProperty::GetEmitterShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?Clear@CEmitterProperty@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
?Clear@CEmitterProperty@@QAEXXZ PROC			; CEmitterProperty::Clear, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 70   : 	m_dwMaxEmissionCount = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	0f 57 c9	 xorps	 xmm1, xmm1

; 71   : 
; 72   : 	m_fCycleLength = 0.0f;

  00010	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00017	0f 57 c0	 xorps	 xmm0, xmm0

; 73   : 	m_bCycleLoopFlag = FALSE;

  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 74   : 	m_iLoopCount = 0;

  00021	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 75   : 
; 76   : 	m_byEmitterShape = EMITTER_SHAPE_POINT;

  00028	66 c7 41 14 00
	00		 mov	 WORD PTR [ecx+20], 0

; 77   : 	m_byEmitterAdvancedType = EMITTER_ADVANCED_TYPE_FREE;
; 78   : 	m_bEmitFromEdgeFlag = FALSE;

  0002e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 80   : 	m_fEmittingRadius = 0.0f;

  00035	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  0003c	0f 14 c1	 unpcklps xmm0, xmm1
  0003f	66 0f d6 41 1c	 movq	 QWORD PTR [ecx+28], xmm0
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 79   : 	m_v3EmittingSize = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0004b	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp+8]
  0004e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 82   : 	m_v3EmittingDirection = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00051	0f 14 c9	 unpcklps xmm1, xmm1
  00054	66 0f d6 49 2c	 movq	 QWORD PTR [ecx+44], xmm1
; File C:\DS Project\DS Files\Source\ClientSource\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 82   : 	m_v3EmittingDirection = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00060	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  00063	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 83   : 
; 84   : 	m_TimeEventEmittingSize.clear();

  00066	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00069	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 85   : 	m_TimeEventEmittingDirectionX.clear();

  0006c	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0006f	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 86   : 	m_TimeEventEmittingDirectionY.clear();

  00072	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00075	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 87   : 	m_TimeEventEmittingDirectionZ.clear();

  00078	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  0007b	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 88   : 	m_TimeEventEmittingVelocity.clear();

  0007e	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00081	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 89   : 	m_TimeEventEmissionCountPerSecond.clear();

  00084	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  0008a	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 90   : 	m_TimeEventLifeTime.clear();

  00090	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  00096	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 91   : 	m_TimeEventSizeX.clear();

  0009c	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
  000a2	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 92   : 	m_TimeEventSizeY.clear();

  000a8	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  000ae	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 93   : 	m_TimeEventEmittingAngularVelocity.clear();

  000b4	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  000b7	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 94   : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?Clear@CEmitterProperty@@QAEXXZ ENDP			; CEmitterProperty::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ??1CEmitterProperty@@UAE@XZ
_TEXT	SEGMENT
??1CEmitterProperty@@UAE@XZ PROC			; CEmitterProperty::~CEmitterProperty, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEmitterProperty@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 8e a4 00 00
	00		 mov	 ecx, DWORD PTR [esi+164]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 33		 je	 SHORT $LN6@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  00019	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001b	83 e0 f8	 and	 eax, -8			; fffffff8H
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00025	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00032	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0

; 1699 :             _Myend   = pointer();

  0003c	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
$LN6@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0004c	85 c9		 test	 ecx, ecx
  0004e	74 33		 je	 SHORT $LN13@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00050	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]
  00056	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00058	83 e0 f8	 and	 eax, -8			; fffffff8H
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00062	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  0006f	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0

; 1699 :             _Myend   = pointer();

  00079	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
$LN13@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00083	8b 8e 8c 00 00
	00		 mov	 ecx, DWORD PTR [esi+140]
  00089	85 c9		 test	 ecx, ecx
  0008b	74 33		 je	 SHORT $LN20@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0008d	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  00093	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00095	83 e0 f8	 and	 eax, -8			; fffffff8H
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0009f	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a9	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  000ac	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0

; 1699 :             _Myend   = pointer();

  000b6	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
$LN20@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  000c0	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  000c6	85 c9		 test	 ecx, ecx
  000c8	74 33		 je	 SHORT $LN27@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ca	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  000d0	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d2	83 e0 f8	 and	 eax, -8			; fffffff8H
  000d5	50		 push	 eax
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  000dc	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  000e9	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0

; 1699 :             _Myend   = pointer();

  000f3	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
$LN27@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  000fd	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00100	85 c9		 test	 ecx, ecx
  00102	74 27		 je	 SHORT $LN34@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00104	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  00107	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00109	83 e0 f8	 and	 eax, -8			; fffffff8H
  0010c	50		 push	 eax
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00113	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  0011d	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 1699 :             _Myend   = pointer();

  00124	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN34@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  0012b	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0012e	85 c9		 test	 ecx, ecx
  00130	74 27		 je	 SHORT $LN41@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00132	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00135	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00137	83 e0 f8	 and	 eax, -8			; fffffff8H
  0013a	50		 push	 eax
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  00141	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00148	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  0014b	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1699 :             _Myend   = pointer();

  00152	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN41@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00159	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0015c	85 c9		 test	 ecx, ecx
  0015e	74 27		 je	 SHORT $LN48@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00160	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00163	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00165	83 e0 f8	 and	 eax, -8			; fffffff8H
  00168	50		 push	 eax
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0016f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00176	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00179	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 1699 :             _Myend   = pointer();

  00180	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN48@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00187	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0018a	85 c9		 test	 ecx, ecx
  0018c	74 27		 je	 SHORT $LN55@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0018e	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00191	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00193	83 e0 f8	 and	 eax, -8			; fffffff8H
  00196	50		 push	 eax
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  0019d	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a4	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  001a7	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 1699 :             _Myend   = pointer();

  001ae	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN55@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  001b5	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001b8	85 c9		 test	 ecx, ecx
  001ba	74 27		 je	 SHORT $LN62@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001bc	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  001bf	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c1	83 e0 f8	 and	 eax, -8			; fffffff8H
  001c4	50		 push	 eax
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  001cb	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d2	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  001d5	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 1699 :             _Myend   = pointer();

  001dc	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
$LN62@CEmitterPr:

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  001e3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001e6	85 c9		 test	 ecx, ecx
  001e8	74 27		 je	 SHORT $LN69@CEmitterPr

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001ea	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  001ed	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ef	83 e0 f8	 and	 eax, -8			; fffffff8H
  001f2	50		 push	 eax
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1697 :             _Myfirst = pointer();

  001f9	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory

; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00200	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 1698 :             _Mylast  = pointer();

  00203	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 1699 :             _Myend   = pointer();

  0020a	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
$LN69@CEmitterPr:
  00211	5e		 pop	 esi
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 102  : }

  00212	c3		 ret	 0
??1CEmitterProperty@@UAE@XZ ENDP			; CEmitterProperty::~CEmitterProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ??0CEmitterProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEmitterProperty@@QAE@XZ PROC			; CEmitterProperty::CEmitterProperty, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEmitterProperty@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00010	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00017	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  0001e	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00025	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0002c	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00033	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0003a	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00041	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00048	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00056	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0005d	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  00064	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0006b	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  00072	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  00079	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00080	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00087	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  0008e	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  00098	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000a2	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000ac	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000b6	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000c0	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  000ca	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000d4	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  000de	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  000e8	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  000f2	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  000fc	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
; File C:\DS Project\DS Files\Source\ClientSource\Client\EffectLib\EmitterProperty.cpp

; 98   : 	Clear();

  00106	e8 00 00 00 00	 call	 ?Clear@CEmitterProperty@@QAEXXZ ; CEmitterProperty::Clear

; 99   : }

  0010b	8b c6		 mov	 eax, esi
  0010d	5e		 pop	 esi
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
??0CEmitterProperty@@QAE@XZ ENDP			; CEmitterProperty::CEmitterProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
END
