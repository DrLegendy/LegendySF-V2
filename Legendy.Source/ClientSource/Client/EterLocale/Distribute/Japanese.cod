; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\DS Project\DS Files\Source\ClientSource\Client\EterLocale\Japanese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ShiftJIS_IsLeadByte@@YAHD@Z			; ShiftJIS_IsLeadByte
PUBLIC	?ShiftJIS_IsTrailByte@@YAHD@Z			; ShiftJIS_IsTrailByte
PUBLIC	?ShiftJIS_StringCompareCI@@YAHPBD0I@Z		; ShiftJIS_StringCompareCI
EXTRN	_tolower:PROC
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_StringCompareCI@@YAHPBD0I@Z
_TEXT	SEGMENT
_szStringLeft$ = 8					; size = 4
_szStringRight$ = 12					; size = 4
_sizeLength$ = 16					; size = 4
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z PROC		; ShiftJIS_StringCompareCI, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 27   : 	const unsigned char* uszString1 = (const unsigned char*) szStringLeft;
; 28   : 	const unsigned char* uszString2 = (const unsigned char*) szStringRight;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _szStringRight$[ebp]
  00007	56		 push	 esi

; 29   : 	unsigned short c1, c2;
; 30   : 
; 31   : 	if( sizeLength == 0 )

  00008	8b 75 10	 mov	 esi, DWORD PTR _sizeLength$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	0f 84 e9 00 00
	00		 je	 $LN31@ShiftJIS_S
  00014	bf 9f 00 00 00	 mov	 edi, 159		; 0000009fH
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ShiftJIS_S:

; 34   : 		c1 = *uszString1++;

  00020	8b 55 08	 mov	 edx, DWORD PTR _szStringLeft$[ebp]

; 35   : 		if( MACRO_IsLeadByte(c1) ) {

  00023	b8 81 00 00 00	 mov	 eax, 129		; 00000081H
  00028	4e		 dec	 esi
  00029	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0002c	42		 inc	 edx
  0002d	89 55 08	 mov	 DWORD PTR _szStringLeft$[ebp], edx
  00030	66 3b c1	 cmp	 ax, cx
  00033	77 05		 ja	 SHORT $LN8@ShiftJIS_S
  00035	66 3b cf	 cmp	 cx, di
  00038	76 0c		 jbe	 SHORT $LN7@ShiftJIS_S
$LN8@ShiftJIS_S:
  0003a	8d 81 20 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-224]
  00040	66 83 f8 1c	 cmp	 ax, 28			; 0000001cH
  00044	77 42		 ja	 SHORT $LN5@ShiftJIS_S
$LN7@ShiftJIS_S:

; 36   : 			if( sizeLength == 0 ) {

  00046	85 f6		 test	 esi, esi
  00048	75 22		 jne	 SHORT $LN9@ShiftJIS_S

; 37   : 				c1 = 0;
; 38   : 				c2 = MACRO_IsLeadByte( *uszString2 ) ? 0 : *uszString2;

  0004a	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0004c	33 ff		 xor	 edi, edi
  0004e	80 f9 81	 cmp	 cl, 129			; 00000081H
  00051	72 09		 jb	 SHORT $LN24@ShiftJIS_S
  00053	80 f9 9f	 cmp	 cl, 159			; 0000009fH
  00056	0f 86 a1 00 00
	00		 jbe	 $LN31@ShiftJIS_S
$LN24@ShiftJIS_S:
  0005c	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  0005f	3c 1c		 cmp	 al, 28			; 0000001cH
  00061	0f 86 96 00 00
	00		 jbe	 $LN31@ShiftJIS_S
  00067	0f b6 c1	 movzx	 eax, cl

; 63   : test:

  0006a	eb 7a		 jmp	 SHORT $test$40
$LN9@ShiftJIS_S:

; 39   : 				goto test;
; 40   : 			}
; 41   : 			if( *uszString1 == '\0' )

  0006c	8a 02		 mov	 al, BYTE PTR [edx]
  0006e	84 c0		 test	 al, al
  00070	75 04		 jne	 SHORT $LN11@ShiftJIS_S

; 42   : 				c1 = 0;

  00072	33 ff		 xor	 edi, edi
  00074	eb 1e		 jmp	 SHORT $LN6@ShiftJIS_S
$LN11@ShiftJIS_S:

; 43   : 			else {
; 44   : 				c1 = ((c1 << 8) | *uszString1++);

  00076	c1 e1 08	 shl	 ecx, 8
  00079	0f b6 c0	 movzx	 eax, al
  0007c	66 0b c8	 or	 cx, ax
  0007f	42		 inc	 edx
  00080	0f b7 f9	 movzx	 edi, cx
  00083	89 55 08	 mov	 DWORD PTR _szStringLeft$[ebp], edx

; 45   : 			}
; 46   : 		} else

  00086	eb 0c		 jmp	 SHORT $LN6@ShiftJIS_S
$LN5@ShiftJIS_S:

; 47   : 			c1 = tolower(c1);

  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _tolower
  0008e	83 c4 04	 add	 esp, 4
  00091	0f b7 f8	 movzx	 edi, ax
$LN6@ShiftJIS_S:

; 48   : 
; 49   : 		c2 = *uszString2++;

  00094	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]

; 50   : 		if( MACRO_IsLeadByte(c2) ) {

  00097	b8 81 00 00 00	 mov	 eax, 129		; 00000081H
  0009c	43		 inc	 ebx
  0009d	66 3b c1	 cmp	 ax, cx
  000a0	77 0a		 ja	 SHORT $LN16@ShiftJIS_S
  000a2	b8 9f 00 00 00	 mov	 eax, 159		; 0000009fH
  000a7	66 3b c8	 cmp	 cx, ax
  000aa	76 0c		 jbe	 SHORT $LN15@ShiftJIS_S
$LN16@ShiftJIS_S:
  000ac	8d 81 20 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-224]
  000b2	66 83 f8 1c	 cmp	 ax, 28			; 0000001cH
  000b6	77 22		 ja	 SHORT $LN13@ShiftJIS_S
$LN15@ShiftJIS_S:

; 51   : 			if( sizeLength == 0 ) {

  000b8	85 f6		 test	 esi, esi
  000ba	75 04		 jne	 SHORT $LN17@ShiftJIS_S

; 52   : 				c2 = 0;

  000bc	33 c0		 xor	 eax, eax

; 53   : 				goto test;

  000be	eb 26		 jmp	 SHORT $test$40
$LN17@ShiftJIS_S:

; 54   : 			}
; 55   : 			sizeLength--;
; 56   : 			if( *uszString2 == '\0' )

  000c0	8a 03		 mov	 al, BYTE PTR [ebx]
  000c2	4e		 dec	 esi
  000c3	84 c0		 test	 al, al
  000c5	75 04		 jne	 SHORT $LN19@ShiftJIS_S

; 57   : 				c2 = 0;

  000c7	33 c0		 xor	 eax, eax
  000c9	eb 1b		 jmp	 SHORT $test$40
$LN19@ShiftJIS_S:

; 58   : 			else {
; 59   : 				c2 = ((c2 << 8) | *uszString2++);

  000cb	c1 e1 08	 shl	 ecx, 8
  000ce	0f b6 c0	 movzx	 eax, al
  000d1	66 0b c8	 or	 cx, ax
  000d4	43		 inc	 ebx
  000d5	0f b7 c1	 movzx	 eax, cx

; 60   : 			}
; 61   : 		} else

  000d8	eb 0c		 jmp	 SHORT $test$40
$LN13@ShiftJIS_S:

; 62   : 			c2 = tolower(c2);

  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _tolower
  000e0	83 c4 04	 add	 esp, 4
  000e3	0f b7 c0	 movzx	 eax, ax
$test$40:

; 64   :         if (c1 != c2)

  000e6	66 3b c7	 cmp	 ax, di
  000e9	75 19		 jne	 SHORT $LN38@ShiftJIS_S

; 66   : 
; 67   :         if (c1 == 0)

  000eb	66 85 ff	 test	 di, di
  000ee	74 0d		 je	 SHORT $LN31@ShiftJIS_S

; 32   : 		return 0;
; 33   : 	while( sizeLength-- ) {

  000f0	bf 9f 00 00 00	 mov	 edi, 159		; 0000009fH
  000f5	85 f6		 test	 esi, esi
  000f7	0f 85 23 ff ff
	ff		 jne	 $LL2@ShiftJIS_S
$LN31@ShiftJIS_S:
  000fd	5f		 pop	 edi

; 68   :             return(0);
; 69   : 	}
; 70   : 	return 0;
; 71   : }

  000fe	5e		 pop	 esi
  000ff	33 c0		 xor	 eax, eax
  00101	5b		 pop	 ebx
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN38@ShiftJIS_S:

; 65   :             return( (c1 > c2) ? 1 : -1);

  00104	1b c0		 sbb	 eax, eax
  00106	5f		 pop	 edi
  00107	83 e0 02	 and	 eax, 2

; 68   :             return(0);
; 69   : 	}
; 70   : 	return 0;
; 71   : }

  0010a	5e		 pop	 esi
  0010b	48		 dec	 eax
  0010c	5b		 pop	 ebx
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z ENDP		; ShiftJIS_StringCompareCI
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsTrailByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsTrailByte@@YAHD@Z PROC			; ShiftJIS_IsTrailByte, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;
; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00006	3c 40		 cmp	 al, 64			; 00000040H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I
  0000a	3c 7e		 cmp	 al, 126			; 0000007eH
  0000c	76 06		 jbe	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0000e	04 80		 add	 al, -128		; ffffff80H
  00010	3c 7c		 cmp	 al, 124			; 0000007cH
  00012	77 07		 ja	 SHORT $LN4@ShiftJIS_I
$LN5@ShiftJIS_I:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 23   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@ShiftJIS_I:

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;
; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  0001b	33 c0		 xor	 eax, eax

; 23   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?ShiftJIS_IsTrailByte@@YAHD@Z ENDP			; ShiftJIS_IsTrailByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\DS Project\DS Files\Source\ClientSource\Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsLeadByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsLeadByte@@YAHD@Z PROC			; ShiftJIS_IsLeadByte, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;
; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00006	3c 81		 cmp	 al, 129			; 00000081H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I
  0000a	3c 9f		 cmp	 al, 159			; 0000009fH
  0000c	76 06		 jbe	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0000e	04 20		 add	 al, 32			; 00000020H
  00010	3c 1c		 cmp	 al, 28			; 0000001cH
  00012	77 07		 ja	 SHORT $LN4@ShiftJIS_I
$LN5@ShiftJIS_I:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 16   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@ShiftJIS_I:

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;
; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  0001b	33 c0		 xor	 eax, eax

; 16   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?ShiftJIS_IsLeadByte@@YAHD@Z ENDP			; ShiftJIS_IsLeadByte
_TEXT	ENDS
END
